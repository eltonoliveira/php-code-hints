[
    {
        "stmtType": "Class",
        "name": "LogicException",
        "fqn": "\\LogicException",
        "type": 0,
        "extends": "Exception",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "BadFunctionCallException",
        "fqn": "\\BadFunctionCallException",
        "type": 0,
        "extends": "LogicException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "BadMethodCallException",
        "fqn": "\\BadMethodCallException",
        "type": 0,
        "extends": "BadFunctionCallException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DomainException",
        "fqn": "\\DomainException",
        "type": 0,
        "extends": "LogicException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "InvalidArgumentException",
        "fqn": "\\InvalidArgumentException",
        "type": 0,
        "extends": "LogicException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "LengthException",
        "fqn": "\\LengthException",
        "type": 0,
        "extends": "LogicException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "OutOfRangeException",
        "fqn": "\\OutOfRangeException",
        "type": 0,
        "extends": "LogicException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RuntimeException",
        "fqn": "\\RuntimeException",
        "type": 0,
        "extends": "Exception",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "OutOfBoundsException",
        "fqn": "\\OutOfBoundsException",
        "type": 0,
        "extends": "RuntimeException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "OverflowException",
        "fqn": "\\OverflowException",
        "type": 0,
        "extends": "RuntimeException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RangeException",
        "fqn": "\\RangeException",
        "type": 0,
        "extends": "RuntimeException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "UnderflowException",
        "fqn": "\\UnderflowException",
        "type": 0,
        "extends": "RuntimeException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "UnexpectedValueException",
        "fqn": "\\UnexpectedValueException",
        "type": 0,
        "extends": "RuntimeException",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveIteratorIterator",
        "fqn": "\\RecursiveIteratorIterator",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Traversable",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": "RecursiveIteratorIterator::LEAVES_ONLY"
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.3)<br\/>\r\n * Construct a RecursiveIteratorIterator\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.construct.php\r\n * @param Traversable $iterator <p>\r\n * The iterator being constructed from. Either a\r\n * <b>RecursiveIterator<\/b> or <b>IteratorAggregate<\/b>.\r\n * <\/p>\r\n * @param int $mode [optional] <p>\r\n * Optional mode. Possible values are\r\n * <b>RecursiveIteratorIterator::LEAVES_ONLY<\/b>\r\n * - The default. Lists only leaves in iteration.\r\n * <b>RecursiveIteratorIterator::SELF_FIRST<\/b>\r\n * - Lists leaves and parents in iteration with parents coming first.\r\n * <b>RecursiveIteratorIterator::CHILD_FIRST<\/b>\r\n * - Lists leaves and parents in iteration with leaves coming first.\r\n * <\/p>\r\n * @param int $flags [optional] <p>\r\n * Optional flag. Possible values are <b>RecursiveIteratorIterator::CATCH_GET_CHILD<\/b>\r\n * which will then ignore exceptions thrown in calls to <b>RecursiveIteratorIterator::getChildren<\/b>.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Rewind the iterator to the first element of the top level inner iterator\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Check whether the current position is valid\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the current position is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Access the current key\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.key.php\r\n * @return mixed The current key.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Access the current element value\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.current.php\r\n * @return mixed The current elements value.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Move forward to the next element\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getDepth",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Get the current depth of the recursive iteration\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.getdepth.php\r\n * @return int The current depth of the recursive iteration.\r\n *\/"
            },
            {
                "name": "getSubIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "level",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * The current active sub iterator\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.getsubiterator.php\r\n * @param int $level [optional] <p>\r\n * <\/p>\r\n * @return RecursiveIterator The current active sub iterator.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get inner iterator\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.getinneriterator.php\r\n * @return iterator The current active sub iterator.\r\n *\/"
            },
            {
                "name": "beginIteration",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Begin Iteration\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.beginiteration.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "endIteration",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * End Iteration\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.enditeration.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "callHasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Has children\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.callhaschildren.php\r\n * @return bool <b>TRUE<\/b> if the element has children, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "callGetChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get children\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.callgetchildren.php\r\n * @return RecursiveIterator A <b>RecursiveIterator<\/b>.\r\n *\/"
            },
            {
                "name": "beginChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Begin children\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.beginchildren.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "endChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * End children\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.endchildren.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "nextElement",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Next element\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.nextelement.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setMaxDepth",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "max_depth",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Set max depth\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.setmaxdepth.php\r\n * @param string $max_depth [optional] <p>\r\n * The maximum allowed depth. -1 is used\r\n * for any depth.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getMaxDepth",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get max depth\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.getmaxdepth.php\r\n * @return mixed The maximum accepted depth, or <b>FALSE<\/b> if any depth is allowed.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "LEAVES_ONLY",
                "value": 0,
                "doc": null
            },
            {
                "name": "SELF_FIRST",
                "value": 1,
                "doc": null
            },
            {
                "name": "CHILD_FIRST",
                "value": 2,
                "doc": null
            },
            {
                "name": "CATCH_GET_CHILD",
                "value": 16,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "IteratorIterator",
        "fqn": "\\IteratorIterator",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Traversable",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * Create an iterator from anything that is traversable.\r\n *\r\n * @link http:\/\/php.net\/iteratoriterator.construct.php\r\n * @param Traversable $iterator\r\n *   The traversable iterator.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * Get the current value.\r\n *\r\n * @link http:\/\/php.net\/iteratoriterator.current.php\r\n * @return mixed The value of the current element.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * Get the inner iterator.\r\n *\r\n * @link http:\/\/php.net\/iteratoriterator.getinneriterator.php\r\n * @retrun \\Traversable The inner iterator as passed to {@see \\IteratorIterator::__construct}.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * Get the key of the current element\r\n *\r\n * @link http:\/\/php.net\/iteratoriterator.key.php\r\n * @return mixed The key of the current element.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * Forward to the next element.\r\n *\r\n * @link http:\/\/php.net\/iteratoriterator.next.php\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * Rewind to the first element.\r\n *\r\n * @link http:\/\/php.net\/iteratoriterator.rewind.php\r\n * @return boolean <code>TRUE<\/code> if the iterator is valid, otherwise <code>FALSE<\/code>.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * Checks if the iterator is valid.\r\n *\r\n * @link http:\/\/php.net\/iteratoriterator.valid.php\r\n * @return boolean <code>TRUE<\/code> if the iterator is valid, otherwise <code>FALSE<\/code>.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "FilterIterator",
        "fqn": "\\FilterIterator",
        "type": 0,
        "extends": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct a filterIterator\r\n * @link http:\/\/php.net\/filteriterator.construct.php\r\n * @param Iterator $iterator <p>\r\n * The iterator that is being filtered.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the iterator\r\n * @link http:\/\/php.net\/filteriterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element is valid\r\n * @link http:\/\/php.net\/filteriterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current key\r\n * @link http:\/\/php.net\/filteriterator.key.php\r\n * @return mixed The current key.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current element value\r\n * @link http:\/\/php.net\/filteriterator.current.php\r\n * @return mixed The current element value.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Move the iterator forward\r\n * @link http:\/\/php.net\/filteriterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the inner iterator\r\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\r\n * @return Iterator The inner iterator.\r\n *\/"
            },
            {
                "name": "accept",
                "type": 17,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element of the iterator is acceptable\r\n * @link http:\/\/php.net\/filteriterator.accept.php\r\n * @return bool <b>TRUE<\/b> if the current element is acceptable, otherwise <b>FALSE<\/b>.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveFilterIterator",
        "fqn": "\\RecursiveFilterIterator",
        "type": 0,
        "extends": "FilterIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "RecursiveIterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Create a RecursiveFilterIterator from a RecursiveIterator\r\n * @link http:\/\/php.net\/recursivefilteriterator.construct.php\r\n * @param RecursiveIterator $iterator <p>\r\n * The <b>RecursiveIterator<\/b> to be filtered.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the inner iterator's current element has children\r\n * @link http:\/\/php.net\/recursivefilteriterator.haschildren.php\r\n * @return void <b>TRUE<\/b> if the inner iterator has children, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Return the inner iterator's children contained in a RecursiveFilterIterator\r\n * @link http:\/\/php.net\/recursivefilteriterator.getchildren.php\r\n * @return void a <b>RecursiveFilterIterator<\/b> containing the inner iterator's children.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the iterator\r\n * @link http:\/\/php.net\/filteriterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element is valid\r\n * @link http:\/\/php.net\/filteriterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current key\r\n * @link http:\/\/php.net\/filteriterator.key.php\r\n * @return mixed The current key.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current element value\r\n * @link http:\/\/php.net\/filteriterator.current.php\r\n * @return mixed The current element value.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Move the iterator forward\r\n * @link http:\/\/php.net\/filteriterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the inner iterator\r\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\r\n * @return Iterator The inner iterator.\r\n *\/"
            },
            {
                "name": "accept",
                "type": 17,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element of the iterator is acceptable\r\n * @link http:\/\/php.net\/filteriterator.accept.php\r\n * @return bool <b>TRUE<\/b> if the current element is acceptable, otherwise <b>FALSE<\/b>.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "CallbackFilterIterator",
        "fqn": "\\CallbackFilterIterator",
        "type": 0,
        "extends": "FilterIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "callback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Create a filtered iterator from another iterator\r\n * @link http:\/\/php.net\/callbackfilteriterator.construct.php\r\n * @param Iterator $iterator\r\n * @param $callback\r\n *\/"
            },
            {
                "name": "accept",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Calls the callback with the current value, the current key and the inner iterator as arguments\r\n * @link http:\/\/php.net\/callbackfilteriterator.accept.php\r\n * @return string <b>TRUE<\/b> to accept the current item, or <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the iterator\r\n * @link http:\/\/php.net\/filteriterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element is valid\r\n * @link http:\/\/php.net\/filteriterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current key\r\n * @link http:\/\/php.net\/filteriterator.key.php\r\n * @return mixed The current key.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current element value\r\n * @link http:\/\/php.net\/filteriterator.current.php\r\n * @return mixed The current element value.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Move the iterator forward\r\n * @link http:\/\/php.net\/filteriterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the inner iterator\r\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\r\n * @return Iterator The inner iterator.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveCallbackFilterIterator",
        "fqn": "\\RecursiveCallbackFilterIterator",
        "type": 0,
        "extends": "CallbackFilterIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "RecursiveIterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "callback",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Create a RecursiveCallbackFilterIterator from a RecursiveIterator\r\n * @link http:\/\/php.net\/recursivecallbackfilteriterator.construct.php\r\n * @param RecursiveIterator $iterator\r\n * @param $callback\r\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Check whether the inner iterator's current element has children\r\n * @link http:\/\/php.net\/recursivecallbackfilteriterator.haschildren.php\r\n * @return void <b>TRUE<\/b> if the current element has children, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Return the inner iterator's children contained in a RecursiveCallbackFilterIterator\r\n * @link http:\/\/php.net\/recursivecallbackfilteriterator.getchildren.php\r\n * @return RecursiveCallbackFilterIterator a <b>RecursiveCallbackFilterIterator<\/b> containing\r\n * the children.\r\n *\/"
            },
            {
                "name": "accept",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Calls the callback with the current value, the current key and the inner iterator as arguments\r\n * @link http:\/\/php.net\/callbackfilteriterator.accept.php\r\n * @return string <b>TRUE<\/b> to accept the current item, or <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the iterator\r\n * @link http:\/\/php.net\/filteriterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element is valid\r\n * @link http:\/\/php.net\/filteriterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current key\r\n * @link http:\/\/php.net\/filteriterator.key.php\r\n * @return mixed The current key.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current element value\r\n * @link http:\/\/php.net\/filteriterator.current.php\r\n * @return mixed The current element value.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Move the iterator forward\r\n * @link http:\/\/php.net\/filteriterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the inner iterator\r\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\r\n * @return Iterator The inner iterator.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "ParentIterator",
        "fqn": "\\ParentIterator",
        "type": 0,
        "extends": "RecursiveFilterIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "RecursiveIterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Constructs a ParentIterator\r\n * @link http:\/\/php.net\/parentiterator.construct.php\r\n * @param RecursiveIterator $iterator <p>\r\n * The iterator being constructed upon.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "accept",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Determines acceptability\r\n * @link http:\/\/php.net\/parentiterator.accept.php\r\n * @return bool <b>TRUE<\/b> if the current element is acceptable, otherwise <b>FALSE<\/b>.\r\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the inner iterator's current element has children\r\n * @link http:\/\/php.net\/recursivefilteriterator.haschildren.php\r\n * @return void <b>TRUE<\/b> if the inner iterator has children, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Return the inner iterator's children contained in a RecursiveFilterIterator\r\n * @link http:\/\/php.net\/recursivefilteriterator.getchildren.php\r\n * @return void a <b>RecursiveFilterIterator<\/b> containing the inner iterator's children.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the iterator\r\n * @link http:\/\/php.net\/filteriterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element is valid\r\n * @link http:\/\/php.net\/filteriterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current key\r\n * @link http:\/\/php.net\/filteriterator.key.php\r\n * @return mixed The current key.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current element value\r\n * @link http:\/\/php.net\/filteriterator.current.php\r\n * @return mixed The current element value.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Move the iterator forward\r\n * @link http:\/\/php.net\/filteriterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the inner iterator\r\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\r\n * @return Iterator The inner iterator.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "LimitIterator",
        "fqn": "\\LimitIterator",
        "type": 0,
        "extends": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    },
                    {
                        "name": "count",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct a LimitIterator\r\n * @link http:\/\/php.net\/limititerator.construct.php\r\n * @param Iterator $iterator <p>\r\n * The <b>Iterator<\/b> to limit.\r\n * <\/p>\r\n * @param int $offset [optional] <p>\r\n * Optional offset of the limit.\r\n * <\/p>\r\n * @param int $count [optional] <p>\r\n * Optional count of the limit.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the iterator to the specified starting offset\r\n * @link http:\/\/php.net\/limititerator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element is valid\r\n * @link http:\/\/php.net\/limititerator.valid.php\r\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get current key\r\n * @link http:\/\/php.net\/limititerator.key.php\r\n * @return mixed the key for the current item.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get current element\r\n * @link http:\/\/php.net\/limititerator.current.php\r\n * @return mixed the current element or <b>NULL<\/b> if there is none.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Move the iterator forward\r\n * @link http:\/\/php.net\/limititerator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Seek to the given position\r\n * @link http:\/\/php.net\/limititerator.seek.php\r\n * @param int $position <p>\r\n * The position to seek to.\r\n * <\/p>\r\n * @return int the offset position after seeking.\r\n *\/"
            },
            {
                "name": "getPosition",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Return the current position\r\n * @link http:\/\/php.net\/limititerator.getposition.php\r\n * @return int The current position.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get inner iterator\r\n * @link http:\/\/php.net\/limititerator.getinneriterator.php\r\n * @return Iterator The inner iterator passed to <b>LimitIterator::__construct<\/b>.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "CachingIterator",
        "fqn": "\\CachingIterator",
        "type": 0,
        "extends": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "self::CALL_TOSTRING"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Construct a new CachingIterator object for the iterator.\r\n * @link http:\/\/php.net\/cachingiterator.construct.php\r\n * @param Iterator $iterator <p>\r\n * Iterator to cache\r\n * <\/p>\r\n * @param string $flags [optional] <p>\r\n * Bitmask of flags.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Rewind the iterator\r\n * @link http:\/\/php.net\/cachingiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Check whether the current element is valid\r\n * @link http:\/\/php.net\/cachingiterator.valid.php\r\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return the key for the current element\r\n * @link http:\/\/php.net\/cachingiterator.key.php\r\n * @return scalar\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return the current element\r\n * @link http:\/\/php.net\/cachingiterator.current.php\r\n * @return void Mixed\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Move the iterator forward\r\n * @link http:\/\/php.net\/cachingiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "hasNext",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Check whether the inner iterator has a valid next element\r\n * @link http:\/\/php.net\/cachingiterator.hasnext.php\r\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return the string representation of the current element\r\n * @link http:\/\/php.net\/cachingiterator.tostring.php\r\n * @return void The string representation of the current element.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Returns the inner iterator\r\n * @link http:\/\/php.net\/cachingiterator.getinneriterator.php\r\n * @return Iterator an object implementing the Iterator interface.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Get flags used\r\n * @link http:\/\/php.net\/cachingiterator.getflags.php\r\n * @return void Description...\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The setFlags purpose\r\n * @link http:\/\/php.net\/cachingiterator.setflags.php\r\n * @param bitmask $flags <p>\r\n * Bitmask of the flags to set.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The offsetGet purpose\r\n * @link http:\/\/php.net\/cachingiterator.offsetget.php\r\n * @param string $index <p>\r\n * Description...\r\n * <\/p>\r\n * @return void Description...\r\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The offsetSet purpose\r\n * @link http:\/\/php.net\/cachingiterator.offsetset.php\r\n * @param string $index <p>\r\n * The index of the element to be set.\r\n * <\/p>\r\n * @param string $newval <p>\r\n * The new value for the <i>index<\/i>.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The offsetUnset purpose\r\n * @link http:\/\/php.net\/cachingiterator.offsetunset.php\r\n * @param string $index <p>\r\n * The index of the element to be unset.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The offsetExists purpose\r\n * @link http:\/\/php.net\/cachingiterator.offsetexists.php\r\n * @param string $index <p>\r\n * The index being checked.\r\n * <\/p>\r\n * @return void <b>TRUE<\/b> if an entry referenced by the offset exists, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getCache",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The getCache purpose\r\n * @link http:\/\/php.net\/cachingiterator.getcache.php\r\n * @return void Description...\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * The number of elements in the iterator\r\n * @link http:\/\/php.net\/cachingiterator.count.php\r\n * @return int The count of the elements iterated over.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CALL_TOSTRING",
                "value": 1,
                "doc": null
            },
            {
                "name": "CATCH_GET_CHILD",
                "value": 16,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_KEY",
                "value": 2,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_CURRENT",
                "value": 4,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_INNER",
                "value": 8,
                "doc": null
            },
            {
                "name": "FULL_CACHE",
                "value": 256,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveCachingIterator",
        "fqn": "\\RecursiveCachingIterator",
        "type": 0,
        "extends": "CachingIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "self::CALL_TOSTRING"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct\r\n * @link http:\/\/php.net\/recursivecachingiterator.construct.php\r\n * @param Iterator $iterator <p>\r\n * The iterator being used.\r\n * <\/p>\r\n * @param string $flags [optional] <p>\r\n * The flags. Use <b>CALL_TOSTRING<\/b> to call\r\n * <b>RecursiveCachingIterator::__toString<\/b> for every element (the default),\r\n * and\/or <b>CATCH_GET_CHILD<\/b> to catch exceptions when trying to get children.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element of the inner iterator has children\r\n * @link http:\/\/php.net\/recursivecachingiterator.haschildren.php\r\n * @return bool <b>TRUE<\/b> if the inner iterator has children, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Return the inner iterator's children as a RecursiveCachingIterator\r\n * @link http:\/\/php.net\/recursivecachingiterator.getchildren.php\r\n * @return RecursiveCachingIterator The inner iterator's children, as a RecursiveCachingIterator.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Rewind the iterator\r\n * @link http:\/\/php.net\/cachingiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Check whether the current element is valid\r\n * @link http:\/\/php.net\/cachingiterator.valid.php\r\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return the key for the current element\r\n * @link http:\/\/php.net\/cachingiterator.key.php\r\n * @return scalar\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return the current element\r\n * @link http:\/\/php.net\/cachingiterator.current.php\r\n * @return void Mixed\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Move the iterator forward\r\n * @link http:\/\/php.net\/cachingiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "hasNext",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Check whether the inner iterator has a valid next element\r\n * @link http:\/\/php.net\/cachingiterator.hasnext.php\r\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return the string representation of the current element\r\n * @link http:\/\/php.net\/cachingiterator.tostring.php\r\n * @return void The string representation of the current element.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Returns the inner iterator\r\n * @link http:\/\/php.net\/cachingiterator.getinneriterator.php\r\n * @return Iterator an object implementing the Iterator interface.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Get flags used\r\n * @link http:\/\/php.net\/cachingiterator.getflags.php\r\n * @return void Description...\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The setFlags purpose\r\n * @link http:\/\/php.net\/cachingiterator.setflags.php\r\n * @param bitmask $flags <p>\r\n * Bitmask of the flags to set.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The offsetGet purpose\r\n * @link http:\/\/php.net\/cachingiterator.offsetget.php\r\n * @param string $index <p>\r\n * Description...\r\n * <\/p>\r\n * @return void Description...\r\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The offsetSet purpose\r\n * @link http:\/\/php.net\/cachingiterator.offsetset.php\r\n * @param string $index <p>\r\n * The index of the element to be set.\r\n * <\/p>\r\n * @param string $newval <p>\r\n * The new value for the <i>index<\/i>.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The offsetUnset purpose\r\n * @link http:\/\/php.net\/cachingiterator.offsetunset.php\r\n * @param string $index <p>\r\n * The index of the element to be unset.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The offsetExists purpose\r\n * @link http:\/\/php.net\/cachingiterator.offsetexists.php\r\n * @param string $index <p>\r\n * The index being checked.\r\n * <\/p>\r\n * @return void <b>TRUE<\/b> if an entry referenced by the offset exists, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getCache",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * The getCache purpose\r\n * @link http:\/\/php.net\/cachingiterator.getcache.php\r\n * @return void Description...\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * The number of elements in the iterator\r\n * @link http:\/\/php.net\/cachingiterator.count.php\r\n * @return int The count of the elements iterated over.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CALL_TOSTRING",
                "value": 1,
                "doc": null
            },
            {
                "name": "CATCH_GET_CHILD",
                "value": 16,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_KEY",
                "value": 2,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_CURRENT",
                "value": 4,
                "doc": null
            },
            {
                "name": "TOSTRING_USE_INNER",
                "value": 8,
                "doc": null
            },
            {
                "name": "FULL_CACHE",
                "value": 256,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "NoRewindIterator",
        "fqn": "\\NoRewindIterator",
        "type": 0,
        "extends": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct a NoRewindIterator\r\n * @link http:\/\/php.net\/norewinditerator.construct.php\r\n * @param Iterator $iterator <p>\r\n * The iterator being used.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Prevents the rewind operation on the inner iterator.\r\n * @link http:\/\/php.net\/norewinditerator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Validates the iterator\r\n * @link http:\/\/php.net\/norewinditerator.valid.php\r\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current key\r\n * @link http:\/\/php.net\/norewinditerator.key.php\r\n * @return mixed The current key.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current value\r\n * @link http:\/\/php.net\/norewinditerator.current.php\r\n * @return mixed The current value.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Forward to the next element\r\n * @link http:\/\/php.net\/norewinditerator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the inner iterator\r\n * @link http:\/\/php.net\/norewinditerator.getinneriterator.php\r\n * @return iterator The inner iterator, as passed to <b>NoRewindIterator::__construct<\/b>.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "AppendIterator",
        "fqn": "\\AppendIterator",
        "type": 0,
        "extends": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Constructs an AppendIterator\r\n * @link http:\/\/php.net\/appenditerator.construct.php\r\n *\/"
            },
            {
                "name": "append",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Appends an iterator\r\n * @link http:\/\/php.net\/appenditerator.append.php\r\n * @param Iterator $iterator <p>\r\n * The iterator to append.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewinds the Iterator\r\n * @link http:\/\/php.net\/appenditerator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Checks validity of the current element\r\n * @link http:\/\/php.net\/appenditerator.valid.php\r\n * @return bool <b>TRUE<\/b> if the current iteration is valid, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the current key\r\n * @link http:\/\/php.net\/appenditerator.key.php\r\n * @return scalar The current key if it is valid or <b>NULL<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the current value\r\n * @link http:\/\/php.net\/appenditerator.current.php\r\n * @return mixed The current value if it is valid or <b>NULL<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Moves to the next element\r\n * @link http:\/\/php.net\/appenditerator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the inner iterator\r\n * @link http:\/\/php.net\/appenditerator.getinneriterator.php\r\n * @return Iterator The current inner iterator, or <b>NULL<\/b> if there is not one.\r\n *\/"
            },
            {
                "name": "getIteratorIndex",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets an index of iterators\r\n * @link http:\/\/php.net\/appenditerator.getiteratorindex.php\r\n * @return int an integer, which is the zero-based index\r\n * of the current inner iterator.\r\n *\/"
            },
            {
                "name": "getArrayIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the ArrayIterator\r\n * @link http:\/\/php.net\/appenditerator.getarrayiterator.php\r\n * @return void an <b>ArrayIterator<\/b> containing\r\n * the appended iterators.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "InfiniteIterator",
        "fqn": "\\InfiniteIterator",
        "type": 0,
        "extends": "IteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Constructs an InfiniteIterator\r\n * @link http:\/\/php.net\/infiniteiterator.construct.php\r\n * @param Iterator $iterator <p>\r\n * The iterator to infinitely iterate over.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Moves the inner Iterator forward or rewinds it\r\n * @link http:\/\/php.net\/infiniteiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind to the first element\r\n * @link http:\/\/php.net\/iteratoriterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Checks if the iterator is valid\r\n * @link http:\/\/php.net\/iteratoriterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the iterator is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the key of the current element\r\n * @link http:\/\/php.net\/iteratoriterator.key.php\r\n * @return scalar The key of the current element.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current value\r\n * @link http:\/\/php.net\/iteratoriterator.current.php\r\n * @return mixed The value of the current element.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the inner iterator\r\n * @link http:\/\/php.net\/iteratoriterator.getinneriterator.php\r\n * @return Traversable The inner iterator as passed to <b>IteratorIterator::__construct<\/b>.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RegexIterator",
        "fqn": "\\RegexIterator",
        "type": 0,
        "extends": "FilterIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "regex",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "preg_flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Create a new RegexIterator\r\n * @link http:\/\/php.net\/regexiterator.construct.php\r\n * @param Iterator $iterator\r\n * @param $regex\r\n * @param $mode [optional]\r\n * @param $flags [optional]\r\n * @param $preg_flags [optional]\r\n *\/"
            },
            {
                "name": "accept",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Get accept status\r\n * @link http:\/\/php.net\/regexiterator.accept.php\r\n * @return bool <b>TRUE<\/b> if a match, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Returns operation mode.\r\n * @link http:\/\/php.net\/regexiterator.getmode.php\r\n * @return int the operation mode.\r\n *\/"
            },
            {
                "name": "setMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sets the operation mode.\r\n * @link http:\/\/php.net\/regexiterator.setmode.php\r\n * @param int $mode <p>\r\n * The operation mode.\r\n * <\/p>\r\n * <p>\r\n * The available modes are listed below. The actual\r\n * meanings of these modes are described in the\r\n * predefined constants.\r\n * <table>\r\n * <b>RegexIterator<\/b> modes\r\n * <tr valign=\"top\">\r\n * <td>value<\/td>\r\n * <td>constant<\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>0<\/td>\r\n * <td>\r\n * RegexIterator::MATCH\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>1<\/td>\r\n * <td>\r\n * RegexIterator::GET_MATCH\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>2<\/td>\r\n * <td>\r\n * RegexIterator::ALL_MATCHES\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>3<\/td>\r\n * <td>\r\n * RegexIterator::SPLIT\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>4<\/td>\r\n * <td>\r\n * RegexIterator::REPLACE\r\n * <\/td>\r\n * <\/tr>\r\n * <\/table>\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Get flags\r\n * @link http:\/\/php.net\/regexiterator.getflags.php\r\n * @return int the set flags.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sets the flags.\r\n * @link http:\/\/php.net\/regexiterator.setflags.php\r\n * @param int $flags <p>\r\n * The flags to set, a bitmask of class constants.\r\n * <\/p>\r\n * <p>\r\n * The available flags are listed below. The actual\r\n * meanings of these flags are described in the\r\n * predefined constants.\r\n * <table>\r\n * <b>RegexIterator<\/b> flags\r\n * <tr valign=\"top\">\r\n * <td>value<\/td>\r\n * <td>constant<\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>1<\/td>\r\n * <td>\r\n * RegexIterator::USE_KEY\r\n * <\/td>\r\n * <\/tr>\r\n * <\/table>\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getPregFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Returns the regular expression flags.\r\n * @link http:\/\/php.net\/regexiterator.getpregflags.php\r\n * @return int a bitmask of the regular expression flags.\r\n *\/"
            },
            {
                "name": "setPregFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "preg_flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sets the regular expression flags.\r\n * @link http:\/\/php.net\/regexiterator.setpregflags.php\r\n * @param int $preg_flags <p>\r\n * The regular expression flags. See <b>RegexIterator::__construct<\/b>\r\n * for an overview of available flags.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getRegex",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Returns current regular expression\r\n * @link http:\/\/php.net\/regexiterator.getregex.php\r\n * @return string\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the iterator\r\n * @link http:\/\/php.net\/filteriterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element is valid\r\n * @link http:\/\/php.net\/filteriterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current key\r\n * @link http:\/\/php.net\/filteriterator.key.php\r\n * @return mixed The current key.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current element value\r\n * @link http:\/\/php.net\/filteriterator.current.php\r\n * @return mixed The current element value.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Move the iterator forward\r\n * @link http:\/\/php.net\/filteriterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the inner iterator\r\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\r\n * @return Iterator The inner iterator.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "replacement",
                "doc": null
            }
        ],
        "constants": [
            {
                "name": "USE_KEY",
                "value": 1,
                "doc": null
            },
            {
                "name": "MATCH",
                "value": 0,
                "doc": null
            },
            {
                "name": "GET_MATCH",
                "value": 1,
                "doc": null
            },
            {
                "name": "ALL_MATCHES",
                "value": 2,
                "doc": null
            },
            {
                "name": "SPLIT",
                "value": 3,
                "doc": null
            },
            {
                "name": "REPLACE",
                "value": 4,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveRegexIterator",
        "fqn": "\\RecursiveRegexIterator",
        "type": 0,
        "extends": "RegexIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "RecursiveIterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "regex",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "preg_flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Creates a new RecursiveRegexIterator.\r\n * @link http:\/\/php.net\/recursiveregexiterator.construct.php\r\n * @param RecursiveIterator $iterator\r\n * @param $regex\r\n * @param $mode [optional]\r\n * @param $flags [optional]\r\n * @param $preg_flags [optional]\r\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Returns whether an iterator can be obtained for the current entry.\r\n * @link http:\/\/php.net\/recursiveregexiterator.haschildren.php\r\n * @return bool <b>TRUE<\/b> if an iterator can be obtained for the current entry, otherwise returns <b>FALSE<\/b>.\r\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Returns an iterator for the current entry.\r\n * @link http:\/\/php.net\/recursiveregexiterator.getchildren.php\r\n * @return RecursiveRegexIterator An iterator for the current entry, if it can be iterated over by the inner iterator.\r\n *\/"
            },
            {
                "name": "accept",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Get accept status\r\n * @link http:\/\/php.net\/regexiterator.accept.php\r\n * @return bool <b>TRUE<\/b> if a match, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Returns operation mode.\r\n * @link http:\/\/php.net\/regexiterator.getmode.php\r\n * @return int the operation mode.\r\n *\/"
            },
            {
                "name": "setMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sets the operation mode.\r\n * @link http:\/\/php.net\/regexiterator.setmode.php\r\n * @param int $mode <p>\r\n * The operation mode.\r\n * <\/p>\r\n * <p>\r\n * The available modes are listed below. The actual\r\n * meanings of these modes are described in the\r\n * predefined constants.\r\n * <table>\r\n * <b>RegexIterator<\/b> modes\r\n * <tr valign=\"top\">\r\n * <td>value<\/td>\r\n * <td>constant<\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>0<\/td>\r\n * <td>\r\n * RegexIterator::MATCH\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>1<\/td>\r\n * <td>\r\n * RegexIterator::GET_MATCH\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>2<\/td>\r\n * <td>\r\n * RegexIterator::ALL_MATCHES\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>3<\/td>\r\n * <td>\r\n * RegexIterator::SPLIT\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>4<\/td>\r\n * <td>\r\n * RegexIterator::REPLACE\r\n * <\/td>\r\n * <\/tr>\r\n * <\/table>\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Get flags\r\n * @link http:\/\/php.net\/regexiterator.getflags.php\r\n * @return int the set flags.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sets the flags.\r\n * @link http:\/\/php.net\/regexiterator.setflags.php\r\n * @param int $flags <p>\r\n * The flags to set, a bitmask of class constants.\r\n * <\/p>\r\n * <p>\r\n * The available flags are listed below. The actual\r\n * meanings of these flags are described in the\r\n * predefined constants.\r\n * <table>\r\n * <b>RegexIterator<\/b> flags\r\n * <tr valign=\"top\">\r\n * <td>value<\/td>\r\n * <td>constant<\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>1<\/td>\r\n * <td>\r\n * RegexIterator::USE_KEY\r\n * <\/td>\r\n * <\/tr>\r\n * <\/table>\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getPregFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Returns the regular expression flags.\r\n * @link http:\/\/php.net\/regexiterator.getpregflags.php\r\n * @return int a bitmask of the regular expression flags.\r\n *\/"
            },
            {
                "name": "setPregFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "preg_flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sets the regular expression flags.\r\n * @link http:\/\/php.net\/regexiterator.setpregflags.php\r\n * @param int $preg_flags <p>\r\n * The regular expression flags. See <b>RegexIterator::__construct<\/b>\r\n * for an overview of available flags.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getRegex",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Returns current regular expression\r\n * @link http:\/\/php.net\/regexiterator.getregex.php\r\n * @return string\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the iterator\r\n * @link http:\/\/php.net\/filteriterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Check whether the current element is valid\r\n * @link http:\/\/php.net\/filteriterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the current element is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current key\r\n * @link http:\/\/php.net\/filteriterator.key.php\r\n * @return mixed The current key.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the current element value\r\n * @link http:\/\/php.net\/filteriterator.current.php\r\n * @return mixed The current element value.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Move the iterator forward\r\n * @link http:\/\/php.net\/filteriterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get the inner iterator\r\n * @link http:\/\/php.net\/filteriterator.getinneriterator.php\r\n * @return Iterator The inner iterator.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "replacement",
                "doc": null
            }
        ],
        "constants": [
            {
                "name": "USE_KEY",
                "value": 1,
                "doc": null
            },
            {
                "name": "MATCH",
                "value": 0,
                "doc": null
            },
            {
                "name": "GET_MATCH",
                "value": 1,
                "doc": null
            },
            {
                "name": "ALL_MATCHES",
                "value": 2,
                "doc": null
            },
            {
                "name": "SPLIT",
                "value": 3,
                "doc": null
            },
            {
                "name": "REPLACE",
                "value": 4,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "EmptyIterator",
        "fqn": "\\EmptyIterator",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * The rewind() method\r\n * @link http:\/\/php.net\/emptyiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * The valid() method\r\n * @link http:\/\/php.net\/emptyiterator.valid.php\r\n * @return void <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * The key() method\r\n * @link http:\/\/php.net\/emptyiterator.key.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * The current() method\r\n * @link http:\/\/php.net\/emptyiterator.current.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * The next() method\r\n * @link http:\/\/php.net\/emptyiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveTreeIterator",
        "fqn": "\\RecursiveTreeIterator",
        "type": 0,
        "extends": "RecursiveIteratorIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "it",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "RecursiveTreeIterator::BYPASS_KEY"
                    },
                    {
                        "name": "cit_flags",
                        "type": null,
                        "byRef": false,
                        "default": "CachingIterator::CATCH_GET_CHILD"
                    },
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": "RecursiveIteratorIterator::SELF_FIRST"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Construct a RecursiveTreeIterator\r\n * @link http:\/\/php.net\/recursivetreeiterator.construct.php\r\n * @param RecursiveIterator|IteratorAggregate $it <p>\r\n * The <b>RecursiveIterator<\/b> or <b>IteratorAggregate<\/b> to iterate over.\r\n * <\/p>\r\n * @param int $flags [optional] <p>\r\n * Flags may be provided which will affect the behavior of some methods.\r\n * A list of the flags can found under RecursiveTreeIterator predefined constants.\r\n * <\/p>\r\n * @param int $cit_flags [optional]\r\n * @param int $mode [optional] <p>\r\n * Flags to affect the behavior of the <b>RecursiveIteratorIterator<\/b> used internally.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewind iterator\r\n * @link http:\/\/php.net\/recursivetreeiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Check validity\r\n * @link http:\/\/php.net\/recursivetreeiterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the current position is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Get the key of the current element\r\n * @link http:\/\/php.net\/recursivetreeiterator.key.php\r\n * @return string the current key prefixed and postfixed.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Get current element\r\n * @link http:\/\/php.net\/recursivetreeiterator.current.php\r\n * @return string the current element prefixed and postfixed.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to next element\r\n * @link http:\/\/php.net\/recursivetreeiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "beginIteration",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Begin iteration\r\n * @link http:\/\/php.net\/recursivetreeiterator.beginiteration.php\r\n * @return RecursiveIterator A <b>RecursiveIterator<\/b>.\r\n *\/"
            },
            {
                "name": "endIteration",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * End iteration\r\n * @link http:\/\/php.net\/recursivetreeiterator.enditeration.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "callHasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Has children\r\n * @link http:\/\/php.net\/recursivetreeiterator.callhaschildren.php\r\n * @return bool <b>TRUE<\/b> if there are children, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "callGetChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Get children\r\n * @link http:\/\/php.net\/recursivetreeiterator.callgetchildren.php\r\n * @return RecursiveIterator A <b>RecursiveIterator<\/b>.\r\n *\/"
            },
            {
                "name": "beginChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Begin children\r\n * @link http:\/\/php.net\/recursivetreeiterator.beginchildren.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "endChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * End children\r\n * @link http:\/\/php.net\/recursivetreeiterator.endchildren.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "nextElement",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Next element\r\n * @link http:\/\/php.net\/recursivetreeiterator.nextelement.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getPrefix",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Get the prefix\r\n * @link http:\/\/php.net\/recursivetreeiterator.getprefix.php\r\n * @return string the string to place in front of current element\r\n *\/"
            },
            {
                "name": "setPrefixPart",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "part",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Set a part of the prefix\r\n * @link http:\/\/php.net\/recursivetreeiterator.setprefixpart.php\r\n * @param int $part <p>\r\n * One of the RecursiveTreeIterator::PREFIX_* constants.\r\n * <\/p>\r\n * @param string $value <p>\r\n * The value to assign to the part of the prefix specified in <i>part<\/i>.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getEntry",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Get current entry\r\n * @link http:\/\/php.net\/recursivetreeiterator.getentry.php\r\n * @return string the part of the tree built for the current element.\r\n *\/"
            },
            {
                "name": "getPostfix",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Get the postfix\r\n * @link http:\/\/php.net\/recursivetreeiterator.getpostfix.php\r\n * @return void the string to place after the current element.\r\n *\/"
            },
            {
                "name": "getDepth",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Get the current depth of the recursive iteration\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.getdepth.php\r\n * @return int The current depth of the recursive iteration.\r\n *\/"
            },
            {
                "name": "getSubIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "level",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * The current active sub iterator\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.getsubiterator.php\r\n * @param int $level [optional] <p>\r\n * <\/p>\r\n * @return RecursiveIterator The current active sub iterator.\r\n *\/"
            },
            {
                "name": "getInnerIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get inner iterator\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.getinneriterator.php\r\n * @return iterator The current active sub iterator.\r\n *\/"
            },
            {
                "name": "setMaxDepth",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "max_depth",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Set max depth\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.setmaxdepth.php\r\n * @param string $max_depth [optional] <p>\r\n * The maximum allowed depth. -1 is used\r\n * for any depth.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getMaxDepth",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get max depth\r\n * @link http:\/\/php.net\/recursiveiteratoriterator.getmaxdepth.php\r\n * @return mixed The maximum accepted depth, or <b>FALSE<\/b> if any depth is allowed.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "LEAVES_ONLY",
                "value": 0,
                "doc": null
            },
            {
                "name": "SELF_FIRST",
                "value": 1,
                "doc": null
            },
            {
                "name": "CHILD_FIRST",
                "value": 2,
                "doc": null
            },
            {
                "name": "CATCH_GET_CHILD",
                "value": 16,
                "doc": null
            },
            {
                "name": "BYPASS_CURRENT",
                "value": 4,
                "doc": null
            },
            {
                "name": "BYPASS_KEY",
                "value": 8,
                "doc": null
            },
            {
                "name": "PREFIX_LEFT",
                "value": 0,
                "doc": null
            },
            {
                "name": "PREFIX_MID_HAS_NEXT",
                "value": 1,
                "doc": null
            },
            {
                "name": "PREFIX_MID_LAST",
                "value": 2,
                "doc": null
            },
            {
                "name": "PREFIX_END_HAS_NEXT",
                "value": 3,
                "doc": null
            },
            {
                "name": "PREFIX_END_LAST",
                "value": 4,
                "doc": null
            },
            {
                "name": "PREFIX_RIGHT",
                "value": 5,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "ArrayObject",
        "fqn": "\\ArrayObject",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "array",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Construct a new array object\r\n * @link http:\/\/php.net\/arrayobject.construct.php\r\n * @param $array\r\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Returns whether the requested index exists\r\n * @link http:\/\/php.net\/arrayobject.offsetexists.php\r\n * @param mixed $index <p>\r\n * The index being checked.\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> if the requested index exists, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Returns the value at the specified index\r\n * @link http:\/\/php.net\/arrayobject.offsetget.php\r\n * @param mixed $index <p>\r\n * The index with the value.\r\n * <\/p>\r\n * @return mixed The value at the specified index or <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Sets the value at the specified index to newval\r\n * @link http:\/\/php.net\/arrayobject.offsetset.php\r\n * @param mixed $index <p>\r\n * The index being set.\r\n * <\/p>\r\n * @param mixed $newval <p>\r\n * The new value for the <i>index<\/i>.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Unsets the value at the specified index\r\n * @link http:\/\/php.net\/arrayobject.offsetunset.php\r\n * @param mixed $index <p>\r\n * The index being unset.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "append",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Appends the value\r\n * @link http:\/\/php.net\/arrayobject.append.php\r\n * @param mixed $value <p>\r\n * The value being appended.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getArrayCopy",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Creates a copy of the ArrayObject.\r\n * @link http:\/\/php.net\/arrayobject.getarraycopy.php\r\n * @return array a copy of the array. When the <b>ArrayObject<\/b> refers to an object\r\n * an array of the public properties of that object will be returned.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Get the number of public properties in the ArrayObject\r\n * @link http:\/\/php.net\/arrayobject.count.php\r\n * @return int The number of public properties in the <b>ArrayObject<\/b>.\r\n * <\/p>\r\n * <p>\r\n * When the <b>ArrayObject<\/b> is constructed from an array all properties are public.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the behavior flags.\r\n * @link http:\/\/php.net\/arrayobject.getflags.php\r\n * @return int the behavior flags of the ArrayObject.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Sets the behavior flags.\r\n * @link http:\/\/php.net\/arrayobject.setflags.php\r\n * @param int $flags <p>\r\n * The new ArrayObject behavior.\r\n * It takes on either a bitmask, or named constants. Using named\r\n * constants is strongly encouraged to ensure compatibility for future\r\n * versions.\r\n * <\/p>\r\n * <p>\r\n * The available behavior flags are listed below. The actual\r\n * meanings of these flags are described in the\r\n * predefined constants.\r\n * <table>\r\n * ArrayObject behavior flags\r\n * <tr valign=\"top\">\r\n * <td>value<\/td>\r\n * <td>constant<\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>1<\/td>\r\n * <td>\r\n * ArrayObject::STD_PROP_LIST\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>2<\/td>\r\n * <td>\r\n * ArrayObject::ARRAY_AS_PROPS\r\n * <\/td>\r\n * <\/tr>\r\n * <\/table>\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "asort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort the entries by value\r\n * @link http:\/\/php.net\/arrayobject.asort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "ksort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort the entries by key\r\n * @link http:\/\/php.net\/arrayobject.ksort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "uasort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": "callable",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort the entries with a user-defined comparison function and maintain key association\r\n * @link http:\/\/php.net\/arrayobject.uasort.php\r\n * @param callable $cmp_function <p>\r\n * Function <i>cmp_function<\/i> should accept two\r\n * parameters which will be filled by pairs of entries.\r\n * The comparison function must return an integer less than, equal\r\n * to, or greater than zero if the first argument is considered to\r\n * be respectively less than, equal to, or greater than the\r\n * second.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "uksort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": "callable",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort the entries by keys using a user-defined comparison function\r\n * @link http:\/\/php.net\/arrayobject.uksort.php\r\n * @param callable $cmp_function <p>\r\n * The callback comparison function.\r\n * <\/p>\r\n * <p>\r\n * Function <i>cmp_function<\/i> should accept two\r\n * parameters which will be filled by pairs of entry keys.\r\n * The comparison function must return an integer less than, equal\r\n * to, or greater than zero if the first argument is considered to\r\n * be respectively less than, equal to, or greater than the\r\n * second.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "natsort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort entries using a \"natural order\" algorithm\r\n * @link http:\/\/php.net\/arrayobject.natsort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "natcasesort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort an array using a case insensitive \"natural order\" algorithm\r\n * @link http:\/\/php.net\/arrayobject.natcasesort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Unserialize an ArrayObject\r\n * @link http:\/\/php.net\/arrayobject.unserialize.php\r\n * @param string $serialized <p>\r\n * The serialized <b>ArrayObject<\/b>.\r\n * <\/p>\r\n * @return void The unserialized <b>ArrayObject<\/b>.\r\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Serialize an ArrayObject\r\n * @link http:\/\/php.net\/arrayobject.serialize.php\r\n * @return void The serialized representation of the <b>ArrayObject<\/b>.\r\n *\/"
            },
            {
                "name": "getIterator",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Create a new iterator from an ArrayObject instance\r\n * @link http:\/\/php.net\/arrayobject.getiterator.php\r\n * @return ArrayIterator An iterator from an <b>ArrayObject<\/b>.\r\n *\/"
            },
            {
                "name": "exchangeArray",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "input",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Exchange the array for another one.\r\n * @link http:\/\/php.net\/arrayobject.exchangearray.php\r\n * @param mixed $input <p>\r\n * The new array or object to exchange with the current array.\r\n * <\/p>\r\n * @return array the old array.\r\n *\/"
            },
            {
                "name": "setIteratorClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator_class",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Sets the iterator classname for the ArrayObject.\r\n * @link http:\/\/php.net\/arrayobject.setiteratorclass.php\r\n * @param string $iterator_class <p>\r\n * The classname of the array iterator to use when iterating over this object.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getIteratorClass",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the iterator classname for the ArrayObject.\r\n * @link http:\/\/php.net\/arrayobject.getiteratorclass.php\r\n * @return string the iterator class name that is used to iterate over this object.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "STD_PROP_LIST",
                "value": 1,
                "doc": null
            },
            {
                "name": "ARRAY_AS_PROPS",
                "value": 2,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "ArrayIterator",
        "fqn": "\\ArrayIterator",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "array",
                        "type": null,
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Construct an ArrayIterator\r\n * @link http:\/\/php.net\/arrayiterator.construct.php\r\n * @param mixed $array [optional] <p>\r\n * The array or object to be iterated on.\r\n * <\/p>\r\n * @param int $flags [optional] <p>\r\n * Flags to control the behaviour of the <b>ArrayIterator<\/b> object.\r\n * See <b>ArrayIterator::setFlags<\/b>.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Check if offset exists\r\n * @link http:\/\/php.net\/arrayiterator.offsetexists.php\r\n * @param string $index <p>\r\n * The offset being checked.\r\n * <\/p>\r\n * @return void <b>TRUE<\/b> if the offset exists, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Get value for an offset\r\n * @link http:\/\/php.net\/arrayiterator.offsetget.php\r\n * @param string $index <p>\r\n * The offset to get the value from.\r\n * <\/p>\r\n * @return mixed The value at offset <i>index<\/i>.\r\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Set value for an offset\r\n * @link http:\/\/php.net\/arrayiterator.offsetset.php\r\n * @param string $index <p>\r\n * The index to set for.\r\n * <\/p>\r\n * @param string $newval <p>\r\n * The new value to store at the index.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Unset value for an offset\r\n * @link http:\/\/php.net\/arrayiterator.offsetunset.php\r\n * @param string $index <p>\r\n * The offset to unset.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "append",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Append an element\r\n * @link http:\/\/php.net\/arrayiterator.append.php\r\n * @param mixed $value <p>\r\n * The value to append.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getArrayCopy",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Get array copy\r\n * @link http:\/\/php.net\/arrayiterator.getarraycopy.php\r\n * @return array A copy of the array, or array of public properties\r\n * if ArrayIterator refers to an object.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Count elements\r\n * @link http:\/\/php.net\/arrayiterator.count.php\r\n * @return int The number of elements or public properties in the associated\r\n * array or object, respectively.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get flags\r\n * @link http:\/\/php.net\/arrayiterator.getflags.php\r\n * @return void The current flags.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Set behaviour flags\r\n * @link http:\/\/php.net\/arrayiterator.setflags.php\r\n * @param string $flags <p>\r\n * A bitmask as follows:\r\n * 0 = Properties of the object have their normal functionality\r\n * when accessed as list (var_dump, foreach, etc.).\r\n * 1 = Array indices can be accessed as properties in read\/write.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "asort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort array by values\r\n * @link http:\/\/php.net\/arrayiterator.asort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "ksort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort array by keys\r\n * @link http:\/\/php.net\/arrayiterator.ksort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "uasort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * User defined sort\r\n * @link http:\/\/php.net\/arrayiterator.uasort.php\r\n * @param string $cmp_function <p>\r\n * The compare function used for the sort.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "uksort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * User defined sort\r\n * @link http:\/\/php.net\/arrayiterator.uksort.php\r\n * @param string $cmp_function <p>\r\n * The compare function used for the sort.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "natsort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort an array naturally\r\n * @link http:\/\/php.net\/arrayiterator.natsort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "natcasesort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort an array naturally, case insensitive\r\n * @link http:\/\/php.net\/arrayiterator.natcasesort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Unserialize\r\n * @link http:\/\/php.net\/arrayiterator.unserialize.php\r\n * @param string $serialized <p>\r\n * The serialized ArrayIterator object to be unserialized.\r\n * <\/p>\r\n * @return string The <b>ArrayIterator<\/b>.\r\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Serialize\r\n * @link http:\/\/php.net\/arrayiterator.serialize.php\r\n * @return string The serialized <b>ArrayIterator<\/b>.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Rewind array back to the start\r\n * @link http:\/\/php.net\/arrayiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Return current array entry\r\n * @link http:\/\/php.net\/arrayiterator.current.php\r\n * @return mixed The current array entry.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Return current array key\r\n * @link http:\/\/php.net\/arrayiterator.key.php\r\n * @return mixed The current array key.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Move to next entry\r\n * @link http:\/\/php.net\/arrayiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Check whether array contains more entries\r\n * @link http:\/\/php.net\/arrayiterator.valid.php\r\n * @return bool No value is returned.\r\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Seek to position\r\n * @link http:\/\/php.net\/arrayiterator.seek.php\r\n * @param int $position <p>\r\n * The position to seek to.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "STD_PROP_LIST",
                "value": 1,
                "doc": null
            },
            {
                "name": "ARRAY_AS_PROPS",
                "value": 2,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveArrayIterator",
        "fqn": "\\RecursiveArrayIterator",
        "type": 0,
        "extends": "ArrayIterator",
        "methods": [
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Returns whether current entry is an array or an object.\r\n * @link http:\/\/php.net\/recursivearrayiterator.haschildren.php\r\n * @return bool <b>TRUE<\/b> if the current entry is an array or an object,\r\n * otherwise <b>FALSE<\/b> is returned.\r\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Returns an iterator for the current entry if it is an array or an object.\r\n * @link http:\/\/php.net\/recursivearrayiterator.getchildren.php\r\n * @return RecursiveArrayIterator An iterator for the current entry, if it is an array or object.\r\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "array",
                        "type": null,
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Construct an ArrayIterator\r\n * @link http:\/\/php.net\/arrayiterator.construct.php\r\n * @param mixed $array [optional] <p>\r\n * The array or object to be iterated on.\r\n * <\/p>\r\n * @param int $flags [optional] <p>\r\n * Flags to control the behaviour of the <b>ArrayIterator<\/b> object.\r\n * See <b>ArrayIterator::setFlags<\/b>.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Check if offset exists\r\n * @link http:\/\/php.net\/arrayiterator.offsetexists.php\r\n * @param string $index <p>\r\n * The offset being checked.\r\n * <\/p>\r\n * @return void <b>TRUE<\/b> if the offset exists, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Get value for an offset\r\n * @link http:\/\/php.net\/arrayiterator.offsetget.php\r\n * @param string $index <p>\r\n * The offset to get the value from.\r\n * <\/p>\r\n * @return mixed The value at offset <i>index<\/i>.\r\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Set value for an offset\r\n * @link http:\/\/php.net\/arrayiterator.offsetset.php\r\n * @param string $index <p>\r\n * The index to set for.\r\n * <\/p>\r\n * @param string $newval <p>\r\n * The new value to store at the index.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Unset value for an offset\r\n * @link http:\/\/php.net\/arrayiterator.offsetunset.php\r\n * @param string $index <p>\r\n * The offset to unset.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "append",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Append an element\r\n * @link http:\/\/php.net\/arrayiterator.append.php\r\n * @param mixed $value <p>\r\n * The value to append.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getArrayCopy",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Get array copy\r\n * @link http:\/\/php.net\/arrayiterator.getarraycopy.php\r\n * @return array A copy of the array, or array of public properties\r\n * if ArrayIterator refers to an object.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Count elements\r\n * @link http:\/\/php.net\/arrayiterator.count.php\r\n * @return int The number of elements or public properties in the associated\r\n * array or object, respectively.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get flags\r\n * @link http:\/\/php.net\/arrayiterator.getflags.php\r\n * @return void The current flags.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Set behaviour flags\r\n * @link http:\/\/php.net\/arrayiterator.setflags.php\r\n * @param string $flags <p>\r\n * A bitmask as follows:\r\n * 0 = Properties of the object have their normal functionality\r\n * when accessed as list (var_dump, foreach, etc.).\r\n * 1 = Array indices can be accessed as properties in read\/write.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "asort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort array by values\r\n * @link http:\/\/php.net\/arrayiterator.asort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "ksort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort array by keys\r\n * @link http:\/\/php.net\/arrayiterator.ksort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "uasort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * User defined sort\r\n * @link http:\/\/php.net\/arrayiterator.uasort.php\r\n * @param string $cmp_function <p>\r\n * The compare function used for the sort.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "uksort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "cmp_function",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * User defined sort\r\n * @link http:\/\/php.net\/arrayiterator.uksort.php\r\n * @param string $cmp_function <p>\r\n * The compare function used for the sort.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "natsort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort an array naturally\r\n * @link http:\/\/php.net\/arrayiterator.natsort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "natcasesort",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Sort an array naturally, case insensitive\r\n * @link http:\/\/php.net\/arrayiterator.natcasesort.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Unserialize\r\n * @link http:\/\/php.net\/arrayiterator.unserialize.php\r\n * @param string $serialized <p>\r\n * The serialized ArrayIterator object to be unserialized.\r\n * <\/p>\r\n * @return string The <b>ArrayIterator<\/b>.\r\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Serialize\r\n * @link http:\/\/php.net\/arrayiterator.serialize.php\r\n * @return string The serialized <b>ArrayIterator<\/b>.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Rewind array back to the start\r\n * @link http:\/\/php.net\/arrayiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Return current array entry\r\n * @link http:\/\/php.net\/arrayiterator.current.php\r\n * @return mixed The current array entry.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Return current array key\r\n * @link http:\/\/php.net\/arrayiterator.key.php\r\n * @return mixed The current array key.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Move to next entry\r\n * @link http:\/\/php.net\/arrayiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Check whether array contains more entries\r\n * @link http:\/\/php.net\/arrayiterator.valid.php\r\n * @return bool No value is returned.\r\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.0.0)<br\/>\r\n * Seek to position\r\n * @link http:\/\/php.net\/arrayiterator.seek.php\r\n * @param int $position <p>\r\n * The position to seek to.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CHILD_ARRAYS_ONLY",
                "value": 4,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplFileInfo",
        "fqn": "\\SplFileInfo",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "file_name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Construct a new SplFileInfo object\r\n * @link http:\/\/php.net\/splfileinfo.construct.php\r\n * @param string $file_name <p>\r\n * Path to the file.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path without filename\r\n * @link http:\/\/php.net\/splfileinfo.getpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the filename\r\n * @link http:\/\/php.net\/splfileinfo.getfilename.php\r\n * @return string The filename.\r\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.6)<br\/>\r\n * Gets the file extension\r\n * @link http:\/\/php.net\/splfileinfo.getextension.php\r\n * @return string a string containing the file extension, or an\r\n * empty string if the file has no extension.\r\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets the base name of the file\r\n * @link http:\/\/php.net\/splfileinfo.getbasename.php\r\n * @param string $suffix [optional] <p>\r\n * Optional suffix to omit from the base name returned.\r\n * <\/p>\r\n * @return string the base name without path information.\r\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path to the file\r\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\r\n * @return string The path to the file.\r\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file permissions\r\n * @link http:\/\/php.net\/splfileinfo.getperms.php\r\n * @return int the file permissions.\r\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode for the file\r\n * @link http:\/\/php.net\/splfileinfo.getinode.php\r\n * @return int the inode number for the filesystem object.\r\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file size\r\n * @link http:\/\/php.net\/splfileinfo.getsize.php\r\n * @return int The filesize in bytes.\r\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the owner of the file\r\n * @link http:\/\/php.net\/splfileinfo.getowner.php\r\n * @return int The owner id in numerical format.\r\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the file group\r\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\r\n * @return int The group id in numerical format.\r\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets last access time of the file\r\n * @link http:\/\/php.net\/splfileinfo.getatime.php\r\n * @return int the time the file was last accessed.\r\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the last modified time\r\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\r\n * @return int the last modified time for the file, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode change time\r\n * @link http:\/\/php.net\/splfileinfo.getctime.php\r\n * @return int The last change time, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file type\r\n * @link http:\/\/php.net\/splfileinfo.gettype.php\r\n * @return string A string representing the type of the entry.\r\n * May be one of file, link,\r\n * or dir\r\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the entry is writable\r\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\r\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\r\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if file is readable\r\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\r\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is executable\r\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\r\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the object references a regular file\r\n * @link http:\/\/php.net\/splfileinfo.isfile.php\r\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a directory\r\n * @link http:\/\/php.net\/splfileinfo.isdir.php\r\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a link\r\n * @link http:\/\/php.net\/splfileinfo.islink.php\r\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets the target of a link\r\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\r\n * @return string the target of the filesystem link.\r\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets absolute path to file\r\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the file\r\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\r\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the path\r\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\r\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileObject object for the file\r\n * @link http:\/\/php.net\/splfileinfo.openfile.php\r\n * @param string $open_mode [optional] <p>\r\n * The mode for opening the file. See the <b>fopen<\/b>\r\n * documentation for descriptions of possible modes. The default\r\n * is read only.\r\n * <\/p>\r\n * @param bool $use_include_path [optional] <p>\r\n * When set to <b>TRUE<\/b>, the filename is also\r\n * searched for within the include_path\r\n * <\/p>\r\n * @param resource $context [optional] <p>\r\n * Refer to the context\r\n * section of the manual for a description of contexts.\r\n * <\/p>\r\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\r\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\r\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use when openFile() is called.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class used with getFileInfo and getPathInfo\r\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Returns the path to the file as a string\r\n * @link http:\/\/php.net\/splfileinfo.tostring.php\r\n * @return void the path to the file.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "DirectoryIterator",
        "fqn": "\\DirectoryIterator",
        "type": 0,
        "extends": "SplFileInfo",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "path",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Constructs a new directory iterator from a path\r\n * @link http:\/\/php.net\/directoryiterator.construct.php\r\n * @param $path\r\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return file name of current DirectoryIterator item.\r\n * @link http:\/\/php.net\/directoryiterator.getfilename.php\r\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.6)<br\/>\r\n * Gets the file extension\r\n * @link http:\/\/php.net\/directoryiterator.getextension.php\r\n * @return string a string containing the file extension, or an\r\n * empty string if the file has no extension.\r\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Get base name of current DirectoryIterator item.\r\n * @link http:\/\/php.net\/directoryiterator.getbasename.php\r\n * @param string $suffix [optional] <p>\r\n * If the base name ends in <i>suffix<\/i>,\r\n * this will be cut.\r\n * <\/p>\r\n * @return string The base name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "isDot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Determine if current DirectoryIterator item is '.' or '..'\r\n * @link http:\/\/php.net\/directoryiterator.isdot.php\r\n * @return bool <b>TRUE<\/b> if the entry is . or ..,\r\n * otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Rewind the DirectoryIterator back to the start\r\n * @link http:\/\/php.net\/directoryiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Check whether current DirectoryIterator position is a valid file\r\n * @link http:\/\/php.net\/directoryiterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the position is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return the key for the current DirectoryIterator item\r\n * @link http:\/\/php.net\/directoryiterator.key.php\r\n * @return string The key for the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return the current DirectoryIterator item.\r\n * @link http:\/\/php.net\/directoryiterator.current.php\r\n * @return DirectoryIterator The current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Move forward to next DirectoryIterator item\r\n * @link http:\/\/php.net\/directoryiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Seek to a DirectoryIterator item\r\n * @link http:\/\/php.net\/directoryiterator.seek.php\r\n * @param int $position <p>\r\n * The zero-based numeric position to seek to.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Get file name as a string\r\n * @link http:\/\/php.net\/directoryiterator.tostring.php\r\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path without filename\r\n * @link http:\/\/php.net\/splfileinfo.getpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path to the file\r\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\r\n * @return string The path to the file.\r\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file permissions\r\n * @link http:\/\/php.net\/splfileinfo.getperms.php\r\n * @return int the file permissions.\r\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode for the file\r\n * @link http:\/\/php.net\/splfileinfo.getinode.php\r\n * @return int the inode number for the filesystem object.\r\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file size\r\n * @link http:\/\/php.net\/splfileinfo.getsize.php\r\n * @return int The filesize in bytes.\r\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the owner of the file\r\n * @link http:\/\/php.net\/splfileinfo.getowner.php\r\n * @return int The owner id in numerical format.\r\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the file group\r\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\r\n * @return int The group id in numerical format.\r\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets last access time of the file\r\n * @link http:\/\/php.net\/splfileinfo.getatime.php\r\n * @return int the time the file was last accessed.\r\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the last modified time\r\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\r\n * @return int the last modified time for the file, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode change time\r\n * @link http:\/\/php.net\/splfileinfo.getctime.php\r\n * @return int The last change time, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file type\r\n * @link http:\/\/php.net\/splfileinfo.gettype.php\r\n * @return string A string representing the type of the entry.\r\n * May be one of file, link,\r\n * or dir\r\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the entry is writable\r\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\r\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\r\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if file is readable\r\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\r\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is executable\r\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\r\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the object references a regular file\r\n * @link http:\/\/php.net\/splfileinfo.isfile.php\r\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a directory\r\n * @link http:\/\/php.net\/splfileinfo.isdir.php\r\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a link\r\n * @link http:\/\/php.net\/splfileinfo.islink.php\r\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets the target of a link\r\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\r\n * @return string the target of the filesystem link.\r\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets absolute path to file\r\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the file\r\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\r\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the path\r\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\r\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileObject object for the file\r\n * @link http:\/\/php.net\/splfileinfo.openfile.php\r\n * @param string $open_mode [optional] <p>\r\n * The mode for opening the file. See the <b>fopen<\/b>\r\n * documentation for descriptions of possible modes. The default\r\n * is read only.\r\n * <\/p>\r\n * @param bool $use_include_path [optional] <p>\r\n * When set to <b>TRUE<\/b>, the filename is also\r\n * searched for within the include_path\r\n * <\/p>\r\n * @param resource $context [optional] <p>\r\n * Refer to the context\r\n * section of the manual for a description of contexts.\r\n * <\/p>\r\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\r\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\r\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use when openFile() is called.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class used with getFileInfo and getPathInfo\r\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "FilesystemIterator",
        "fqn": "\\FilesystemIterator",
        "type": 0,
        "extends": "DirectoryIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "path",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Constructs a new filesystem iterator\r\n * @link http:\/\/php.net\/filesystemiterator.construct.php\r\n * @param string $path <p>\r\n * The path of the filesystem item to be iterated over.\r\n * <\/p>\r\n * @param int $flags [optional] <p>\r\n * Flags may be provided which will affect the behavior of some methods.\r\n * A list of the flags can found under FilesystemIterator predefined constants.\r\n * They can also be set later with <b>FilesystemIterator::setFlags<\/b>\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewinds back to the beginning\r\n * @link http:\/\/php.net\/filesystemiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to the next file\r\n * @link http:\/\/php.net\/filesystemiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Retrieve the key for the current file\r\n * @link http:\/\/php.net\/filesystemiterator.key.php\r\n * @return string the pathname or filename depending on the set flags.\r\n * See the FilesystemIterator constants.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * The current file\r\n * @link http:\/\/php.net\/filesystemiterator.current.php\r\n * @return mixed The filename, file information, or $this depending on the set flags.\r\n * See the FilesystemIterator constants.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Get the handling flags\r\n * @link http:\/\/php.net\/filesystemiterator.getflags.php\r\n * @return int The integer value of the set flags.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets handling flags\r\n * @link http:\/\/php.net\/filesystemiterator.setflags.php\r\n * @param int $flags [optional] <p>\r\n * The handling flags to set.\r\n * See the FilesystemIterator constants.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return file name of current DirectoryIterator item.\r\n * @link http:\/\/php.net\/directoryiterator.getfilename.php\r\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.6)<br\/>\r\n * Gets the file extension\r\n * @link http:\/\/php.net\/directoryiterator.getextension.php\r\n * @return string a string containing the file extension, or an\r\n * empty string if the file has no extension.\r\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Get base name of current DirectoryIterator item.\r\n * @link http:\/\/php.net\/directoryiterator.getbasename.php\r\n * @param string $suffix [optional] <p>\r\n * If the base name ends in <i>suffix<\/i>,\r\n * this will be cut.\r\n * <\/p>\r\n * @return string The base name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "isDot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Determine if current DirectoryIterator item is '.' or '..'\r\n * @link http:\/\/php.net\/directoryiterator.isdot.php\r\n * @return bool <b>TRUE<\/b> if the entry is . or ..,\r\n * otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Check whether current DirectoryIterator position is a valid file\r\n * @link http:\/\/php.net\/directoryiterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the position is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Seek to a DirectoryIterator item\r\n * @link http:\/\/php.net\/directoryiterator.seek.php\r\n * @param int $position <p>\r\n * The zero-based numeric position to seek to.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Get file name as a string\r\n * @link http:\/\/php.net\/directoryiterator.tostring.php\r\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path without filename\r\n * @link http:\/\/php.net\/splfileinfo.getpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path to the file\r\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\r\n * @return string The path to the file.\r\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file permissions\r\n * @link http:\/\/php.net\/splfileinfo.getperms.php\r\n * @return int the file permissions.\r\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode for the file\r\n * @link http:\/\/php.net\/splfileinfo.getinode.php\r\n * @return int the inode number for the filesystem object.\r\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file size\r\n * @link http:\/\/php.net\/splfileinfo.getsize.php\r\n * @return int The filesize in bytes.\r\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the owner of the file\r\n * @link http:\/\/php.net\/splfileinfo.getowner.php\r\n * @return int The owner id in numerical format.\r\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the file group\r\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\r\n * @return int The group id in numerical format.\r\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets last access time of the file\r\n * @link http:\/\/php.net\/splfileinfo.getatime.php\r\n * @return int the time the file was last accessed.\r\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the last modified time\r\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\r\n * @return int the last modified time for the file, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode change time\r\n * @link http:\/\/php.net\/splfileinfo.getctime.php\r\n * @return int The last change time, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file type\r\n * @link http:\/\/php.net\/splfileinfo.gettype.php\r\n * @return string A string representing the type of the entry.\r\n * May be one of file, link,\r\n * or dir\r\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the entry is writable\r\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\r\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\r\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if file is readable\r\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\r\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is executable\r\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\r\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the object references a regular file\r\n * @link http:\/\/php.net\/splfileinfo.isfile.php\r\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a directory\r\n * @link http:\/\/php.net\/splfileinfo.isdir.php\r\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a link\r\n * @link http:\/\/php.net\/splfileinfo.islink.php\r\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets the target of a link\r\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\r\n * @return string the target of the filesystem link.\r\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets absolute path to file\r\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the file\r\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\r\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the path\r\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\r\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileObject object for the file\r\n * @link http:\/\/php.net\/splfileinfo.openfile.php\r\n * @param string $open_mode [optional] <p>\r\n * The mode for opening the file. See the <b>fopen<\/b>\r\n * documentation for descriptions of possible modes. The default\r\n * is read only.\r\n * <\/p>\r\n * @param bool $use_include_path [optional] <p>\r\n * When set to <b>TRUE<\/b>, the filename is also\r\n * searched for within the include_path\r\n * <\/p>\r\n * @param resource $context [optional] <p>\r\n * Refer to the context\r\n * section of the manual for a description of contexts.\r\n * <\/p>\r\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\r\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\r\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use when openFile() is called.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class used with getFileInfo and getPathInfo\r\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CURRENT_MODE_MASK",
                "value": 240,
                "doc": null
            },
            {
                "name": "CURRENT_AS_PATHNAME",
                "value": 32,
                "doc": null
            },
            {
                "name": "CURRENT_AS_FILEINFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "CURRENT_AS_SELF",
                "value": 16,
                "doc": null
            },
            {
                "name": "KEY_MODE_MASK",
                "value": 3840,
                "doc": null
            },
            {
                "name": "KEY_AS_PATHNAME",
                "value": 0,
                "doc": null
            },
            {
                "name": "FOLLOW_SYMLINKS",
                "value": 512,
                "doc": null
            },
            {
                "name": "KEY_AS_FILENAME",
                "value": 256,
                "doc": null
            },
            {
                "name": "NEW_CURRENT_AND_KEY",
                "value": 256,
                "doc": null
            },
            {
                "name": "OTHER_MODE_MASK",
                "value": 12288,
                "doc": null
            },
            {
                "name": "SKIP_DOTS",
                "value": 4096,
                "doc": null
            },
            {
                "name": "UNIX_PATHS",
                "value": 8192,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "RecursiveDirectoryIterator",
        "fqn": "\\RecursiveDirectoryIterator",
        "type": 0,
        "extends": "FilesystemIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "path",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Constructs a RecursiveDirectoryIterator\r\n * @link http:\/\/php.net\/recursivedirectoryiterator.construct.php\r\n * @param string $path <p>\r\n * The path of the directory to be iterated over.\r\n * <\/p>\r\n * @param int $flags [optional] <p>\r\n * Flags may be provided which will affect the behavior of some methods.\r\n * A list of the flags can found under\r\n * FilesystemIterator predefined constants.\r\n * They can also be set later with <b>FilesystemIterator::setFlags<\/b>.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "allow_links",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Returns whether current entry is a directory and not '.' or '..'\r\n * @link http:\/\/php.net\/recursivedirectoryiterator.haschildren.php\r\n * @param bool $allow_links [optional] <p>\r\n * <\/p>\r\n * @return bool whether the current entry is a directory, but not '.' or '..'\r\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Returns an iterator for the current entry if it is a directory\r\n * @link http:\/\/php.net\/recursivedirectoryiterator.getchildren.php\r\n * @return mixed The filename, file information, or $this depending on the set flags.\r\n * See the FilesystemIterator\r\n * constants.\r\n *\/"
            },
            {
                "name": "getSubPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get sub path\r\n * @link http:\/\/php.net\/recursivedirectoryiterator.getsubpath.php\r\n * @return string The sub path (sub directory).\r\n *\/"
            },
            {
                "name": "getSubPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get sub path and name\r\n * @link http:\/\/php.net\/recursivedirectoryiterator.getsubpathname.php\r\n * @return string The sub path (sub directory) and filename.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewinds back to the beginning\r\n * @link http:\/\/php.net\/filesystemiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to the next file\r\n * @link http:\/\/php.net\/filesystemiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Retrieve the key for the current file\r\n * @link http:\/\/php.net\/filesystemiterator.key.php\r\n * @return string the pathname or filename depending on the set flags.\r\n * See the FilesystemIterator constants.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * The current file\r\n * @link http:\/\/php.net\/filesystemiterator.current.php\r\n * @return mixed The filename, file information, or $this depending on the set flags.\r\n * See the FilesystemIterator constants.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Get the handling flags\r\n * @link http:\/\/php.net\/filesystemiterator.getflags.php\r\n * @return int The integer value of the set flags.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets handling flags\r\n * @link http:\/\/php.net\/filesystemiterator.setflags.php\r\n * @param int $flags [optional] <p>\r\n * The handling flags to set.\r\n * See the FilesystemIterator constants.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return file name of current DirectoryIterator item.\r\n * @link http:\/\/php.net\/directoryiterator.getfilename.php\r\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.6)<br\/>\r\n * Gets the file extension\r\n * @link http:\/\/php.net\/directoryiterator.getextension.php\r\n * @return string a string containing the file extension, or an\r\n * empty string if the file has no extension.\r\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Get base name of current DirectoryIterator item.\r\n * @link http:\/\/php.net\/directoryiterator.getbasename.php\r\n * @param string $suffix [optional] <p>\r\n * If the base name ends in <i>suffix<\/i>,\r\n * this will be cut.\r\n * <\/p>\r\n * @return string The base name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "isDot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Determine if current DirectoryIterator item is '.' or '..'\r\n * @link http:\/\/php.net\/directoryiterator.isdot.php\r\n * @return bool <b>TRUE<\/b> if the entry is . or ..,\r\n * otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Check whether current DirectoryIterator position is a valid file\r\n * @link http:\/\/php.net\/directoryiterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the position is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Seek to a DirectoryIterator item\r\n * @link http:\/\/php.net\/directoryiterator.seek.php\r\n * @param int $position <p>\r\n * The zero-based numeric position to seek to.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Get file name as a string\r\n * @link http:\/\/php.net\/directoryiterator.tostring.php\r\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path without filename\r\n * @link http:\/\/php.net\/splfileinfo.getpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path to the file\r\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\r\n * @return string The path to the file.\r\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file permissions\r\n * @link http:\/\/php.net\/splfileinfo.getperms.php\r\n * @return int the file permissions.\r\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode for the file\r\n * @link http:\/\/php.net\/splfileinfo.getinode.php\r\n * @return int the inode number for the filesystem object.\r\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file size\r\n * @link http:\/\/php.net\/splfileinfo.getsize.php\r\n * @return int The filesize in bytes.\r\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the owner of the file\r\n * @link http:\/\/php.net\/splfileinfo.getowner.php\r\n * @return int The owner id in numerical format.\r\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the file group\r\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\r\n * @return int The group id in numerical format.\r\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets last access time of the file\r\n * @link http:\/\/php.net\/splfileinfo.getatime.php\r\n * @return int the time the file was last accessed.\r\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the last modified time\r\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\r\n * @return int the last modified time for the file, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode change time\r\n * @link http:\/\/php.net\/splfileinfo.getctime.php\r\n * @return int The last change time, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file type\r\n * @link http:\/\/php.net\/splfileinfo.gettype.php\r\n * @return string A string representing the type of the entry.\r\n * May be one of file, link,\r\n * or dir\r\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the entry is writable\r\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\r\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\r\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if file is readable\r\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\r\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is executable\r\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\r\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the object references a regular file\r\n * @link http:\/\/php.net\/splfileinfo.isfile.php\r\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a directory\r\n * @link http:\/\/php.net\/splfileinfo.isdir.php\r\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a link\r\n * @link http:\/\/php.net\/splfileinfo.islink.php\r\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets the target of a link\r\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\r\n * @return string the target of the filesystem link.\r\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets absolute path to file\r\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the file\r\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\r\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the path\r\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\r\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileObject object for the file\r\n * @link http:\/\/php.net\/splfileinfo.openfile.php\r\n * @param string $open_mode [optional] <p>\r\n * The mode for opening the file. See the <b>fopen<\/b>\r\n * documentation for descriptions of possible modes. The default\r\n * is read only.\r\n * <\/p>\r\n * @param bool $use_include_path [optional] <p>\r\n * When set to <b>TRUE<\/b>, the filename is also\r\n * searched for within the include_path\r\n * <\/p>\r\n * @param resource $context [optional] <p>\r\n * Refer to the context\r\n * section of the manual for a description of contexts.\r\n * <\/p>\r\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\r\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\r\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use when openFile() is called.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class used with getFileInfo and getPathInfo\r\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CURRENT_MODE_MASK",
                "value": 240,
                "doc": null
            },
            {
                "name": "CURRENT_AS_PATHNAME",
                "value": 32,
                "doc": null
            },
            {
                "name": "CURRENT_AS_FILEINFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "CURRENT_AS_SELF",
                "value": 16,
                "doc": null
            },
            {
                "name": "KEY_MODE_MASK",
                "value": 3840,
                "doc": null
            },
            {
                "name": "KEY_AS_PATHNAME",
                "value": 0,
                "doc": null
            },
            {
                "name": "FOLLOW_SYMLINKS",
                "value": 512,
                "doc": null
            },
            {
                "name": "KEY_AS_FILENAME",
                "value": 256,
                "doc": null
            },
            {
                "name": "NEW_CURRENT_AND_KEY",
                "value": 256,
                "doc": null
            },
            {
                "name": "OTHER_MODE_MASK",
                "value": 12288,
                "doc": null
            },
            {
                "name": "SKIP_DOTS",
                "value": 4096,
                "doc": null
            },
            {
                "name": "UNIX_PATHS",
                "value": 8192,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "GlobIterator",
        "fqn": "\\GlobIterator",
        "type": 0,
        "extends": "FilesystemIterator",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "path",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": "FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Construct a directory using glob\r\n * @link http:\/\/php.net\/globiterator.construct.php\r\n * @param string $path <p>\r\n * The path of the directory.\r\n * <\/p>\r\n * @param int $flags [optional] <p>\r\n * Option flags, the flags may be a bitmask of the\r\n * <b>FilesystemIterator<\/b> constants.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Get the number of directories and files\r\n * @link http:\/\/php.net\/globiterator.count.php\r\n * @return int The number of returned directories and files, as an\r\n * integer.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewinds back to the beginning\r\n * @link http:\/\/php.net\/filesystemiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to the next file\r\n * @link http:\/\/php.net\/filesystemiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Retrieve the key for the current file\r\n * @link http:\/\/php.net\/filesystemiterator.key.php\r\n * @return string the pathname or filename depending on the set flags.\r\n * See the FilesystemIterator constants.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * The current file\r\n * @link http:\/\/php.net\/filesystemiterator.current.php\r\n * @return mixed The filename, file information, or $this depending on the set flags.\r\n * See the FilesystemIterator constants.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Get the handling flags\r\n * @link http:\/\/php.net\/filesystemiterator.getflags.php\r\n * @return int The integer value of the set flags.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets handling flags\r\n * @link http:\/\/php.net\/filesystemiterator.setflags.php\r\n * @param int $flags [optional] <p>\r\n * The handling flags to set.\r\n * See the FilesystemIterator constants.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Return file name of current DirectoryIterator item.\r\n * @link http:\/\/php.net\/directoryiterator.getfilename.php\r\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.6)<br\/>\r\n * Gets the file extension\r\n * @link http:\/\/php.net\/directoryiterator.getextension.php\r\n * @return string a string containing the file extension, or an\r\n * empty string if the file has no extension.\r\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Get base name of current DirectoryIterator item.\r\n * @link http:\/\/php.net\/directoryiterator.getbasename.php\r\n * @param string $suffix [optional] <p>\r\n * If the base name ends in <i>suffix<\/i>,\r\n * this will be cut.\r\n * <\/p>\r\n * @return string The base name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "isDot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Determine if current DirectoryIterator item is '.' or '..'\r\n * @link http:\/\/php.net\/directoryiterator.isdot.php\r\n * @return bool <b>TRUE<\/b> if the entry is . or ..,\r\n * otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Check whether current DirectoryIterator position is a valid file\r\n * @link http:\/\/php.net\/directoryiterator.valid.php\r\n * @return bool <b>TRUE<\/b> if the position is valid, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "position",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Seek to a DirectoryIterator item\r\n * @link http:\/\/php.net\/directoryiterator.seek.php\r\n * @param int $position <p>\r\n * The zero-based numeric position to seek to.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5)<br\/>\r\n * Get file name as a string\r\n * @link http:\/\/php.net\/directoryiterator.tostring.php\r\n * @return string the file name of the current <b>DirectoryIterator<\/b> item.\r\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path without filename\r\n * @link http:\/\/php.net\/splfileinfo.getpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path to the file\r\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\r\n * @return string The path to the file.\r\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file permissions\r\n * @link http:\/\/php.net\/splfileinfo.getperms.php\r\n * @return int the file permissions.\r\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode for the file\r\n * @link http:\/\/php.net\/splfileinfo.getinode.php\r\n * @return int the inode number for the filesystem object.\r\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file size\r\n * @link http:\/\/php.net\/splfileinfo.getsize.php\r\n * @return int The filesize in bytes.\r\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the owner of the file\r\n * @link http:\/\/php.net\/splfileinfo.getowner.php\r\n * @return int The owner id in numerical format.\r\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the file group\r\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\r\n * @return int The group id in numerical format.\r\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets last access time of the file\r\n * @link http:\/\/php.net\/splfileinfo.getatime.php\r\n * @return int the time the file was last accessed.\r\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the last modified time\r\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\r\n * @return int the last modified time for the file, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode change time\r\n * @link http:\/\/php.net\/splfileinfo.getctime.php\r\n * @return int The last change time, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file type\r\n * @link http:\/\/php.net\/splfileinfo.gettype.php\r\n * @return string A string representing the type of the entry.\r\n * May be one of file, link,\r\n * or dir\r\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the entry is writable\r\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\r\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\r\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if file is readable\r\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\r\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is executable\r\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\r\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the object references a regular file\r\n * @link http:\/\/php.net\/splfileinfo.isfile.php\r\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a directory\r\n * @link http:\/\/php.net\/splfileinfo.isdir.php\r\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a link\r\n * @link http:\/\/php.net\/splfileinfo.islink.php\r\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets the target of a link\r\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\r\n * @return string the target of the filesystem link.\r\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets absolute path to file\r\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the file\r\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\r\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the path\r\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\r\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileObject object for the file\r\n * @link http:\/\/php.net\/splfileinfo.openfile.php\r\n * @param string $open_mode [optional] <p>\r\n * The mode for opening the file. See the <b>fopen<\/b>\r\n * documentation for descriptions of possible modes. The default\r\n * is read only.\r\n * <\/p>\r\n * @param bool $use_include_path [optional] <p>\r\n * When set to <b>TRUE<\/b>, the filename is also\r\n * searched for within the include_path\r\n * <\/p>\r\n * @param resource $context [optional] <p>\r\n * Refer to the context\r\n * section of the manual for a description of contexts.\r\n * <\/p>\r\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\r\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\r\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use when openFile() is called.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class used with getFileInfo and getPathInfo\r\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "CURRENT_MODE_MASK",
                "value": 240,
                "doc": null
            },
            {
                "name": "CURRENT_AS_PATHNAME",
                "value": 32,
                "doc": null
            },
            {
                "name": "CURRENT_AS_FILEINFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "CURRENT_AS_SELF",
                "value": 16,
                "doc": null
            },
            {
                "name": "KEY_MODE_MASK",
                "value": 3840,
                "doc": null
            },
            {
                "name": "KEY_AS_PATHNAME",
                "value": 0,
                "doc": null
            },
            {
                "name": "FOLLOW_SYMLINKS",
                "value": 512,
                "doc": null
            },
            {
                "name": "KEY_AS_FILENAME",
                "value": 256,
                "doc": null
            },
            {
                "name": "NEW_CURRENT_AND_KEY",
                "value": 256,
                "doc": null
            },
            {
                "name": "OTHER_MODE_MASK",
                "value": 12288,
                "doc": null
            },
            {
                "name": "SKIP_DOTS",
                "value": 4096,
                "doc": null
            },
            {
                "name": "UNIX_PATHS",
                "value": 8192,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplFileObject",
        "fqn": "\\SplFileObject",
        "type": 0,
        "extends": "SplFileInfo",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct a new file object.\r\n * @link http:\/\/php.net\/splfileobject.construct.php\r\n * @param string $filename <p>\r\n * The file to read.\r\n * <\/p>\r\n * A URL can be used as a\r\n * filename with this function if the fopen wrappers have been enabled.\r\n * See <b>fopen<\/b> for more details on how to specify the\r\n * filename. See the for links to information\r\n * about what abilities the various wrappers have, notes on their usage,\r\n * and information on any predefined variables they may\r\n * provide.\r\n * @param string $open_mode [optional] <p>\r\n * The mode in which to open the file. See <b>fopen<\/b> for a list of allowed modes.\r\n * <\/p>\r\n * @param bool $use_include_path [optional] <p>\r\n * Whether to search in the include_path for <i>filename<\/i>.\r\n * <\/p>\r\n * @param resource $context [optional] <p>\r\n * A valid context resource created with <b>stream_context_create<\/b>.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the file to the first line\r\n * @link http:\/\/php.net\/splfileobject.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "eof",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Reached end of file\r\n * @link http:\/\/php.net\/splfileobject.eof.php\r\n * @return bool <b>TRUE<\/b> if file is at EOF, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Not at EOF\r\n * @link http:\/\/php.net\/splfileobject.valid.php\r\n * @return bool <b>TRUE<\/b> if not reached EOF, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "fgets",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets line from file\r\n * @link http:\/\/php.net\/splfileobject.fgets.php\r\n * @return string a string containing the next line from the file, or <b>FALSE<\/b> on error.\r\n *\/"
            },
            {
                "name": "fgetcsv",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    },
                    {
                        "name": "escape",
                        "type": null,
                        "byRef": false,
                        "default": "\\"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets line from file and parse as CSV fields\r\n * @link http:\/\/php.net\/splfileobject.fgetcsv.php\r\n * @param string $delimiter [optional] <p>\r\n * The field delimiter (one character only). Defaults as a comma or the value set using <b>SplFileObject::setCsvControl<\/b>.\r\n * <\/p>\r\n * @param string $enclosure [optional] <p>\r\n * The field enclosure character (one character only). Defaults as a double quotation mark or the value set using <b>SplFileObject::setCsvControl<\/b>.\r\n * <\/p>\r\n * @param string $escape [optional] <p>\r\n * The escape character (one character only). Defaults as a backslash (\\) or the value set using <b>SplFileObject::setCsvControl<\/b>.\r\n * <\/p>\r\n * @return array an indexed array containing the fields read, or <b>FALSE<\/b> on error.\r\n * <\/p>\r\n * <p>\r\n * A blank line in a CSV file will be returned as an array\r\n * comprising a single <b>NULL<\/b> field unless using <b>SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE<\/b>,\r\n * in which case empty lines are skipped.\r\n *\/"
            },
            {
                "name": "fputcsv",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Write a field array as a CSV line\r\n * @link http:\/\/php.net\/splfileobject.fputcsv.php\r\n * @param array $fields <p>\r\n * An array of values.\r\n * <\/p>\r\n * @param string $delimiter [optional] <p>\r\n * The optional <i>delimiter<\/i> parameter sets the field\r\n * delimiter (one character only).\r\n * <\/p>\r\n * @param string $enclosure [optional] <p>\r\n * The optional <i>enclosure<\/i> parameter sets the field\r\n * enclosure (one character only).\r\n * <\/p>\r\n * @return int the length of the written string or <b>FALSE<\/b> on failure.\r\n * <\/p>\r\n * <p>\r\n * Returns <b>FALSE<\/b>, and does not write the CSV line to the file, if the\r\n * <i>delimiter<\/i> or <i>enclosure<\/i>\r\n * parameter is not a single character.\r\n *\/"
            },
            {
                "name": "setCsvControl",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    },
                    {
                        "name": "escape",
                        "type": null,
                        "byRef": false,
                        "default": "\\"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Set the delimiter and enclosure character for CSV\r\n * @link http:\/\/php.net\/splfileobject.setcsvcontrol.php\r\n * @param string $delimiter [optional] <p>\r\n * The field delimiter (one character only).\r\n * <\/p>\r\n * @param string $enclosure [optional] <p>\r\n * The field enclosure character (one character only).\r\n * <\/p>\r\n * @param string $escape [optional] <p>\r\n * The field escape character (one character only).\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getCsvControl",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Get the delimiter and enclosure character for CSV\r\n * @link http:\/\/php.net\/splfileobject.getcsvcontrol.php\r\n * @return array an indexed array containing the delimiter and enclosure character.\r\n *\/"
            },
            {
                "name": "flock",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "operation",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "wouldblock",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Portable file locking\r\n * @link http:\/\/php.net\/splfileobject.flock.php\r\n * @param int $operation <p>\r\n * <i>operation<\/i> is one of the following:\r\n * <b>LOCK_SH<\/b> to acquire a shared lock (reader).\r\n * @param int $wouldblock [optional] <p>\r\n * Set to <b>TRUE<\/b> if the lock would block (EWOULDBLOCK errno condition).\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "fflush",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Flushes the output to the file\r\n * @link http:\/\/php.net\/splfileobject.fflush.php\r\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "ftell",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Return current file position\r\n * @link http:\/\/php.net\/splfileobject.ftell.php\r\n * @return int the position of the file pointer as an integer, or <b>FALSE<\/b> on error.\r\n *\/"
            },
            {
                "name": "fseek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "whence",
                        "type": null,
                        "byRef": false,
                        "default": "SEEK_SET"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Seek to a position\r\n * @link http:\/\/php.net\/splfileobject.fseek.php\r\n * @param int $offset <p>\r\n * The offset. A negative value can be used to move backwards through the file which\r\n * is useful when SEEK_END is used as the <i>whence<\/i> value.\r\n * <\/p>\r\n * @param int $whence [optional] <p>\r\n * <i>whence<\/i> values are:\r\n * <b>SEEK_SET<\/b> - Set position equal to <i>offset<\/i> bytes.\r\n * <b>SEEK_CUR<\/b> - Set position to current location plus <i>offset<\/i>.\r\n * <b>SEEK_END<\/b> - Set position to end-of-file plus <i>offset<\/i>.\r\n * <\/p>\r\n * <p>\r\n * If <i>whence<\/i> is not specified, it is assumed to be <b>SEEK_SET<\/b>.\r\n * <\/p>\r\n * @return int 0 if the seek was successful, -1 otherwise. Note that seeking\r\n * past EOF is not considered an error.\r\n *\/"
            },
            {
                "name": "fgetc",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets character from file\r\n * @link http:\/\/php.net\/splfileobject.fgetc.php\r\n * @return string a string containing a single character read from the file or <b>FALSE<\/b> on EOF.\r\n *\/"
            },
            {
                "name": "fpassthru",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Output all remaining data on a file pointer\r\n * @link http:\/\/php.net\/splfileobject.fpassthru.php\r\n * @return int the number of characters read from <i>handle<\/i>\r\n * and passed through to the output.\r\n *\/"
            },
            {
                "name": "fgetss",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "allowable_tags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets line from file and strip HTML tags\r\n * @link http:\/\/php.net\/splfileobject.fgetss.php\r\n * @param string $allowable_tags [optional] <p>\r\n * Optional parameter to specify tags which should not be stripped.\r\n * <\/p>\r\n * @return string a string containing the next line of the file with HTML and PHP\r\n * code stripped, or <b>FALSE<\/b> on error.\r\n *\/"
            },
            {
                "name": "fscanf",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "format",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "_",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Parses input from file according to a format\r\n * @link http:\/\/php.net\/splfileobject.fscanf.php\r\n * @param string $format <p>\r\n * The specified format as described in the <b>sprintf<\/b> documentation.\r\n * <\/p>\r\n * @param mixed $_ [optional] <p>\r\n * The optional assigned values.\r\n * <\/p>\r\n * @return mixed If only one parameter is passed to this method, the values parsed will be\r\n * returned as an array. Otherwise, if optional parameters are passed, the\r\n * function will return the number of assigned values. The optional\r\n * parameters must be passed by reference.\r\n *\/"
            },
            {
                "name": "fwrite",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "str",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "length",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Write to file\r\n * @link http:\/\/php.net\/splfileobject.fwrite.php\r\n * @param string $str <p>\r\n * The string to be written to the file.\r\n * <\/p>\r\n * @param int $length [optional] <p>\r\n * If the <i>length<\/i> argument is given, writing will\r\n * stop after <i>length<\/i> bytes have been written or\r\n * the end of <i>string<\/i> is reached, whichever comes\r\n * first.\r\n * <\/p>\r\n * @return int the number of bytes written, or <b>NULL<\/b> on error.\r\n *\/"
            },
            {
                "name": "fstat",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets information about the file\r\n * @link http:\/\/php.net\/splfileobject.fstat.php\r\n * @return array an array with the statistics of the file; the format of the array\r\n * is described in detail on the <b>stat<\/b> manual page.\r\n *\/"
            },
            {
                "name": "ftruncate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Truncates the file to a given length\r\n * @link http:\/\/php.net\/splfileobject.ftruncate.php\r\n * @param int $size <p>\r\n * The size to truncate to.\r\n * <\/p>\r\n * <p>\r\n * If <i>size<\/i> is larger than the file it is extended with null bytes.\r\n * <\/p>\r\n * <p>\r\n * If <i>size<\/i> is smaller than the file, the extra data will be lost.\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Retrieve current line of file\r\n * @link http:\/\/php.net\/splfileobject.current.php\r\n * @return string|array Retrieves the current line of the file. If the <b>SplFileObject::READ_CSV<\/b> flag is set, this method returns an array containing the current line parsed as CSV data.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get line number\r\n * @link http:\/\/php.net\/splfileobject.key.php\r\n * @return int the current line number.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Read next line\r\n * @link http:\/\/php.net\/splfileobject.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Sets flags for the SplFileObject\r\n * @link http:\/\/php.net\/splfileobject.setflags.php\r\n * @param int $flags <p>\r\n * Bit mask of the flags to set. See\r\n * SplFileObject constants\r\n * for the available flags.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets flags for the SplFileObject\r\n * @link http:\/\/php.net\/splfileobject.getflags.php\r\n * @return int an integer representing the flags.\r\n *\/"
            },
            {
                "name": "setMaxLineLen",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "max_len",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Set maximum line length\r\n * @link http:\/\/php.net\/splfileobject.setmaxlinelen.php\r\n * @param int $max_len <p>\r\n * The maximum length of a line.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getMaxLineLen",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get maximum line length\r\n * @link http:\/\/php.net\/splfileobject.getmaxlinelen.php\r\n * @return int the maximum line length if one has been set with\r\n * <b>SplFileObject::setMaxLineLen<\/b>, default is 0.\r\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * SplFileObject does not have children\r\n * @link http:\/\/php.net\/splfileobject.haschildren.php\r\n * @return bool <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * No purpose\r\n * @link http:\/\/php.net\/splfileobject.getchildren.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "line_pos",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Seek to specified line\r\n * @link http:\/\/php.net\/splfileobject.seek.php\r\n * @param int $line_pos <p>\r\n * The zero-based line number to seek to.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getCurrentLine",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Alias of <b>SplFileObject::fgets<\/b>\r\n * @link http:\/\/php.net\/splfileobject.getcurrentline.php\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Alias of <b>SplFileObject::current<\/b>\r\n * @link http:\/\/php.net\/splfileobject.tostring.php\r\n * @return void\r\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path without filename\r\n * @link http:\/\/php.net\/splfileinfo.getpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the filename\r\n * @link http:\/\/php.net\/splfileinfo.getfilename.php\r\n * @return string The filename.\r\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.6)<br\/>\r\n * Gets the file extension\r\n * @link http:\/\/php.net\/splfileinfo.getextension.php\r\n * @return string a string containing the file extension, or an\r\n * empty string if the file has no extension.\r\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets the base name of the file\r\n * @link http:\/\/php.net\/splfileinfo.getbasename.php\r\n * @param string $suffix [optional] <p>\r\n * Optional suffix to omit from the base name returned.\r\n * <\/p>\r\n * @return string the base name without path information.\r\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path to the file\r\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\r\n * @return string The path to the file.\r\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file permissions\r\n * @link http:\/\/php.net\/splfileinfo.getperms.php\r\n * @return int the file permissions.\r\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode for the file\r\n * @link http:\/\/php.net\/splfileinfo.getinode.php\r\n * @return int the inode number for the filesystem object.\r\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file size\r\n * @link http:\/\/php.net\/splfileinfo.getsize.php\r\n * @return int The filesize in bytes.\r\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the owner of the file\r\n * @link http:\/\/php.net\/splfileinfo.getowner.php\r\n * @return int The owner id in numerical format.\r\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the file group\r\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\r\n * @return int The group id in numerical format.\r\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets last access time of the file\r\n * @link http:\/\/php.net\/splfileinfo.getatime.php\r\n * @return int the time the file was last accessed.\r\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the last modified time\r\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\r\n * @return int the last modified time for the file, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode change time\r\n * @link http:\/\/php.net\/splfileinfo.getctime.php\r\n * @return int The last change time, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file type\r\n * @link http:\/\/php.net\/splfileinfo.gettype.php\r\n * @return string A string representing the type of the entry.\r\n * May be one of file, link,\r\n * or dir\r\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the entry is writable\r\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\r\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\r\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if file is readable\r\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\r\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is executable\r\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\r\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the object references a regular file\r\n * @link http:\/\/php.net\/splfileinfo.isfile.php\r\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a directory\r\n * @link http:\/\/php.net\/splfileinfo.isdir.php\r\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a link\r\n * @link http:\/\/php.net\/splfileinfo.islink.php\r\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets the target of a link\r\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\r\n * @return string the target of the filesystem link.\r\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets absolute path to file\r\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the file\r\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\r\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the path\r\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\r\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileObject object for the file\r\n * @link http:\/\/php.net\/splfileinfo.openfile.php\r\n * @param string $open_mode [optional] <p>\r\n * The mode for opening the file. See the <b>fopen<\/b>\r\n * documentation for descriptions of possible modes. The default\r\n * is read only.\r\n * <\/p>\r\n * @param bool $use_include_path [optional] <p>\r\n * When set to <b>TRUE<\/b>, the filename is also\r\n * searched for within the include_path\r\n * <\/p>\r\n * @param resource $context [optional] <p>\r\n * Refer to the context\r\n * section of the manual for a description of contexts.\r\n * <\/p>\r\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\r\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\r\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use when openFile() is called.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class used with getFileInfo and getPathInfo\r\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "DROP_NEW_LINE",
                "value": 1,
                "doc": null
            },
            {
                "name": "READ_AHEAD",
                "value": 2,
                "doc": null
            },
            {
                "name": "SKIP_EMPTY",
                "value": 4,
                "doc": null
            },
            {
                "name": "READ_CSV",
                "value": 8,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplTempFileObject",
        "fqn": "\\SplTempFileObject",
        "type": 0,
        "extends": "SplFileObject",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "max_memory",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Construct a new temporary file object\r\n * @link http:\/\/php.net\/spltempfileobject.construct.php\r\n * @param int $max_memory [optional] <p>\r\n * The maximum amount of memory (in bytes, default is 2 MB) for\r\n * the temporary file to use. If the temporary file exceeds this\r\n * size, it will be moved to a file in the system's temp directory.\r\n * <\/p>\r\n * <p>\r\n * If <i>max_memory<\/i> is negative, only memory\r\n * will be used. If <i>max_memory<\/i> is zero,\r\n * no memory will be used.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the file to the first line\r\n * @link http:\/\/php.net\/splfileobject.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "eof",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Reached end of file\r\n * @link http:\/\/php.net\/splfileobject.eof.php\r\n * @return bool <b>TRUE<\/b> if file is at EOF, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Not at EOF\r\n * @link http:\/\/php.net\/splfileobject.valid.php\r\n * @return bool <b>TRUE<\/b> if not reached EOF, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "fgets",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets line from file\r\n * @link http:\/\/php.net\/splfileobject.fgets.php\r\n * @return string a string containing the next line from the file, or <b>FALSE<\/b> on error.\r\n *\/"
            },
            {
                "name": "fgetcsv",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    },
                    {
                        "name": "escape",
                        "type": null,
                        "byRef": false,
                        "default": "\\"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets line from file and parse as CSV fields\r\n * @link http:\/\/php.net\/splfileobject.fgetcsv.php\r\n * @param string $delimiter [optional] <p>\r\n * The field delimiter (one character only). Defaults as a comma or the value set using <b>SplFileObject::setCsvControl<\/b>.\r\n * <\/p>\r\n * @param string $enclosure [optional] <p>\r\n * The field enclosure character (one character only). Defaults as a double quotation mark or the value set using <b>SplFileObject::setCsvControl<\/b>.\r\n * <\/p>\r\n * @param string $escape [optional] <p>\r\n * The escape character (one character only). Defaults as a backslash (\\) or the value set using <b>SplFileObject::setCsvControl<\/b>.\r\n * <\/p>\r\n * @return array an indexed array containing the fields read, or <b>FALSE<\/b> on error.\r\n * <\/p>\r\n * <p>\r\n * A blank line in a CSV file will be returned as an array\r\n * comprising a single <b>NULL<\/b> field unless using <b>SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE<\/b>,\r\n * in which case empty lines are skipped.\r\n *\/"
            },
            {
                "name": "fputcsv",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Write a field array as a CSV line\r\n * @link http:\/\/php.net\/splfileobject.fputcsv.php\r\n * @param array $fields <p>\r\n * An array of values.\r\n * <\/p>\r\n * @param string $delimiter [optional] <p>\r\n * The optional <i>delimiter<\/i> parameter sets the field\r\n * delimiter (one character only).\r\n * <\/p>\r\n * @param string $enclosure [optional] <p>\r\n * The optional <i>enclosure<\/i> parameter sets the field\r\n * enclosure (one character only).\r\n * <\/p>\r\n * @return int the length of the written string or <b>FALSE<\/b> on failure.\r\n * <\/p>\r\n * <p>\r\n * Returns <b>FALSE<\/b>, and does not write the CSV line to the file, if the\r\n * <i>delimiter<\/i> or <i>enclosure<\/i>\r\n * parameter is not a single character.\r\n *\/"
            },
            {
                "name": "setCsvControl",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "delimiter",
                        "type": null,
                        "byRef": false,
                        "default": ","
                    },
                    {
                        "name": "enclosure",
                        "type": null,
                        "byRef": false,
                        "default": "\""
                    },
                    {
                        "name": "escape",
                        "type": null,
                        "byRef": false,
                        "default": "\\"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Set the delimiter and enclosure character for CSV\r\n * @link http:\/\/php.net\/splfileobject.setcsvcontrol.php\r\n * @param string $delimiter [optional] <p>\r\n * The field delimiter (one character only).\r\n * <\/p>\r\n * @param string $enclosure [optional] <p>\r\n * The field enclosure character (one character only).\r\n * <\/p>\r\n * @param string $escape [optional] <p>\r\n * The field escape character (one character only).\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getCsvControl",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.0)<br\/>\r\n * Get the delimiter and enclosure character for CSV\r\n * @link http:\/\/php.net\/splfileobject.getcsvcontrol.php\r\n * @return array an indexed array containing the delimiter and enclosure character.\r\n *\/"
            },
            {
                "name": "flock",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "operation",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "wouldblock",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Portable file locking\r\n * @link http:\/\/php.net\/splfileobject.flock.php\r\n * @param int $operation <p>\r\n * <i>operation<\/i> is one of the following:\r\n * <b>LOCK_SH<\/b> to acquire a shared lock (reader).\r\n * @param int $wouldblock [optional] <p>\r\n * Set to <b>TRUE<\/b> if the lock would block (EWOULDBLOCK errno condition).\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "fflush",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Flushes the output to the file\r\n * @link http:\/\/php.net\/splfileobject.fflush.php\r\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "ftell",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Return current file position\r\n * @link http:\/\/php.net\/splfileobject.ftell.php\r\n * @return int the position of the file pointer as an integer, or <b>FALSE<\/b> on error.\r\n *\/"
            },
            {
                "name": "fseek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "offset",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "whence",
                        "type": null,
                        "byRef": false,
                        "default": "SEEK_SET"
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Seek to a position\r\n * @link http:\/\/php.net\/splfileobject.fseek.php\r\n * @param int $offset <p>\r\n * The offset. A negative value can be used to move backwards through the file which\r\n * is useful when SEEK_END is used as the <i>whence<\/i> value.\r\n * <\/p>\r\n * @param int $whence [optional] <p>\r\n * <i>whence<\/i> values are:\r\n * <b>SEEK_SET<\/b> - Set position equal to <i>offset<\/i> bytes.\r\n * <b>SEEK_CUR<\/b> - Set position to current location plus <i>offset<\/i>.\r\n * <b>SEEK_END<\/b> - Set position to end-of-file plus <i>offset<\/i>.\r\n * <\/p>\r\n * <p>\r\n * If <i>whence<\/i> is not specified, it is assumed to be <b>SEEK_SET<\/b>.\r\n * <\/p>\r\n * @return int 0 if the seek was successful, -1 otherwise. Note that seeking\r\n * past EOF is not considered an error.\r\n *\/"
            },
            {
                "name": "fgetc",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets character from file\r\n * @link http:\/\/php.net\/splfileobject.fgetc.php\r\n * @return string a string containing a single character read from the file or <b>FALSE<\/b> on EOF.\r\n *\/"
            },
            {
                "name": "fpassthru",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Output all remaining data on a file pointer\r\n * @link http:\/\/php.net\/splfileobject.fpassthru.php\r\n * @return int the number of characters read from <i>handle<\/i>\r\n * and passed through to the output.\r\n *\/"
            },
            {
                "name": "fgetss",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "allowable_tags",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets line from file and strip HTML tags\r\n * @link http:\/\/php.net\/splfileobject.fgetss.php\r\n * @param string $allowable_tags [optional] <p>\r\n * Optional parameter to specify tags which should not be stripped.\r\n * <\/p>\r\n * @return string a string containing the next line of the file with HTML and PHP\r\n * code stripped, or <b>FALSE<\/b> on error.\r\n *\/"
            },
            {
                "name": "fscanf",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "format",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "_",
                        "type": null,
                        "byRef": true,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Parses input from file according to a format\r\n * @link http:\/\/php.net\/splfileobject.fscanf.php\r\n * @param string $format <p>\r\n * The specified format as described in the <b>sprintf<\/b> documentation.\r\n * <\/p>\r\n * @param mixed $_ [optional] <p>\r\n * The optional assigned values.\r\n * <\/p>\r\n * @return mixed If only one parameter is passed to this method, the values parsed will be\r\n * returned as an array. Otherwise, if optional parameters are passed, the\r\n * function will return the number of assigned values. The optional\r\n * parameters must be passed by reference.\r\n *\/"
            },
            {
                "name": "fwrite",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "str",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "length",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Write to file\r\n * @link http:\/\/php.net\/splfileobject.fwrite.php\r\n * @param string $str <p>\r\n * The string to be written to the file.\r\n * <\/p>\r\n * @param int $length [optional] <p>\r\n * If the <i>length<\/i> argument is given, writing will\r\n * stop after <i>length<\/i> bytes have been written or\r\n * the end of <i>string<\/i> is reached, whichever comes\r\n * first.\r\n * <\/p>\r\n * @return int the number of bytes written, or <b>NULL<\/b> on error.\r\n *\/"
            },
            {
                "name": "fstat",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets information about the file\r\n * @link http:\/\/php.net\/splfileobject.fstat.php\r\n * @return array an array with the statistics of the file; the format of the array\r\n * is described in detail on the <b>stat<\/b> manual page.\r\n *\/"
            },
            {
                "name": "ftruncate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Truncates the file to a given length\r\n * @link http:\/\/php.net\/splfileobject.ftruncate.php\r\n * @param int $size <p>\r\n * The size to truncate to.\r\n * <\/p>\r\n * <p>\r\n * If <i>size<\/i> is larger than the file it is extended with null bytes.\r\n * <\/p>\r\n * <p>\r\n * If <i>size<\/i> is smaller than the file, the extra data will be lost.\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Retrieve current line of file\r\n * @link http:\/\/php.net\/splfileobject.current.php\r\n * @return string|array Retrieves the current line of the file. If the <b>SplFileObject::READ_CSV<\/b> flag is set, this method returns an array containing the current line parsed as CSV data.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get line number\r\n * @link http:\/\/php.net\/splfileobject.key.php\r\n * @return int the current line number.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Read next line\r\n * @link http:\/\/php.net\/splfileobject.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Sets flags for the SplFileObject\r\n * @link http:\/\/php.net\/splfileobject.setflags.php\r\n * @param int $flags <p>\r\n * Bit mask of the flags to set. See\r\n * SplFileObject constants\r\n * for the available flags.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets flags for the SplFileObject\r\n * @link http:\/\/php.net\/splfileobject.getflags.php\r\n * @return int an integer representing the flags.\r\n *\/"
            },
            {
                "name": "setMaxLineLen",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "max_len",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Set maximum line length\r\n * @link http:\/\/php.net\/splfileobject.setmaxlinelen.php\r\n * @param int $max_len <p>\r\n * The maximum length of a line.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getMaxLineLen",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Get maximum line length\r\n * @link http:\/\/php.net\/splfileobject.getmaxlinelen.php\r\n * @return int the maximum line length if one has been set with\r\n * <b>SplFileObject::setMaxLineLen<\/b>, default is 0.\r\n *\/"
            },
            {
                "name": "hasChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * SplFileObject does not have children\r\n * @link http:\/\/php.net\/splfileobject.haschildren.php\r\n * @return bool <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "getChildren",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * No purpose\r\n * @link http:\/\/php.net\/splfileobject.getchildren.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "seek",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "line_pos",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Seek to specified line\r\n * @link http:\/\/php.net\/splfileobject.seek.php\r\n * @param int $line_pos <p>\r\n * The zero-based line number to seek to.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getCurrentLine",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Alias of <b>SplFileObject::fgets<\/b>\r\n * @link http:\/\/php.net\/splfileobject.getcurrentline.php\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Alias of <b>SplFileObject::current<\/b>\r\n * @link http:\/\/php.net\/splfileobject.tostring.php\r\n * @return void\r\n *\/"
            },
            {
                "name": "getPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path without filename\r\n * @link http:\/\/php.net\/splfileinfo.getpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the filename\r\n * @link http:\/\/php.net\/splfileinfo.getfilename.php\r\n * @return string The filename.\r\n *\/"
            },
            {
                "name": "getExtension",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.6)<br\/>\r\n * Gets the file extension\r\n * @link http:\/\/php.net\/splfileinfo.getextension.php\r\n * @return string a string containing the file extension, or an\r\n * empty string if the file has no extension.\r\n *\/"
            },
            {
                "name": "getBasename",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "suffix",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets the base name of the file\r\n * @link http:\/\/php.net\/splfileinfo.getbasename.php\r\n * @param string $suffix [optional] <p>\r\n * Optional suffix to omit from the base name returned.\r\n * <\/p>\r\n * @return string the base name without path information.\r\n *\/"
            },
            {
                "name": "getPathname",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the path to the file\r\n * @link http:\/\/php.net\/splfileinfo.getpathname.php\r\n * @return string The path to the file.\r\n *\/"
            },
            {
                "name": "getPerms",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file permissions\r\n * @link http:\/\/php.net\/splfileinfo.getperms.php\r\n * @return int the file permissions.\r\n *\/"
            },
            {
                "name": "getInode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode for the file\r\n * @link http:\/\/php.net\/splfileinfo.getinode.php\r\n * @return int the inode number for the filesystem object.\r\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file size\r\n * @link http:\/\/php.net\/splfileinfo.getsize.php\r\n * @return int The filesize in bytes.\r\n *\/"
            },
            {
                "name": "getOwner",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the owner of the file\r\n * @link http:\/\/php.net\/splfileinfo.getowner.php\r\n * @return int The owner id in numerical format.\r\n *\/"
            },
            {
                "name": "getGroup",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the file group\r\n * @link http:\/\/php.net\/splfileinfo.getgroup.php\r\n * @return int The group id in numerical format.\r\n *\/"
            },
            {
                "name": "getATime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets last access time of the file\r\n * @link http:\/\/php.net\/splfileinfo.getatime.php\r\n * @return int the time the file was last accessed.\r\n *\/"
            },
            {
                "name": "getMTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the last modified time\r\n * @link http:\/\/php.net\/splfileinfo.getmtime.php\r\n * @return int the last modified time for the file, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getCTime",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets the inode change time\r\n * @link http:\/\/php.net\/splfileinfo.getctime.php\r\n * @return int The last change time, in a Unix timestamp.\r\n *\/"
            },
            {
                "name": "getType",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets file type\r\n * @link http:\/\/php.net\/splfileinfo.gettype.php\r\n * @return string A string representing the type of the entry.\r\n * May be one of file, link,\r\n * or dir\r\n *\/"
            },
            {
                "name": "isWritable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the entry is writable\r\n * @link http:\/\/php.net\/splfileinfo.iswritable.php\r\n * @return bool <b>TRUE<\/b> if writable, <b>FALSE<\/b> otherwise;\r\n *\/"
            },
            {
                "name": "isReadable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if file is readable\r\n * @link http:\/\/php.net\/splfileinfo.isreadable.php\r\n * @return bool <b>TRUE<\/b> if readable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isExecutable",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is executable\r\n * @link http:\/\/php.net\/splfileinfo.isexecutable.php\r\n * @return bool <b>TRUE<\/b> if executable, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isFile",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the object references a regular file\r\n * @link http:\/\/php.net\/splfileinfo.isfile.php\r\n * @return bool <b>TRUE<\/b> if the file exists and is a regular file (not a link), <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isDir",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a directory\r\n * @link http:\/\/php.net\/splfileinfo.isdir.php\r\n * @return bool <b>TRUE<\/b> if a directory, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "isLink",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Tells if the file is a link\r\n * @link http:\/\/php.net\/splfileinfo.islink.php\r\n * @return bool <b>TRUE<\/b> if the file is a link, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getLinkTarget",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets the target of a link\r\n * @link http:\/\/php.net\/splfileinfo.getlinktarget.php\r\n * @return string the target of the filesystem link.\r\n *\/"
            },
            {
                "name": "getRealPath",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Gets absolute path to file\r\n * @link http:\/\/php.net\/splfileinfo.getrealpath.php\r\n * @return string the path to the file.\r\n *\/"
            },
            {
                "name": "getFileInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the file\r\n * @link http:\/\/php.net\/splfileinfo.getfileinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo An <b>SplFileInfo<\/b> object created for the file.\r\n *\/"
            },
            {
                "name": "getPathInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileInfo object for the path\r\n * @link http:\/\/php.net\/splfileinfo.getpathinfo.php\r\n * @param string $class_name [optional] <p>\r\n * Name of an <b>SplFileInfo<\/b> derived class to use.\r\n * <\/p>\r\n * @return SplFileInfo an <b>SplFileInfo<\/b> object for the parent path of the file.\r\n *\/"
            },
            {
                "name": "openFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "open_mode",
                        "type": null,
                        "byRef": false,
                        "default": "r"
                    },
                    {
                        "name": "use_include_path",
                        "type": null,
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "context",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Gets an SplFileObject object for the file\r\n * @link http:\/\/php.net\/splfileinfo.openfile.php\r\n * @param string $open_mode [optional] <p>\r\n * The mode for opening the file. See the <b>fopen<\/b>\r\n * documentation for descriptions of possible modes. The default\r\n * is read only.\r\n * <\/p>\r\n * @param bool $use_include_path [optional] <p>\r\n * When set to <b>TRUE<\/b>, the filename is also\r\n * searched for within the include_path\r\n * <\/p>\r\n * @param resource $context [optional] <p>\r\n * Refer to the context\r\n * section of the manual for a description of contexts.\r\n * <\/p>\r\n * @return SplFileObject The opened file as an <b>SplFileObject<\/b> object.\r\n *\/"
            },
            {
                "name": "setFileClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class name used with <b>SplFileInfo::openFile<\/b>\r\n * @link http:\/\/php.net\/splfileinfo.setfileclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use when openFile() is called.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setInfoClass",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "class_name",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.2)<br\/>\r\n * Sets the class used with getFileInfo and getPathInfo\r\n * @link http:\/\/php.net\/splfileinfo.setinfoclass.php\r\n * @param string $class_name [optional] <p>\r\n * The class name to use.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "_bad_state_ex",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": null
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "DROP_NEW_LINE",
                "value": 1,
                "doc": null
            },
            {
                "name": "READ_AHEAD",
                "value": 2,
                "doc": null
            },
            {
                "name": "SKIP_EMPTY",
                "value": 4,
                "doc": null
            },
            {
                "name": "READ_CSV",
                "value": 8,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplDoublyLinkedList",
        "fqn": "\\SplDoublyLinkedList",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "pop",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Pops a node from the end of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.pop.php\r\n * @return mixed The value of the popped node.\r\n *\/"
            },
            {
                "name": "shift",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Shifts a node from the beginning of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.shift.php\r\n * @return mixed The value of the shifted node.\r\n *\/"
            },
            {
                "name": "push",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Pushes an element at the end of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.push.php\r\n * @param mixed $value <p>\r\n * The value to push.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "unshift",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Prepends the doubly linked list with an element\r\n * @link http:\/\/php.net\/spldoublylinkedlist.unshift.php\r\n * @param mixed $value <p>\r\n * The value to unshift.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Peeks at the node from the end of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.top.php\r\n * @return mixed The value of the last node.\r\n *\/"
            },
            {
                "name": "bottom",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Peeks at the node from the beginning of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.bottom.php\r\n * @return mixed The value of the first node.\r\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Checks whether the doubly linked list is empty.\r\n * @link http:\/\/php.net\/spldoublylinkedlist.isempty.php\r\n * @return bool whether the doubly linked list is empty.\r\n *\/"
            },
            {
                "name": "setIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets the mode of iteration\r\n * @link http:\/\/php.net\/spldoublylinkedlist.setiteratormode.php\r\n * @param int $mode <p>\r\n * There are two orthogonal sets of modes that can be set:\r\n * <\/p>\r\n * The direction of the iteration (either one or the other):\r\n * <b>SplDoublyLinkedList::IT_MODE_LIFO<\/b> (Stack style)\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns the mode of iteration\r\n * @link http:\/\/php.net\/spldoublylinkedlist.getiteratormode.php\r\n * @return int the different modes and flags that affect the iteration.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Counts the number of elements in the doubly linked list.\r\n * @link http:\/\/php.net\/spldoublylinkedlist.count.php\r\n * @return int the number of elements in the doubly linked list.\r\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns whether the requested $index exists\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetexists.php\r\n * @param mixed $index <p>\r\n * The index being checked.\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> if the requested <i>index<\/i> exists, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns the value at the specified $index\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetget.php\r\n * @param mixed $index <p>\r\n * The index with the value.\r\n * <\/p>\r\n * @return mixed The value at the specified <i>index<\/i>.\r\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets the value at the specified $index to $newval\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetset.php\r\n * @param mixed $index <p>\r\n * The index being set.\r\n * <\/p>\r\n * @param mixed $newval <p>\r\n * The new value for the <i>index<\/i>.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Unsets the value at the specified $index\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetunset.php\r\n * @param mixed $index <p>\r\n * The index being unset.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewind iterator back to the start\r\n * @link http:\/\/php.net\/spldoublylinkedlist.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current array entry\r\n * @link http:\/\/php.net\/spldoublylinkedlist.current.php\r\n * @return mixed The current node value.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node index\r\n * @link http:\/\/php.net\/spldoublylinkedlist.key.php\r\n * @return mixed The current node index.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to next entry\r\n * @link http:\/\/php.net\/spldoublylinkedlist.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "prev",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to previous entry\r\n * @link http:\/\/php.net\/spldoublylinkedlist.prev.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Check whether the doubly linked list contains more nodes\r\n * @link http:\/\/php.net\/spldoublylinkedlist.valid.php\r\n * @return bool <b>TRUE<\/b> if the doubly linked list contains any more nodes, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Unserializes the storage\r\n * @link http:\/\/php.net\/spldoublylinkedlist.unserialize.php\r\n * @param string $serialized <p>\r\n * The serialized string.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Serializes the storage\r\n * @link http:\/\/php.net\/spldoublylinkedlist.serialize.php\r\n * @return string The serialized string.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "IT_MODE_LIFO",
                "value": 2,
                "doc": null
            },
            {
                "name": "IT_MODE_FIFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "IT_MODE_DELETE",
                "value": 1,
                "doc": null
            },
            {
                "name": "IT_MODE_KEEP",
                "value": 0,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplQueue",
        "fqn": "\\SplQueue",
        "type": 0,
        "extends": "SplDoublyLinkedList",
        "methods": [
            {
                "name": "enqueue",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Adds an element to the queue.\r\n * @link http:\/\/php.net\/splqueue.enqueue.php\r\n * @param mixed $value <p>\r\n * The value to enqueue.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "dequeue",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Dequeues a node from the queue\r\n * @link http:\/\/php.net\/splqueue.dequeue.php\r\n * @return mixed The value of the dequeued node.\r\n *\/"
            },
            {
                "name": "pop",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Pops a node from the end of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.pop.php\r\n * @return mixed The value of the popped node.\r\n *\/"
            },
            {
                "name": "shift",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Shifts a node from the beginning of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.shift.php\r\n * @return mixed The value of the shifted node.\r\n *\/"
            },
            {
                "name": "push",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Pushes an element at the end of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.push.php\r\n * @param mixed $value <p>\r\n * The value to push.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "unshift",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Prepends the doubly linked list with an element\r\n * @link http:\/\/php.net\/spldoublylinkedlist.unshift.php\r\n * @param mixed $value <p>\r\n * The value to unshift.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Peeks at the node from the end of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.top.php\r\n * @return mixed The value of the last node.\r\n *\/"
            },
            {
                "name": "bottom",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Peeks at the node from the beginning of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.bottom.php\r\n * @return mixed The value of the first node.\r\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Checks whether the doubly linked list is empty.\r\n * @link http:\/\/php.net\/spldoublylinkedlist.isempty.php\r\n * @return bool whether the doubly linked list is empty.\r\n *\/"
            },
            {
                "name": "setIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets the mode of iteration\r\n * @link http:\/\/php.net\/spldoublylinkedlist.setiteratormode.php\r\n * @param int $mode <p>\r\n * There are two orthogonal sets of modes that can be set:\r\n * <\/p>\r\n * The direction of the iteration (either one or the other):\r\n * <b>SplDoublyLinkedList::IT_MODE_LIFO<\/b> (Stack style)\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns the mode of iteration\r\n * @link http:\/\/php.net\/spldoublylinkedlist.getiteratormode.php\r\n * @return int the different modes and flags that affect the iteration.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Counts the number of elements in the doubly linked list.\r\n * @link http:\/\/php.net\/spldoublylinkedlist.count.php\r\n * @return int the number of elements in the doubly linked list.\r\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns whether the requested $index exists\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetexists.php\r\n * @param mixed $index <p>\r\n * The index being checked.\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> if the requested <i>index<\/i> exists, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns the value at the specified $index\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetget.php\r\n * @param mixed $index <p>\r\n * The index with the value.\r\n * <\/p>\r\n * @return mixed The value at the specified <i>index<\/i>.\r\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets the value at the specified $index to $newval\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetset.php\r\n * @param mixed $index <p>\r\n * The index being set.\r\n * <\/p>\r\n * @param mixed $newval <p>\r\n * The new value for the <i>index<\/i>.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Unsets the value at the specified $index\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetunset.php\r\n * @param mixed $index <p>\r\n * The index being unset.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewind iterator back to the start\r\n * @link http:\/\/php.net\/spldoublylinkedlist.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current array entry\r\n * @link http:\/\/php.net\/spldoublylinkedlist.current.php\r\n * @return mixed The current node value.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node index\r\n * @link http:\/\/php.net\/spldoublylinkedlist.key.php\r\n * @return mixed The current node index.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to next entry\r\n * @link http:\/\/php.net\/spldoublylinkedlist.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "prev",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to previous entry\r\n * @link http:\/\/php.net\/spldoublylinkedlist.prev.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Check whether the doubly linked list contains more nodes\r\n * @link http:\/\/php.net\/spldoublylinkedlist.valid.php\r\n * @return bool <b>TRUE<\/b> if the doubly linked list contains any more nodes, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Unserializes the storage\r\n * @link http:\/\/php.net\/spldoublylinkedlist.unserialize.php\r\n * @param string $serialized <p>\r\n * The serialized string.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Serializes the storage\r\n * @link http:\/\/php.net\/spldoublylinkedlist.serialize.php\r\n * @return string The serialized string.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "IT_MODE_LIFO",
                "value": 2,
                "doc": null
            },
            {
                "name": "IT_MODE_FIFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "IT_MODE_DELETE",
                "value": 1,
                "doc": null
            },
            {
                "name": "IT_MODE_KEEP",
                "value": 0,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplStack",
        "fqn": "\\SplStack",
        "type": 0,
        "extends": "SplDoublyLinkedList",
        "methods": [
            {
                "name": "pop",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Pops a node from the end of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.pop.php\r\n * @return mixed The value of the popped node.\r\n *\/"
            },
            {
                "name": "shift",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Shifts a node from the beginning of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.shift.php\r\n * @return mixed The value of the shifted node.\r\n *\/"
            },
            {
                "name": "push",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Pushes an element at the end of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.push.php\r\n * @param mixed $value <p>\r\n * The value to push.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "unshift",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Prepends the doubly linked list with an element\r\n * @link http:\/\/php.net\/spldoublylinkedlist.unshift.php\r\n * @param mixed $value <p>\r\n * The value to unshift.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Peeks at the node from the end of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.top.php\r\n * @return mixed The value of the last node.\r\n *\/"
            },
            {
                "name": "bottom",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Peeks at the node from the beginning of the doubly linked list\r\n * @link http:\/\/php.net\/spldoublylinkedlist.bottom.php\r\n * @return mixed The value of the first node.\r\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Checks whether the doubly linked list is empty.\r\n * @link http:\/\/php.net\/spldoublylinkedlist.isempty.php\r\n * @return bool whether the doubly linked list is empty.\r\n *\/"
            },
            {
                "name": "setIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "mode",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets the mode of iteration\r\n * @link http:\/\/php.net\/spldoublylinkedlist.setiteratormode.php\r\n * @param int $mode <p>\r\n * There are two orthogonal sets of modes that can be set:\r\n * <\/p>\r\n * The direction of the iteration (either one or the other):\r\n * <b>SplDoublyLinkedList::IT_MODE_LIFO<\/b> (Stack style)\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getIteratorMode",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns the mode of iteration\r\n * @link http:\/\/php.net\/spldoublylinkedlist.getiteratormode.php\r\n * @return int the different modes and flags that affect the iteration.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Counts the number of elements in the doubly linked list.\r\n * @link http:\/\/php.net\/spldoublylinkedlist.count.php\r\n * @return int the number of elements in the doubly linked list.\r\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns whether the requested $index exists\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetexists.php\r\n * @param mixed $index <p>\r\n * The index being checked.\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> if the requested <i>index<\/i> exists, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns the value at the specified $index\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetget.php\r\n * @param mixed $index <p>\r\n * The index with the value.\r\n * <\/p>\r\n * @return mixed The value at the specified <i>index<\/i>.\r\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets the value at the specified $index to $newval\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetset.php\r\n * @param mixed $index <p>\r\n * The index being set.\r\n * <\/p>\r\n * @param mixed $newval <p>\r\n * The new value for the <i>index<\/i>.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Unsets the value at the specified $index\r\n * @link http:\/\/php.net\/spldoublylinkedlist.offsetunset.php\r\n * @param mixed $index <p>\r\n * The index being unset.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewind iterator back to the start\r\n * @link http:\/\/php.net\/spldoublylinkedlist.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current array entry\r\n * @link http:\/\/php.net\/spldoublylinkedlist.current.php\r\n * @return mixed The current node value.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node index\r\n * @link http:\/\/php.net\/spldoublylinkedlist.key.php\r\n * @return mixed The current node index.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to next entry\r\n * @link http:\/\/php.net\/spldoublylinkedlist.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "prev",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to previous entry\r\n * @link http:\/\/php.net\/spldoublylinkedlist.prev.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Check whether the doubly linked list contains more nodes\r\n * @link http:\/\/php.net\/spldoublylinkedlist.valid.php\r\n * @return bool <b>TRUE<\/b> if the doubly linked list contains any more nodes, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Unserializes the storage\r\n * @link http:\/\/php.net\/spldoublylinkedlist.unserialize.php\r\n * @param string $serialized <p>\r\n * The serialized string.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Serializes the storage\r\n * @link http:\/\/php.net\/spldoublylinkedlist.serialize.php\r\n * @return string The serialized string.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "IT_MODE_LIFO",
                "value": 2,
                "doc": null
            },
            {
                "name": "IT_MODE_FIFO",
                "value": 0,
                "doc": null
            },
            {
                "name": "IT_MODE_DELETE",
                "value": 1,
                "doc": null
            },
            {
                "name": "IT_MODE_KEEP",
                "value": 0,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplHeap",
        "fqn": "\\SplHeap",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "extract",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Extracts a node from top of the heap and sift up.\r\n * @link http:\/\/php.net\/splheap.extract.php\r\n * @return mixed The value of the extracted node.\r\n *\/"
            },
            {
                "name": "insert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Inserts an element in the heap by sifting it up.\r\n * @link http:\/\/php.net\/splheap.insert.php\r\n * @param mixed $value <p>\r\n * The value to insert.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Peeks at the node from the top of the heap\r\n * @link http:\/\/php.net\/splheap.top.php\r\n * @return mixed The value of the node on the top.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Counts the number of elements in the heap.\r\n * @link http:\/\/php.net\/splheap.count.php\r\n * @return int the number of elements in the heap.\r\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Checks whether the heap is empty.\r\n * @link http:\/\/php.net\/splheap.isempty.php\r\n * @return bool whether the heap is empty.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewind iterator back to the start (no-op)\r\n * @link http:\/\/php.net\/splheap.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node pointed by the iterator\r\n * @link http:\/\/php.net\/splheap.current.php\r\n * @return mixed The current node value.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node index\r\n * @link http:\/\/php.net\/splheap.key.php\r\n * @return mixed The current node index.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to the next node\r\n * @link http:\/\/php.net\/splheap.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Check whether the heap contains more nodes\r\n * @link http:\/\/php.net\/splheap.valid.php\r\n * @return bool <b>TRUE<\/b> if the heap contains any more nodes, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "recoverFromCorruption",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Recover from the corrupted state and allow further actions on the heap.\r\n * @link http:\/\/php.net\/splheap.recoverfromcorruption.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "compare",
                "type": 18,
                "byRef": false,
                "params": [
                    {
                        "name": "value1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Compare elements in order to place them correctly in the heap while sifting up.\r\n * @link http:\/\/php.net\/splheap.compare.php\r\n * @param mixed $value1 <p>\r\n * The value of the first node being compared.\r\n * <\/p>\r\n * @param mixed $value2 <p>\r\n * The value of the second node being compared.\r\n * <\/p>\r\n * @return int Result of the comparison, positive integer if <i>value1<\/i> is greater than <i>value2<\/i>, 0 if they are equal, negative integer otherwise.\r\n * <\/p>\r\n * <p>\r\n * Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SplMinHeap",
        "fqn": "\\SplMinHeap",
        "type": 0,
        "extends": "SplHeap",
        "methods": [
            {
                "name": "compare",
                "type": 2,
                "byRef": false,
                "params": [
                    {
                        "name": "value1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Compare elements in order to place them correctly in the heap while sifting up.\r\n * @link http:\/\/php.net\/splminheap.compare.php\r\n * @param mixed $value1 <p>\r\n * The value of the first node being compared.\r\n * <\/p>\r\n * @param mixed $value2 <p>\r\n * The value of the second node being compared.\r\n * <\/p>\r\n * @return int Result of the comparison, positive integer if <i>value1<\/i> is lower than <i>value2<\/i>, 0 if they are equal, negative integer otherwise.\r\n * <\/p>\r\n * <p>\r\n * Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.\r\n *\/"
            },
            {
                "name": "extract",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Extracts a node from top of the heap and sift up.\r\n * @link http:\/\/php.net\/splheap.extract.php\r\n * @return mixed The value of the extracted node.\r\n *\/"
            },
            {
                "name": "insert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Inserts an element in the heap by sifting it up.\r\n * @link http:\/\/php.net\/splheap.insert.php\r\n * @param mixed $value <p>\r\n * The value to insert.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Peeks at the node from the top of the heap\r\n * @link http:\/\/php.net\/splheap.top.php\r\n * @return mixed The value of the node on the top.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Counts the number of elements in the heap.\r\n * @link http:\/\/php.net\/splheap.count.php\r\n * @return int the number of elements in the heap.\r\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Checks whether the heap is empty.\r\n * @link http:\/\/php.net\/splheap.isempty.php\r\n * @return bool whether the heap is empty.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewind iterator back to the start (no-op)\r\n * @link http:\/\/php.net\/splheap.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node pointed by the iterator\r\n * @link http:\/\/php.net\/splheap.current.php\r\n * @return mixed The current node value.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node index\r\n * @link http:\/\/php.net\/splheap.key.php\r\n * @return mixed The current node index.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to the next node\r\n * @link http:\/\/php.net\/splheap.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Check whether the heap contains more nodes\r\n * @link http:\/\/php.net\/splheap.valid.php\r\n * @return bool <b>TRUE<\/b> if the heap contains any more nodes, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "recoverFromCorruption",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Recover from the corrupted state and allow further actions on the heap.\r\n * @link http:\/\/php.net\/splheap.recoverfromcorruption.php\r\n * @return void No value is returned.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SplMaxHeap",
        "fqn": "\\SplMaxHeap",
        "type": 0,
        "extends": "SplHeap",
        "methods": [
            {
                "name": "compare",
                "type": 2,
                "byRef": false,
                "params": [
                    {
                        "name": "value1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Compare elements in order to place them correctly in the heap while sifting up.\r\n * @link http:\/\/php.net\/splmaxheap.compare.php\r\n * @param mixed $value1 <p>\r\n * The value of the first node being compared.\r\n * <\/p>\r\n * @param mixed $value2 <p>\r\n * The value of the second node being compared.\r\n * <\/p>\r\n * @return int Result of the comparison, positive integer if <i>value1<\/i> is greater than <i>value2<\/i>, 0 if they are equal, negative integer otherwise.\r\n * <\/p>\r\n * <p>\r\n * Having multiple elements with the same value in a Heap is not recommended. They will end up in an arbitrary relative position.\r\n *\/"
            },
            {
                "name": "extract",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Extracts a node from top of the heap and sift up.\r\n * @link http:\/\/php.net\/splheap.extract.php\r\n * @return mixed The value of the extracted node.\r\n *\/"
            },
            {
                "name": "insert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Inserts an element in the heap by sifting it up.\r\n * @link http:\/\/php.net\/splheap.insert.php\r\n * @param mixed $value <p>\r\n * The value to insert.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Peeks at the node from the top of the heap\r\n * @link http:\/\/php.net\/splheap.top.php\r\n * @return mixed The value of the node on the top.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Counts the number of elements in the heap.\r\n * @link http:\/\/php.net\/splheap.count.php\r\n * @return int the number of elements in the heap.\r\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Checks whether the heap is empty.\r\n * @link http:\/\/php.net\/splheap.isempty.php\r\n * @return bool whether the heap is empty.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewind iterator back to the start (no-op)\r\n * @link http:\/\/php.net\/splheap.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node pointed by the iterator\r\n * @link http:\/\/php.net\/splheap.current.php\r\n * @return mixed The current node value.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node index\r\n * @link http:\/\/php.net\/splheap.key.php\r\n * @return mixed The current node index.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to the next node\r\n * @link http:\/\/php.net\/splheap.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Check whether the heap contains more nodes\r\n * @link http:\/\/php.net\/splheap.valid.php\r\n * @return bool <b>TRUE<\/b> if the heap contains any more nodes, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "recoverFromCorruption",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Recover from the corrupted state and allow further actions on the heap.\r\n * @link http:\/\/php.net\/splheap.recoverfromcorruption.php\r\n * @return void No value is returned.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SplPriorityQueue",
        "fqn": "\\SplPriorityQueue",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "compare",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "priority1",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "priority2",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Compare priorities in order to place elements correctly in the heap while sifting up.\r\n * @link http:\/\/php.net\/splpriorityqueue.compare.php\r\n * @param mixed $priority1 <p>\r\n * The priority of the first node being compared.\r\n * <\/p>\r\n * @param mixed $priority2 <p>\r\n * The priority of the second node being compared.\r\n * <\/p>\r\n * @return int Result of the comparison, positive integer if <i>priority1<\/i> is greater than <i>priority2<\/i>, 0 if they are equal, negative integer otherwise.\r\n * <\/p>\r\n * <p>\r\n * Multiple elements with the same priority will get dequeued in no particular order.\r\n *\/"
            },
            {
                "name": "insert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "priority",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Inserts an element in the queue by sifting it up.\r\n * @link http:\/\/php.net\/splpriorityqueue.insert.php\r\n * @param mixed $value <p>\r\n * The value to insert.\r\n * <\/p>\r\n * @param mixed $priority <p>\r\n * The associated priority.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "setExtractFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets the mode of extraction\r\n * @link http:\/\/php.net\/splpriorityqueue.setextractflags.php\r\n * @param int $flags <p>\r\n * Defines what is extracted by <b>SplPriorityQueue::current<\/b>,\r\n * <b>SplPriorityQueue::top<\/b> and\r\n * <b>SplPriorityQueue::extract<\/b>.\r\n * <\/p>\r\n * <b>SplPriorityQueue::EXTR_DATA<\/b> (0x00000001): Extract the data\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "top",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Peeks at the node from the top of the queue\r\n * @link http:\/\/php.net\/splpriorityqueue.top.php\r\n * @return mixed The value or priority (or both) of the top node, depending on the extract flag.\r\n *\/"
            },
            {
                "name": "extract",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Extracts a node from top of the heap and sift up.\r\n * @link http:\/\/php.net\/splpriorityqueue.extract.php\r\n * @return mixed The value or priority (or both) of the extracted node, depending on the extract flag.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Counts the number of elements in the queue.\r\n * @link http:\/\/php.net\/splpriorityqueue.count.php\r\n * @return int the number of elements in the queue.\r\n *\/"
            },
            {
                "name": "isEmpty",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Checks whether the queue is empty.\r\n * @link http:\/\/php.net\/splpriorityqueue.isempty.php\r\n * @return bool whether the queue is empty.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewind iterator back to the start (no-op)\r\n * @link http:\/\/php.net\/splpriorityqueue.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node pointed by the iterator\r\n * @link http:\/\/php.net\/splpriorityqueue.current.php\r\n * @return mixed The value or priority (or both) of the current node, depending on the extract flag.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current node index\r\n * @link http:\/\/php.net\/splpriorityqueue.key.php\r\n * @return mixed The current node index.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to the next node\r\n * @link http:\/\/php.net\/splpriorityqueue.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Check whether the queue contains more nodes\r\n * @link http:\/\/php.net\/splpriorityqueue.valid.php\r\n * @return bool <b>TRUE<\/b> if the queue contains any more nodes, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "recoverFromCorruption",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Recover from the corrupted state and allow further actions on the queue.\r\n * @link http:\/\/php.net\/splpriorityqueue.recoverfromcorruption.php\r\n * @return void No value is returned.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "EXTR_BOTH",
                "value": 3,
                "doc": null
            },
            {
                "name": "EXTR_PRIORITY",
                "value": 2,
                "doc": null
            },
            {
                "name": "EXTR_DATA",
                "value": 1,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "SplFixedArray",
        "fqn": "\\SplFixedArray",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Constructs a new fixed array\r\n * @link http:\/\/php.net\/splfixedarray.construct.php\r\n * @param $size [optional]\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns the size of the array\r\n * @link http:\/\/php.net\/splfixedarray.count.php\r\n * @return int the size of the array.\r\n *\/"
            },
            {
                "name": "toArray",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns a PHP array from the fixed array\r\n * @link http:\/\/php.net\/splfixedarray.toarray.php\r\n * @return array a PHP array, similar to the fixed array.\r\n *\/"
            },
            {
                "name": "fromArray",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "array",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "save_indexes",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Import a PHP array in a <b>SplFixedArray<\/b> instance\r\n * @link http:\/\/php.net\/splfixedarray.fromarray.php\r\n * @param array $array <p>\r\n * The array to import.\r\n * <\/p>\r\n * @param bool $save_indexes [optional] <p>\r\n * Try to save the numeric indexes used in the original array.\r\n * <\/p>\r\n * @return SplFixedArray an instance of <b>SplFixedArray<\/b>\r\n * containing the array content.\r\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Gets the size of the array\r\n * @link http:\/\/php.net\/splfixedarray.getsize.php\r\n * @return int the size of the array, as an integer.\r\n *\/"
            },
            {
                "name": "setSize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Change the size of an array\r\n * @link http:\/\/php.net\/splfixedarray.setsize.php\r\n * @param int $size <p>\r\n * The new array size. This should be a value between 0 and <b>PHP_INT_MAX<\/b>.\r\n * <\/p>\r\n * @return int No value is returned.\r\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns whether the requested index exists\r\n * @link http:\/\/php.net\/splfixedarray.offsetexists.php\r\n * @param int $index <p>\r\n * The index being checked.\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> if the requested <i>index<\/i> exists, otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns the value at the specified index\r\n * @link http:\/\/php.net\/splfixedarray.offsetget.php\r\n * @param int $index <p>\r\n * The index with the value.\r\n * <\/p>\r\n * @return mixed The value at the specified <i>index<\/i>.\r\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "newval",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets a new value at a specified index\r\n * @link http:\/\/php.net\/splfixedarray.offsetset.php\r\n * @param int $index <p>\r\n * The index being set.\r\n * <\/p>\r\n * @param mixed $newval <p>\r\n * The new value for the <i>index<\/i>.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Unsets the value at the specified $index\r\n * @link http:\/\/php.net\/splfixedarray.offsetunset.php\r\n * @param int $index <p>\r\n * The index being unset.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewind iterator back to the start\r\n * @link http:\/\/php.net\/splfixedarray.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current array entry\r\n * @link http:\/\/php.net\/splfixedarray.current.php\r\n * @return mixed The current element value.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Return current array index\r\n * @link http:\/\/php.net\/splfixedarray.key.php\r\n * @return int The current array index.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Move to next entry\r\n * @link http:\/\/php.net\/splfixedarray.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Check whether the array contains more elements\r\n * @link http:\/\/php.net\/splfixedarray.valid.php\r\n * @return bool <b>TRUE<\/b> if the array contains any more elements, <b>FALSE<\/b> otherwise.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "SplObjectStorage",
        "fqn": "\\SplObjectStorage",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "attach",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Adds an object in the storage\r\n * @link http:\/\/php.net\/splobjectstorage.attach.php\r\n * @param object $object <p>\r\n * The object to add.\r\n * <\/p>\r\n * @param mixed $data [optional] <p>\r\n * The data to associate with the object.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "detach",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Removes an object from the storage\r\n * @link http:\/\/php.net\/splobjectstorage.detach.php\r\n * @param object $object <p>\r\n * The object to remove.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "contains",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Checks if the storage contains a specific object\r\n * @link http:\/\/php.net\/splobjectstorage.contains.php\r\n * @param object $object <p>\r\n * The object to look for.\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> if the object is in the storage, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "addAll",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "storage",
                        "type": "SplObjectStorage",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Adds all objects from another storage\r\n * @link http:\/\/php.net\/splobjectstorage.addall.php\r\n * @param SplObjectStorage $storage <p>\r\n * The storage you want to import.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "removeAll",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "storage",
                        "type": "SplObjectStorage",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Removes objects contained in another storage from the current storage\r\n * @link http:\/\/php.net\/splobjectstorage.removeall.php\r\n * @param SplObjectStorage $storage <p>\r\n * The storage containing the elements to remove.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "removeAllExcept",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "storage",
                        "type": "SplObjectStorage",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.6)<br\/>\r\n * Removes all objects except for those contained in another storage from the current storage\r\n * @link http:\/\/php.net\/splobjectstorage.removeallexcept.php\r\n * @param SplObjectStorage $storage <p>\r\n * The storage containing the elements to retain in the current storage.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getInfo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns the data associated with the current iterator entry\r\n * @link http:\/\/php.net\/splobjectstorage.getinfo.php\r\n * @return mixed The data associated with the current iterator position.\r\n *\/"
            },
            {
                "name": "setInfo",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets the data associated with the current iterator entry\r\n * @link http:\/\/php.net\/splobjectstorage.setinfo.php\r\n * @param mixed $data <p>\r\n * The data to associate with the current iterator entry.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "getHash",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.4.0)<br\/>\r\n * Calculate a unique identifier for the contained objects\r\n * @link http:\/\/php.net\/splobjectstorage.gethash.php\r\n * @param object $object <p>\r\n * The object whose identifier is to be calculated.\r\n * <\/p>\r\n * @return string A string with the calculated identifier.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Returns the number of objects in the storage\r\n * @link http:\/\/php.net\/splobjectstorage.count.php\r\n * @return int The number of objects in the storage.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Rewind the iterator to the first storage element\r\n * @link http:\/\/php.net\/splobjectstorage.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Returns if the current iterator entry is valid\r\n * @link http:\/\/php.net\/splobjectstorage.valid.php\r\n * @return bool <b>TRUE<\/b> if the iterator entry is valid, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Returns the index at which the iterator currently is\r\n * @link http:\/\/php.net\/splobjectstorage.key.php\r\n * @return int The index corresponding to the position of the iterator.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Returns the current storage entry\r\n * @link http:\/\/php.net\/splobjectstorage.current.php\r\n * @return object The object at the current iterator position.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Move to the next entry\r\n * @link http:\/\/php.net\/splobjectstorage.next.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "unserialize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serialized",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Unserializes a storage from its string representation\r\n * @link http:\/\/php.net\/splobjectstorage.unserialize.php\r\n * @param string $serialized <p>\r\n * The serialized representation of a storage.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "serialize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.2.2)<br\/>\r\n * Serializes the storage\r\n * @link http:\/\/php.net\/splobjectstorage.serialize.php\r\n * @return string A string representing the storage.\r\n *\/"
            },
            {
                "name": "offsetExists",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Checks whether an object exists in the storage\r\n * @link http:\/\/php.net\/splobjectstorage.offsetexists.php\r\n * @param object $object <p>\r\n * The object to look for.\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> if the object exists in the storage,\r\n * and <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "offsetSet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Associates data to an object in the storage\r\n * @link http:\/\/php.net\/splobjectstorage.offsetset.php\r\n * @param object $object <p>\r\n * The object to associate data with.\r\n * <\/p>\r\n * @param mixed $data [optional] <p>\r\n * The data to associate with the object.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetUnset",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Removes an object from the storage\r\n * @link http:\/\/php.net\/splobjectstorage.offsetunset.php\r\n * @param object $object <p>\r\n * The object to remove.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "offsetGet",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "object",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns the data associated with an object\r\n * @link http:\/\/php.net\/splobjectstorage.offsetget.php\r\n * @param object $object <p>\r\n * The object to look for.\r\n * <\/p>\r\n * @return mixed The data previously associated with the object in the storage.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MultipleIterator",
        "fqn": "\\MultipleIterator",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Constructs a new MultipleIterator\r\n * @link http:\/\/php.net\/multipleiterator.construct.php\r\n * @param $flags\r\n *\/"
            },
            {
                "name": "getFlags",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Gets the flag information\r\n * @link http:\/\/php.net\/multipleiterator.getflags.php\r\n * @return void Information about the flags, as an integer.\r\n *\/"
            },
            {
                "name": "setFlags",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flags",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Sets flags\r\n * @link http:\/\/php.net\/multipleiterator.setflags.php\r\n * @param int $flags <p>\r\n * The flags to set, according to the\r\n * Flag Constants\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "attachIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "infos",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Attaches iterator information\r\n * @link http:\/\/php.net\/multipleiterator.attachiterator.php\r\n * @param Iterator $iterator <p>\r\n * The new iterator to attach.\r\n * <\/p>\r\n * @param string $infos [optional] <p>\r\n * The associative information for the Iterator, which must be an\r\n * integer, a string, or <b>NULL<\/b>.\r\n * <\/p>\r\n * @return void Description...\r\n *\/"
            },
            {
                "name": "detachIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Detaches an iterator\r\n * @link http:\/\/php.net\/multipleiterator.detachiterator.php\r\n * @param Iterator $iterator <p>\r\n * The iterator to detach.\r\n * <\/p>\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "containsIterator",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "iterator",
                        "type": "Iterator",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Checks if an iterator is attached\r\n * @link http:\/\/php.net\/multipleiterator.containsiterator.php\r\n * @param Iterator $iterator <p>\r\n * The iterator to check.\r\n * <\/p>\r\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "countIterators",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Gets the number of attached iterator instances\r\n * @link http:\/\/php.net\/multipleiterator.countiterators.php\r\n * @return void The number of attached iterator instances (as an integer).\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Rewinds all attached iterator instances\r\n * @link http:\/\/php.net\/multipleiterator.rewind.php\r\n * @return void No value is returned.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Checks the validity of sub iterators\r\n * @link http:\/\/php.net\/multipleiterator.valid.php\r\n * @return void <b>TRUE<\/b> if one or all sub iterators are valid depending on flags,\r\n * otherwise <b>FALSE<\/b>\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Gets the registered iterator instances\r\n * @link http:\/\/php.net\/multipleiterator.key.php\r\n * @return array An array of all registered iterator instances,\r\n * or <b>FALSE<\/b> if no sub iterator is attached.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Gets the registered iterator instances\r\n * @link http:\/\/php.net\/multipleiterator.current.php\r\n * @return array An array containing the current values of each attached iterator,\r\n * or <b>FALSE<\/b> if no iterators are attached.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Moves all attached iterator instances forward\r\n * @link http:\/\/php.net\/multipleiterator.next.php\r\n * @return void No value is returned.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "MIT_NEED_ANY",
                "value": 0,
                "doc": null
            },
            {
                "name": "MIT_NEED_ALL",
                "value": 1,
                "doc": null
            },
            {
                "name": "MIT_KEYS_NUMERIC",
                "value": 0,
                "doc": null
            },
            {
                "name": "MIT_KEYS_ASSOC",
                "value": 2,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_classes",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload",
        "params": [
            {
                "name": "class_name",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "file_extensions",
                "type": null,
                "byRef": false,
                "default": "spl_autoload_extensions()"
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload_extensions",
        "params": [
            {
                "name": "file_extensions",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload_register",
        "params": [
            {
                "name": "autoload_function",
                "type": "callable",
                "byRef": false,
                "default": null
            },
            {
                "name": "throw",
                "type": null,
                "byRef": false,
                "default": null
            },
            {
                "name": "prepend",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload_unregister",
        "params": [
            {
                "name": "autoload_function",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload_functions",
        "params": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_autoload_call",
        "params": [
            {
                "name": "class_name",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "class_parents",
        "params": [
            {
                "name": "class",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "autoload",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "class_implements",
        "params": [
            {
                "name": "class",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "autoload",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "class_uses",
        "params": [
            {
                "name": "class",
                "type": null,
                "byRef": false,
                "default": ""
            },
            {
                "name": "autoload",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "spl_object_hash",
        "params": [
            {
                "name": "obj",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "iterator_to_array",
        "params": [
            {
                "name": "iterator",
                "type": "Traversable",
                "byRef": false,
                "default": ""
            },
            {
                "name": "use_keys",
                "type": null,
                "byRef": false,
                "default": null
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "iterator_count",
        "params": [
            {
                "name": "iterator",
                "type": "Traversable",
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "iterator_apply",
        "params": [
            {
                "name": "iterator",
                "type": "Traversable",
                "byRef": false,
                "default": ""
            },
            {
                "name": "function",
                "type": "callable",
                "byRef": false,
                "default": ""
            },
            {
                "name": "args",
                "type": "array",
                "byRef": false,
                "default": null
            }
        ]
    }
]
