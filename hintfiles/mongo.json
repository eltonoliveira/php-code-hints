[
    {
        "stmtType": "Class",
        "name": "MongoClient",
        "fqn": "\\MongoClient",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serverarray",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Creates a new database connection object\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.construct.php\r\n * @param $server [optional]\r\n * @param $options [optional]\r\n *\/"
            },
            {
                "name": "getConnections",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Return info about all open connections\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.getconnections.php\r\n * @return array An array of open connections.\r\n *\/"
            },
            {
                "name": "connect",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Connects to a database server\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.connect.php\r\n * @return bool If the connection was successful.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * String representation of this connection\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.tostring.php\r\n * @return string hostname and port for this connection.\r\n *\/"
            },
            {
                "name": "__get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dbname",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=1.0.2)<br\/>\r\n * Gets a database\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.get.php\r\n * @param string $dbname <p>\r\n * The database name.\r\n * <\/p>\r\n * @return MongoDB a new db object.\r\n *\/"
            },
            {
                "name": "selectDB",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Gets a database\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.selectdb.php\r\n * @param string $name <p>\r\n * The database name.\r\n * <\/p>\r\n * @return MongoDB a new database object.\r\n *\/"
            },
            {
                "name": "selectCollection",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "db",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "collection",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Gets a database collection\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.selectcollection.php\r\n * @param string $db <p>\r\n * The database name.\r\n * <\/p>\r\n * @param string $collection <p>\r\n * The collection name.\r\n * <\/p>\r\n * @return MongoCollection a new collection object.\r\n *\/"
            },
            {
                "name": "getReadPreference",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Get the read preference for this connection\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.getreadpreference.php\r\n * @return array\r\n *\/"
            },
            {
                "name": "setReadPreference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "read_preference",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "tags",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Set the read preference for this connection\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.setreadpreference.php\r\n * @param string $read_preference\r\n * @param array $tags [optional]\r\n * @return bool\r\n *\/"
            },
            {
                "name": "dropDB",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "db",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Drops a database [deprecated]\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.dropdb.php\r\n * @param mixed $db <p>\r\n * The database to drop. Can be a MongoDB object or the name of the database.\r\n * <\/p>\r\n * @return array the database response.\r\n *\/"
            },
            {
                "name": "listDBs",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=1.0.4)<br\/>\r\n * Lists all of the databases available.\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.listdbs.php\r\n * @return array an associative array containing three fields. The first field is\r\n * databases, which in turn contains an array. Each element\r\n * of the array is an associative array corresponding to a database, giving th\r\n * database's name, size, and if it's empty. The other two fields are\r\n * totalSize (in bytes) and ok, which is 1\r\n * if this method ran successfully.\r\n *\/"
            },
            {
                "name": "getHosts",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=1.1.0)<br\/>\r\n * Updates status for all associated hosts\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.gethosts.php\r\n * @return array an array of information about the hosts in the set. Includes each\r\n * host's hostname, its health (1 is healthy), its state (1 is primary, 2 is\r\n * secondary, 0 is anything else), the amount of time it took to ping the\r\n * server, and when the last ping occurred. For example, on a three-member\r\n * replica set, it might look something like:\r\n *\/"
            },
            {
                "name": "close",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "connection",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Closes this connection\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.close.php\r\n * @param boolean|string $connection [optional] <p>\r\n * If connection is not given, or <b>FALSE<\/b> then connection that would be\r\n * selected for writes would be closed. In a single-node configuration,\r\n * that is then the whole connection, but if you are connected to a\r\n * replica set, close() will only close the\r\n * connection to the primary server.\r\n * <\/p>\r\n * <p>\r\n * If connection is <b>TRUE<\/b> then all connections as known by the connection\r\n * manager will be closed. This can include connections that are not\r\n * referenced in the connection string used to create the object that\r\n * you are calling close on.\r\n * <\/p>\r\n * <p>\r\n * If connection is a string argument, then it will only close the\r\n * connection identified by this hash. Hashes are identifiers for a\r\n * connection and can be obtained by calling\r\n * <b>MongoClient::getConnections<\/b>.\r\n * <\/p>\r\n * @return bool if the connection was successfully closed.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "connected",
                "doc": "\/**\r\n * @var boolean\r\n *\/"
            },
            {
                "name": "status",
                "doc": "\/**\r\n * @var string\r\n *\/"
            },
            {
                "name": "server",
                "doc": "\/**\r\n * @var string\r\n *\/"
            },
            {
                "name": "persistent",
                "doc": "\/**\r\n * @var boolean\r\n *\/"
            }
        ],
        "constants": [
            {
                "name": "DEFAULT_HOST",
                "value": "localhost",
                "doc": null
            },
            {
                "name": "DEFAULT_PORT",
                "value": 27017,
                "doc": null
            },
            {
                "name": "VERSION",
                "value": "1.4.5",
                "doc": null
            },
            {
                "name": "RP_PRIMARY",
                "value": "primary",
                "doc": null
            },
            {
                "name": "RP_PRIMARY_PREFERRED",
                "value": "primaryPreferred",
                "doc": null
            },
            {
                "name": "RP_SECONDARY",
                "value": "secondary",
                "doc": null
            },
            {
                "name": "RP_SECONDARY_PREFERRED",
                "value": "secondaryPreferred",
                "doc": null
            },
            {
                "name": "RP_NEAREST",
                "value": "nearest",
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "Mongo",
        "fqn": "\\Mongo",
        "type": 0,
        "extends": "MongoClient",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "serverarray",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * The __construct purpose\r\n * @link http:\/\/php.net\/manual\/en\/mongo.construct.php\r\n * @param $server [optional]\r\n * @param $options [optional]\r\n *\/"
            },
            {
                "name": "connectUtil",
                "type": 2,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Connects with a database server\r\n * @link http:\/\/php.net\/manual\/en\/mongo.connectutil.php\r\n * @return bool If the connection was successful.\r\n *\/"
            },
            {
                "name": "getSlaveOkay",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.1.0)<br\/>\r\n * Get slaveOkay setting for this connection\r\n * @link http:\/\/php.net\/manual\/en\/mongo.getslaveokay.php\r\n * @return bool the value of slaveOkay for this instance.\r\n *\/"
            },
            {
                "name": "setSlaveOkay",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ok",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.1.0)<br\/>\r\n * Change slaveOkay setting for this connection\r\n * @link http:\/\/php.net\/manual\/en\/mongo.setslaveokay.php\r\n * @param bool $ok [optional] <p>\r\n * If reads should be sent to secondary members of a replica set for all\r\n * possible queries using this <b>MongoClient<\/b> instance.\r\n * <\/p>\r\n * @return bool the former value of slaveOkay for this instance.\r\n *\/"
            },
            {
                "name": "lastError",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "prevError",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "resetError",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "forceError",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": null
            },
            {
                "name": "getSlave",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.1.0)<br\/>\r\n * Returns the address being used by this for slaveOkay reads\r\n * @link http:\/\/php.net\/manual\/en\/mongo.getslave.php\r\n * @return string The address of the secondary this connection is using for reads.\r\n * <\/p>\r\n * <p>\r\n * This returns <b>NULL<\/b> if this is not connected to a replica set or not yet\r\n * initialized.\r\n *\/"
            },
            {
                "name": "switchSlave",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.1.0)<br\/>\r\n * Choose a new secondary for slaveOkay reads\r\n * @link http:\/\/php.net\/manual\/en\/mongo.switchslave.php\r\n * @return string The address of the secondary this connection is using for reads. This may be\r\n * the same as the previous address as addresses are randomly chosen. It may\r\n * return only one address if only one secondary (or only the primary) is\r\n * available.\r\n * <\/p>\r\n * <p>\r\n * For example, if we had a three member replica set with a primary, secondary,\r\n * and arbiter this method would always return the address of the secondary.\r\n * If the secondary became unavailable, this method would always return the\r\n * address of the primary. If the primary also became unavailable, this method\r\n * would throw an exception, as an arbiter cannot handle reads.\r\n *\/"
            },
            {
                "name": "setPoolSize",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.0)<br\/>\r\n * Set the size for future connection pools.\r\n * @link http:\/\/php.net\/manual\/en\/mongo.setpoolsize.php\r\n * @param int $size <p>\r\n * The max number of connections future pools will be able to create.\r\n * Negative numbers mean that the pool will spawn an infinite number of\r\n * connections.\r\n * <\/p>\r\n * @return bool the former value of pool size.\r\n *\/"
            },
            {
                "name": "getPoolSize",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.0)<br\/>\r\n * Get pool size for connection pools\r\n * @link http:\/\/php.net\/manual\/en\/mongo.getpoolsize.php\r\n * @return int the current pool size.\r\n *\/"
            },
            {
                "name": "poolDebug",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.0)<br\/>\r\n * Returns information about all connection pools.\r\n * @link http:\/\/php.net\/manual\/en\/mongo.pooldebug.php\r\n * @return array Each connection pool has an identifier, which starts with the host. For each\r\n * pool, this function shows the following fields:\r\n * <i>in use<\/i>\r\n * <p>\r\n * The number of connections currently being used by\r\n * <b>MongoClient<\/b> instances.\r\n * <\/p>\r\n * <i>in pool<\/i>\r\n * <p>\r\n * The number of connections currently in the pool (not being used).\r\n * <\/p>\r\n * <i>remaining<\/i>\r\n * <p>\r\n * The number of connections that could be created by this pool. For\r\n * example, suppose a pool had 5 connections remaining and 3 connections in\r\n * the pool. We could create 8 new instances of\r\n * <b>MongoClient<\/b> before we exhausted this pool\r\n * (assuming no instances of <b>MongoClient<\/b> went out of\r\n * scope, returning their connections to the pool).\r\n * <\/p>\r\n * <p>\r\n * A negative number means that this pool will spawn unlimited connections.\r\n * <\/p>\r\n * <p>\r\n * Before a pool is created, you can change the max number of connections by\r\n * calling <b>Mongo::setPoolSize<\/b>. Once a pool is showing\r\n * up in the output of this function, its size cannot be changed.\r\n * <\/p>\r\n * <i>timeout<\/i>\r\n * <p>\r\n * The socket timeout for connections in this pool. This is how long\r\n * connections in this pool will attempt to connect to a server before\r\n * giving up.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "getConnections",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Return info about all open connections\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.getconnections.php\r\n * @return array An array of open connections.\r\n *\/"
            },
            {
                "name": "connect",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Connects to a database server\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.connect.php\r\n * @return bool If the connection was successful.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * String representation of this connection\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.tostring.php\r\n * @return string hostname and port for this connection.\r\n *\/"
            },
            {
                "name": "__get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "dbname",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=1.0.2)<br\/>\r\n * Gets a database\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.get.php\r\n * @param string $dbname <p>\r\n * The database name.\r\n * <\/p>\r\n * @return MongoDB a new db object.\r\n *\/"
            },
            {
                "name": "selectDB",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Gets a database\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.selectdb.php\r\n * @param string $name <p>\r\n * The database name.\r\n * <\/p>\r\n * @return MongoDB a new database object.\r\n *\/"
            },
            {
                "name": "selectCollection",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "db",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "collection",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Gets a database collection\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.selectcollection.php\r\n * @param string $db <p>\r\n * The database name.\r\n * <\/p>\r\n * @param string $collection <p>\r\n * The collection name.\r\n * <\/p>\r\n * @return MongoCollection a new collection object.\r\n *\/"
            },
            {
                "name": "getReadPreference",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Get the read preference for this connection\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.getreadpreference.php\r\n * @return array\r\n *\/"
            },
            {
                "name": "setReadPreference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "read_preference",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "tags",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Set the read preference for this connection\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.setreadpreference.php\r\n * @param string $read_preference\r\n * @param array $tags [optional]\r\n * @return bool\r\n *\/"
            },
            {
                "name": "dropDB",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "db",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Drops a database [deprecated]\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.dropdb.php\r\n * @param mixed $db <p>\r\n * The database to drop. Can be a MongoDB object or the name of the database.\r\n * <\/p>\r\n * @return array the database response.\r\n *\/"
            },
            {
                "name": "listDBs",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=1.0.4)<br\/>\r\n * Lists all of the databases available.\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.listdbs.php\r\n * @return array an associative array containing three fields. The first field is\r\n * databases, which in turn contains an array. Each element\r\n * of the array is an associative array corresponding to a database, giving th\r\n * database's name, size, and if it's empty. The other two fields are\r\n * totalSize (in bytes) and ok, which is 1\r\n * if this method ran successfully.\r\n *\/"
            },
            {
                "name": "getHosts",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=1.1.0)<br\/>\r\n * Updates status for all associated hosts\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.gethosts.php\r\n * @return array an array of information about the hosts in the set. Includes each\r\n * host's hostname, its health (1 is healthy), its state (1 is primary, 2 is\r\n * secondary, 0 is anything else), the amount of time it took to ping the\r\n * server, and when the last ping occurred. For example, on a three-member\r\n * replica set, it might look something like:\r\n *\/"
            },
            {
                "name": "close",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "connection",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongoclient &gt;=0.9.0)<br\/>\r\n * Closes this connection\r\n * @link http:\/\/php.net\/manual\/en\/mongoclient.close.php\r\n * @param boolean|string $connection [optional] <p>\r\n * If connection is not given, or <b>FALSE<\/b> then connection that would be\r\n * selected for writes would be closed. In a single-node configuration,\r\n * that is then the whole connection, but if you are connected to a\r\n * replica set, close() will only close the\r\n * connection to the primary server.\r\n * <\/p>\r\n * <p>\r\n * If connection is <b>TRUE<\/b> then all connections as known by the connection\r\n * manager will be closed. This can include connections that are not\r\n * referenced in the connection string used to create the object that\r\n * you are calling close on.\r\n * <\/p>\r\n * <p>\r\n * If connection is a string argument, then it will only close the\r\n * connection identified by this hash. Hashes are identifiers for a\r\n * connection and can be obtained by calling\r\n * <b>MongoClient::getConnections<\/b>.\r\n * <\/p>\r\n * @return bool if the connection was successfully closed.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "connected",
                "doc": "\/**\r\n * @var boolean\r\n *\/"
            },
            {
                "name": "status",
                "doc": "\/**\r\n * @var string\r\n *\/"
            },
            {
                "name": "server",
                "doc": "\/**\r\n * @var string\r\n *\/"
            },
            {
                "name": "persistent",
                "doc": "\/**\r\n * @var boolean\r\n *\/"
            }
        ],
        "constants": [
            {
                "name": "DEFAULT_HOST",
                "value": "localhost",
                "doc": null
            },
            {
                "name": "DEFAULT_PORT",
                "value": 27017,
                "doc": null
            },
            {
                "name": "VERSION",
                "value": "1.4.5",
                "doc": null
            },
            {
                "name": "RP_PRIMARY",
                "value": "primary",
                "doc": null
            },
            {
                "name": "RP_PRIMARY_PREFERRED",
                "value": "primaryPreferred",
                "doc": null
            },
            {
                "name": "RP_SECONDARY",
                "value": "secondary",
                "doc": null
            },
            {
                "name": "RP_SECONDARY_PREFERRED",
                "value": "secondaryPreferred",
                "doc": null
            },
            {
                "name": "RP_NEAREST",
                "value": "nearest",
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoDB",
        "fqn": "\\MongoDB",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "conn",
                        "type": "MongoClient",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Creates a new database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.construct.php\r\n * @param MongoClient $conn <p>\r\n * Database connection.\r\n * <\/p>\r\n * @param string $name <p>\r\n * Database name.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * The name of this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.--tostring.php\r\n * @return string this database&#x00027;s name.\r\n *\/"
            },
            {
                "name": "__get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.2)<br\/>\r\n * Gets a collection\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.get.php\r\n * @param string $name <p>\r\n * The name of the collection.\r\n * <\/p>\r\n * @return MongoCollection the collection.\r\n *\/"
            },
            {
                "name": "getGridFS",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": "&quot;fs&quot;"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Fetches toolkit for dealing with files stored in this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.getgridfs.php\r\n * @param string $prefix [optional] <p>\r\n * The prefix for the files and chunks collections.\r\n * <\/p>\r\n * @return MongoGridFS a new gridfs object for this database.\r\n *\/"
            },
            {
                "name": "getSlaveOkay",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.1.0)<br\/>\r\n * Get slaveOkay setting for this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.getslaveokay.php\r\n * @return bool the value of slaveOkay for this instance.\r\n *\/"
            },
            {
                "name": "setSlaveOkay",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ok",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.1.0)<br\/>\r\n * Change slaveOkay setting for this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.setslaveokay.php\r\n * @param bool $ok [optional] <p>\r\n * If reads should be sent to secondary members of a replica set for all\r\n * possible queries using this <b>MongoDB<\/b> instance.\r\n * <\/p>\r\n * @return bool the former value of slaveOkay for this instance.\r\n *\/"
            },
            {
                "name": "getReadPreference",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Get the read preference for this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.getreadpreference.php\r\n * @return array\r\n *\/"
            },
            {
                "name": "setReadPreference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "read_preference",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "tags",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Set the read preference for this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.setreadpreference.php\r\n * @param string $read_preference\r\n * @param array $tags [optional]\r\n * @return bool\r\n *\/"
            },
            {
                "name": "getProfilingLevel",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Gets this database&#x00027;s profiling level\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.getprofilinglevel.php\r\n * @return int the profiling level.\r\n *\/"
            },
            {
                "name": "setProfilingLevel",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "level",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Sets this database&#x00027;s profiling level\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.setprofilinglevel.php\r\n * @param int $level <p>\r\n * Profiling level.\r\n * <\/p>\r\n * @return int the previous profiling level.\r\n *\/"
            },
            {
                "name": "drop",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Drops this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.drop.php\r\n * @return array the database response.\r\n *\/"
            },
            {
                "name": "repair",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "preserve_cloned_files",
                        "type": null,
                        "byRef": false,
                        "default": "&false;"
                    },
                    {
                        "name": "backup_original_files",
                        "type": null,
                        "byRef": false,
                        "default": "&false;"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Repairs and compacts this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.repair.php\r\n * @param bool $preserve_cloned_files [optional] <p>\r\n * If cloned files should be kept if the repair fails.\r\n * <\/p>\r\n * @param bool $backup_original_files [optional] <p>\r\n * If original files should be backed up.\r\n * <\/p>\r\n * @return array db response.\r\n *\/"
            },
            {
                "name": "selectCollection",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Gets a collection\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.selectcollection.php\r\n * @param string $name <p>\r\n * The collection name.\r\n * <\/p>\r\n * @return MongoCollection a new collection object.\r\n *\/"
            },
            {
                "name": "createCollection",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Creates a collection\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.createcollection.php\r\n * @param string $name <p>\r\n * The name of the collection.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * An array containing options for the collections. Each option is its own\r\n * element in the options array, with the option name listed below being\r\n * the key of the element. The supported options depend on the MongoDB\r\n * server version. At the moment, the following options are supported:\r\n * <\/p>\r\n * <p>\r\n * <i>capped<\/i>\r\n * <p>\r\n * If the collection should be a fixed size.\r\n * <\/p>\r\n * @return MongoCollection a collection object representing the new collection.\r\n *\/"
            },
            {
                "name": "dropCollection",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "coll",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Drops a collection [deprecated]\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.dropcollection.php\r\n * @param mixed $coll <p>\r\n * MongoCollection or name of collection to drop.\r\n * <\/p>\r\n * @return array the database response.\r\n *\/"
            },
            {
                "name": "listCollections",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "includeSystemCollections",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Gets an array of all MongoCollections for this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.listcollections.php\r\n * @param bool $includeSystemCollections [optional] <p>\r\n * Include system collections.\r\n * <\/p>\r\n * @return array an array of MongoCollection objects.\r\n *\/"
            },
            {
                "name": "getCollectionNames",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "includeSystemCollections",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Get all collections from this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.getcollectionnames.php\r\n * @param bool $includeSystemCollections [optional] <p>\r\n * Include system collections.\r\n * <\/p>\r\n * @return array the names of the all the collections in the database as an array.\r\n *\/"
            },
            {
                "name": "createDBRef",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "collection",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "document_or_id",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Creates a database reference\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.createdbref.php\r\n * @param string $collection <p>\r\n * The collection to which the database reference will point.\r\n * <\/p>\r\n * @param mixed $document_or_id <p>\r\n * If an array or object is given, its _id field will be\r\n * used as the reference ID. If a <b>MongoId<\/b> or scalar\r\n * is given, it will be used as the reference ID.\r\n * <\/p>\r\n * @return array a database reference array.\r\n * <\/p>\r\n * <p>\r\n * If an array without an _id field was provided as the\r\n * document_or_id parameter, <b>NULL<\/b> will be returned.\r\n *\/"
            },
            {
                "name": "getDBRef",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ref",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Fetches the document pointed to by a database reference\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.getdbref.php\r\n * @param array $ref <p>\r\n * A database reference.\r\n * <\/p>\r\n * @return array the document pointed to by the reference.\r\n *\/"
            },
            {
                "name": "execute",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "args",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.3)<br\/>\r\n * Runs JavaScript code on the database server.\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.execute.php\r\n * @param mixed $code <p>\r\n * <b>MongoCode<\/b> or string to execute.\r\n * <\/p>\r\n * @param array $args [optional] <p>\r\n * Arguments to be passed to code.\r\n * <\/p>\r\n * @return array the result of the evaluation.\r\n *\/"
            },
            {
                "name": "command",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "command",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.2)<br\/>\r\n * Execute a database command\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.command.php\r\n * @param array $command <p>\r\n * The query to send.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * This parameter is an associative array of the form\r\n * array(\"optionname\" => &lt;boolean&gt;, ...). Currently\r\n * supported options are:\r\n * <p>\"timeout\"<\/p><p>Integer, defaults to MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a <b>MongoCursorTimeoutException<\/b> will be thrown.<\/p>\r\n * <\/p>\r\n * @return array database response. Every database response is always maximum one\r\n * document, which means that the result of a database command can never\r\n * exceed 16MB. The resulting document's structure depends on the command, but\r\n * most results will have the ok field to indicate success\r\n * or failure and results containing an array of each of\r\n * the resulting documents.\r\n *\/"
            },
            {
                "name": "lastError",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.5)<br\/>\r\n * Check if there was an error on the most recent db operation performed\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.lasterror.php\r\n * @return array the error, if there was one.\r\n *\/"
            },
            {
                "name": "prevError",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.5)<br\/>\r\n * Checks for the last error thrown during a database operation\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.preverror.php\r\n * @return array the error and the number of operations ago it occurred.\r\n *\/"
            },
            {
                "name": "resetError",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.5)<br\/>\r\n * Clears any flagged errors on the database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.reseterror.php\r\n * @return array the database response.\r\n *\/"
            },
            {
                "name": "forceError",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.5)<br\/>\r\n * Creates a database error\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.forceerror.php\r\n * @return bool the database response.\r\n *\/"
            },
            {
                "name": "authenticate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "username",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "password",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.1)<br\/>\r\n * Log in to this database\r\n * @link http:\/\/php.net\/manual\/en\/mongodb.authenticate.php\r\n * @param string $username <p>\r\n * The username.\r\n * <\/p>\r\n * @param string $password <p>\r\n * The password (in plaintext).\r\n * <\/p>\r\n * @return array database response. If the login was successful, it will return\r\n * <code>\r\n * array(\"ok\" => 1);\r\n * <\/code>\r\n * If something went wrong, it will return\r\n * <code>\r\n * array(\"ok\" => 0, \"errmsg\" => \"auth fails\");\r\n * <\/code>\r\n * (\"auth fails\" could be another message, depending on database version and what\r\n * when wrong).\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "w",
                "doc": "\/**\r\n * @var integer\r\n *\/"
            },
            {
                "name": "wtimeout",
                "doc": "\/**\r\n * @var integer\r\n *\/"
            }
        ],
        "constants": [
            {
                "name": "PROFILING_OFF",
                "value": 0,
                "doc": null
            },
            {
                "name": "PROFILING_SLOW",
                "value": 1,
                "doc": null
            },
            {
                "name": "PROFILING_ON",
                "value": 2,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoCollection",
        "fqn": "\\MongoCollection",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "db",
                        "type": "MongoDB",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Creates a new collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.construct.php\r\n * @param MongoDB $db <p>\r\n * Parent database.\r\n * <\/p>\r\n * @param string $name <p>\r\n * Name for this collection.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * String representation of this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.--tostring.php\r\n * @return string the full name of this collection.\r\n *\/"
            },
            {
                "name": "__get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.2)<br\/>\r\n * Gets a collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.get.php\r\n * @param string $name <p>\r\n * The next string in the collection name.\r\n * <\/p>\r\n * @return MongoCollection the collection.\r\n *\/"
            },
            {
                "name": "getName",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns this collection&#x00027;s name\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.getname.php\r\n * @return string the name of this collection.\r\n *\/"
            },
            {
                "name": "getSlaveOkay",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.1.0)<br\/>\r\n * Get slaveOkay setting for this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.getslaveokay.php\r\n * @return bool the value of slaveOkay for this instance.\r\n *\/"
            },
            {
                "name": "setSlaveOkay",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ok",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.1.0)<br\/>\r\n * Change slaveOkay setting for this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.setslaveokay.php\r\n * @param bool $ok [optional] <p>\r\n * If reads should be sent to secondary members of a replica set for all\r\n * possible queries using this <b>MongoCollection<\/b>\r\n * instance.\r\n * <\/p>\r\n * @return bool the former value of slaveOkay for this instance.\r\n *\/"
            },
            {
                "name": "getReadPreference",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Get the read preference for this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.getreadpreference.php\r\n * @return array\r\n *\/"
            },
            {
                "name": "setReadPreference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "read_preference",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "tags",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Set the read preference for this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.setreadpreference.php\r\n * @param string $read_preference\r\n * @param array $tags [optional]\r\n * @return bool\r\n *\/"
            },
            {
                "name": "drop",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Drops this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.drop.php\r\n * @return array the database response.\r\n *\/"
            },
            {
                "name": "validate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "scan_data",
                        "type": null,
                        "byRef": false,
                        "default": "&false;"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Validates this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.validate.php\r\n * @param bool $scan_data [optional] <p>\r\n * Only validate indices, not the base collection.\r\n * <\/p>\r\n * @return array the database&#x00027;s evaluation of this object.\r\n *\/"
            },
            {
                "name": "insert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "a",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Inserts a document into the collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.insert.php\r\n * @param array|object $a <p>\r\n * An array or object. If an object is used, it may not have protected or\r\n * private properties.\r\n * <\/p>\r\n * <p>\r\n * If the parameter does not have an _id key or\r\n * property, a new <b>MongoId<\/b> instance will be created\r\n * and assigned to it. This special behavior does not mean that the\r\n * parameter is passed by reference.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * Options for the insert.\r\n * <p>\"fsync\"<\/p><p>Boolean, defaults to <b>FALSE<\/b>. If journalling is enabled, it works exactly like \"j\". If journalling is not enabled, it forces the insert to be synced to disk before returning success. If <b>TRUE<\/b>, an acknowledged insert is implied and will override setting w to 0.<\/p><p>This option is deprecated. Please use the \"j\" option instead.<\/p>\r\n * <p>\"j\"<\/p><p>Boolean, defaults to <b>FALSE<\/b>. Forces the insert to be synced to the journal before returning success. If <b>TRUE<\/b>, an acknowledged insert is implied and will override setting w to 0.<\/p>\r\n * <p>\"w\"<\/p><p>See WriteConcerns. The default value for <b>MongoClient<\/b> is 1.<\/p>\r\n * <p>\"wtimeout\"<\/p><p>How long to wait for WriteConcern acknowledgement. The default value for <b>MongoClient<\/b> is 10000 milliseconds.<\/p>\r\n * <p>\"safe\"<\/p><p>Deprecated. Please use the WriteConcern w option.<\/p>\r\n * <p>\"timeout\"<\/p><p>Integer, defaults to MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a <b>MongoCursorTimeoutException<\/b> will be thrown.<\/p>\r\n * <\/p>\r\n * @return bool|array an array containing the status of the insertion if the\r\n * \"w\" option is set. Otherwise, returns <b>TRUE<\/b> if the\r\n * inserted array is not empty (a <b>MongoException<\/b> will be\r\n * thrown if the inserted array is empty).\r\n * <\/p>\r\n * <p>\r\n * If an array is returned, the following keys may be present:\r\n * <i>ok<\/i>\r\n * <p>\r\n * This should almost always be 1 (unless last_error itself failed).\r\n * <\/p>\r\n * <i>err<\/i>\r\n * <p>\r\n * If this field is non-null, an error occurred on the previous operation.\r\n * If this field is set, it will be a string describing the error that\r\n * occurred.\r\n * <\/p>\r\n * <i>code<\/i>\r\n * <p>\r\n * If a database error occurred, the relevant error code will be passed\r\n * back to the client.\r\n * <\/p>\r\n * <i>errmsg<\/i>\r\n * <p>\r\n * This field is set if something goes wrong with a database command. It\r\n * is coupled with ok being 0. For example, if\r\n * w is set and times out, errmsg will be set to \"timed\r\n * out waiting for slaves\" and ok will be 0. If this\r\n * field is set, it will be a string describing the error that occurred.\r\n * <\/p>\r\n * <i>n<\/i>\r\n * <p>\r\n * If the last operation was an update, upsert, or a remove, the number\r\n * of documents affected will be returned. For insert operations, this value\r\n * is always 0.\r\n * <\/p>\r\n * <i>wtimeout<\/i>\r\n * <p>\r\n * If the previous option timed out waiting for replication.\r\n * <\/p>\r\n * <i>waited<\/i>\r\n * <p>\r\n * How long the operation waited before timing out.\r\n * <\/p>\r\n * <i>wtime<\/i>\r\n * <p>\r\n * If w was set and the operation succeeded, how long it took to\r\n * replicate to w servers.\r\n * <\/p>\r\n * <i>upserted<\/i>\r\n * <p>\r\n * If an upsert occurred, this field will contain the new record's\r\n * _id field. For upserts, either this field or\r\n * updatedExisting will be present (unless an error\r\n * occurred).\r\n * <\/p>\r\n * <i>updatedExisting<\/i>\r\n * <p>\r\n * If an upsert updated an existing element, this field will be true. For\r\n * upserts, either this field or upserted will be present (unless an error\r\n * occurred).\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "batchInsert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "a",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Inserts multiple documents into this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.batchinsert.php\r\n * @param array $a <p>\r\n * An array of arrays or objects. If any objects are used, they may not have\r\n * protected or private properties.\r\n * <\/p>\r\n * <p>\r\n * If the documents to insert do not have an _id key or\r\n * property, a new <b>MongoId<\/b> instance will be created\r\n * and assigned to it. See <b>MongoCollection::insert<\/b> for\r\n * additional information on this behavior.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * Options for the inserts.\r\n * <p>\r\n * \"continueOnError\"\r\n * <\/p>\r\n * <p>\r\n * Boolean, defaults to <b>FALSE<\/b>. If set, the database will not stop\r\n * processing a bulk insert if one fails (eg due to duplicate IDs).\r\n * This makes bulk insert behave similarly to a series of single\r\n * inserts, except that calling <b>MongoDB::lastError<\/b>\r\n * will have an error set if any insert fails, not just the last one.\r\n * If multiple errors occur, only the most recent will be reported by\r\n * <b>MongoDB::lastError<\/b>.\r\n * <\/p>\r\n * <p>\r\n * Please note that continueOnError affects errors\r\n * on the database side only. If you try to insert a document that has\r\n * errors (for example it contains a key with an empty name), then the\r\n * document is not even transferred to the database as the driver\r\n * detects this error and bails out.\r\n * continueOnError has no effect on errors detected\r\n * in the documents by the driver.\r\n * <\/p>\r\n * @return mixed If the w parameter is set to acknowledge the write,\r\n * returns an associative array with the status of the inserts (\"ok\") and any\r\n * error that may have occurred (\"err\"). Otherwise, returns <b>TRUE<\/b> if the\r\n * batch insert was successfully sent, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "update",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "criteria",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "new_object",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Update records based on a given criteria\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.update.php\r\n * @param array $criteria <p>\r\n * Description of the objects to update.\r\n * <\/p>\r\n * @param array $new_object <p>\r\n * The object with which to update the matching records.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * This parameter is an associative array of the form\r\n * array(\"optionname\" => &lt;boolean&gt;, ...). Currently\r\n * supported options are:\r\n * <p>\r\n * \"upsert\"\r\n * <\/p>\r\n * <p>\r\n * If no document matches <i>$criteria<\/i>, a new\r\n * document will be inserted.\r\n * <\/p>\r\n * <p>\r\n * If a new document would be inserted and\r\n * <i>$new_object<\/i> contains atomic modifiers\r\n * (i.e. $ operators), those operations will be\r\n * applied to the <i>$criteria<\/i> parameter to create\r\n * the new document. If <i>$new_object<\/i> does not\r\n * contain atomic modifiers, it will be used as-is for the inserted\r\n * document. See the upsert examples below for more information.\r\n * <\/p>\r\n * @return bool|array an array containing the status of the update if the\r\n * \"w\" option is set. Otherwise, returns <b>TRUE<\/b>.\r\n * <\/p>\r\n * <p>\r\n * Fields in the status array are described in the documentation for\r\n * <b>MongoCollection::insert<\/b>.\r\n *\/"
            },
            {
                "name": "remove",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "criteria",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Remove records from this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.remove.php\r\n * @param array $criteria [optional] <p>\r\n * Description of records to remove.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * Options for remove.\r\n * <p>\"w\"<\/p><p>See WriteConcerns. The default value for <b>MongoClient<\/b> is 1.<\/p>\r\n * <p>\r\n * \"justOne\"\r\n * <\/p>\r\n * <p>\r\n * Remove at most one record matching this criteria.\r\n * <\/p>\r\n * @return bool|array an array containing the status of the removal if the\r\n * \"w\" option is set. Otherwise, returns <b>TRUE<\/b>.\r\n * <\/p>\r\n * <p>\r\n * Fields in the status array are described in the documentation for\r\n * <b>MongoCollection::insert<\/b>.\r\n *\/"
            },
            {
                "name": "find",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n* (PECL mongo &gt;=0.9.0)<br\/>\r\n* Queries this collection, returning a <b>MongoCursor<\/b>\r\nfor the result set\r\n* @link http:\/\/php.net\/manual\/en\/mongocollection.find.php\r\n* @param array $query [optional] <p>\r\n* The fields for which to search. MongoDB's query language is quite\r\n* extensive. The PHP driver will in almost all cases pass the query\r\n* straight through to the server, so reading the MongoDB core docs on\r\n* find is a good idea.\r\n* <\/p>\r\n* <p>\r\n* Please make sure that for all special query operators (starting with\r\n* $) you use single quotes so that PHP doesn't try to\r\n* replace \"$exists\" with the value of the variable\r\n* $exists.\r\n* <\/p>\r\n* @param array $fields [optional] <p>\r\n* Fields of the results to return. The array is in the format\r\n* array('fieldname' => true, 'fieldname2' => true).\r\n* The _id field is always returned.\r\n* <\/p>\r\n* @return MongoCursor a cursor for the search results.\r\n*\/"
            },
            {
                "name": "findOne",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Queries this collection, returning a single element\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.findone.php\r\n * @param array $query [optional] <p>\r\n * The fields for which to search. MongoDB's query language is quite\r\n * extensive. The PHP driver will in almost all cases pass the query\r\n * straight through to the server, so reading the MongoDB core docs on\r\n * find is a good idea.\r\n * <\/p>\r\n * <p>\r\n * Please make sure that for all special query operaters (starting with\r\n * $) you use single quotes so that PHP doesn't try to\r\n * replace \"$exists\" with the value of the variable\r\n * $exists.\r\n * <\/p>\r\n * @param array $fields [optional] <p>\r\n * Fields of the results to return. The array is in the format\r\n * array('fieldname' => true, 'fieldname2' => true).\r\n * The _id field is always returned.\r\n * <\/p>\r\n * @return array record matching the search or <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "findAndModify",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "update",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Update a document and return it\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.findandmodify.php\r\n * @param array $query <p>\r\n * The query criteria to search for.\r\n * <\/p>\r\n * @param array $update [optional] <p>\r\n * The update criteria.\r\n * <\/p>\r\n * @param array $fields [optional] <p>\r\n * Optionally only return these fields.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * An array of options to apply, such as remove the match document from the\r\n * DB and return it.\r\n * <tr valign=\"top\">\r\n * <td>Option<\/td>\r\n * <td>Description<\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>sort array<\/td>\r\n * <td>\r\n * Determines which document the operation will modify if the\r\n * query selects multiple documents. findAndModify will modify the\r\n * first document in the sort order specified by this argument.\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>remove boolean<\/td>\r\n * <td>\r\n * Optional if update field exists. When <b>TRUE<\/b>, removes the selected\r\n * document. The default is <b>FALSE<\/b>.\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>update array<\/td>\r\n * <td>\r\n * Optional if remove field exists.\r\n * Performs an update of the selected document.\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>new boolean<\/td>\r\n * <td>\r\n * Optional. When <b>TRUE<\/b>, returns the modified document rather than the\r\n * original. The findAndModify method ignores the new option for\r\n * remove operations. The default is <b>FALSE<\/b>.\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>upsert boolean<\/td>\r\n * <td>\r\n * Optional. Used in conjunction with the update field. When <b>TRUE<\/b>, the\r\n * findAndModify command creates a new document if the query returns\r\n * no documents. The default is false. In MongoDB 2.2, the\r\n * findAndModify command returns <b>NULL<\/b> when upsert is <b>TRUE<\/b>.\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td><\/td>\r\n * <td>\r\n * <\/td>\r\n * <\/tr>\r\n * <\/p>\r\n * @return array the original document, or the modified document when\r\n * new is set.\r\n *\/"
            },
            {
                "name": "ensureIndex",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key_keys",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n* (PECL mongo &gt;=0.9.0)<br\/>\r\n* Creates an index on the given field(s), or does nothing if the index \r\nalready exists\r\n* @link http:\/\/php.net\/manual\/en\/mongocollection.ensureindex.php\r\n* @param string|array $key_keys\r\n* @param array $options [optional] <p>\r\n* This parameter is an associative array of the form\r\n* array(\"optionname\" => &lt;boolean&gt;, ...). Currently\r\n* supported options are:\r\n* <p>\"w\"<\/p><p>See WriteConcerns. The default value for <b>MongoClient<\/b> is 1.<\/p>\r\n* <p>\r\n* \"unique\"\r\n* <\/p>\r\n* <p>\r\n* Create a unique index.\r\n* <\/p>\r\n* <p>\r\n* A unique index cannot be created on a field if multiple existing\r\n* documents do not contain the field. The field is effectively <b>NULL<\/b>\r\n* for these documents and thus already non-unique. Sparse indexing may\r\n* be used to overcome this, since it will prevent documents without the\r\n* field from being indexed.\r\n* <\/p>\r\n* @return bool an array containing the status of the index creation if the\r\n* \"w\" option is set. Otherwise, returns <b>TRUE<\/b>.\r\n* <\/p>\r\n* <p>\r\n* Fields in the status array are described in the documentation for\r\n* <b>MongoCollection::insert<\/b>.\r\n*\/"
            },
            {
                "name": "deleteIndex",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "keys",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Deletes an index from this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.deleteindex.php\r\n * @param string|array $keys <p>\r\n * Field or fields from which to delete the index.\r\n * <\/p>\r\n * @return array the database response.\r\n *\/"
            },
            {
                "name": "deleteIndexes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Delete all indices for this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.deleteindexes.php\r\n * @return array the database response.\r\n *\/"
            },
            {
                "name": "getIndexInfo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns information about indexes on this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.getindexinfo.php\r\n * @return array This function returns an array in which each element describes an index.\r\n * Elements will contain the values name for the name of\r\n * the index, ns for the namespace (a combination of the\r\n * database and collection name), and key for a list of all\r\n * fields in the index and their ordering. Additional values may be present for\r\n * special indexes, such as unique or\r\n * sparse.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "limit",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    },
                    {
                        "name": "skip",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Counts the number of documents in this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.count.php\r\n * @param array $query [optional] <p>\r\n * Associative array or object with fields to match.\r\n * <\/p>\r\n * @param int $limit [optional] <p>\r\n * Specifies an upper limit to the number returned.\r\n * <\/p>\r\n * @param int $skip [optional] <p>\r\n * Specifies a number of results to skip before starting the count.\r\n * <\/p>\r\n * @return int the number of documents matching the query.\r\n *\/"
            },
            {
                "name": "save",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "a",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Saves a document to this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.save.php\r\n * @param array|object $a <p>\r\n * Array or object to save. If an object is used, it may not have protected\r\n * or private properties.\r\n * <\/p>\r\n * <p>\r\n * If the parameter does not have an _id key or\r\n * property, a new <b>MongoId<\/b> instance will be created\r\n * and assigned to it. See <b>MongoCollection::insert<\/b> for\r\n * additional information on this behavior.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * Options for the save.\r\n * <p>\"fsync\"<\/p><p>Boolean, defaults to <b>FALSE<\/b>. If journalling is enabled, it works exactly like \"j\". If journalling is not enabled, it forces the insert to be synced to disk before returning success. If <b>TRUE<\/b>, an acknowledged insert is implied and will override setting w to 0.<\/p><p>This option is deprecated. Please use the \"j\" option instead.<\/p>\r\n * <p>\"j\"<\/p><p>Boolean, defaults to <b>FALSE<\/b>. Forces the insert to be synced to the journal before returning success. If <b>TRUE<\/b>, an acknowledged insert is implied and will override setting w to 0.<\/p>\r\n * <p>\"w\"<\/p><p>See WriteConcerns. The default value for <b>MongoClient<\/b> is 1.<\/p>\r\n * <p>\"wtimeout\"<\/p><p>How long to wait for WriteConcern acknowledgement. The default value for <b>MongoClient<\/b> is 10000 milliseconds.<\/p>\r\n * <p>\"safe\"<\/p><p>Deprecated. Please use the WriteConcern w option.<\/p>\r\n * <p>\"timeout\"<\/p><p>Integer, defaults to MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a <b>MongoCursorTimeoutException<\/b> will be thrown.<\/p>\r\n * <\/p>\r\n * @return mixed If <i>w<\/i> was set, returns an array containing the status of the save.\r\n * Otherwise, returns a boolean representing if the array was not empty (an empty array will not\r\n * be inserted).\r\n *\/"
            },
            {
                "name": "createDBRef",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "document_or_id",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Creates a database reference\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.createdbref.php\r\n * @param mixed $document_or_id <p>\r\n * If an array or object is given, its _id field will be\r\n * used as the reference ID. If a <b>MongoId<\/b> or scalar\r\n * is given, it will be used as the reference ID.\r\n * <\/p>\r\n * @return array a database reference array.\r\n * <\/p>\r\n * <p>\r\n * If an array without an _id field was provided as the\r\n * document_or_id parameter, <b>NULL<\/b> will be returned.\r\n *\/"
            },
            {
                "name": "getDBRef",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ref",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Fetches the document pointed to by a database reference\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.getdbref.php\r\n * @param array $ref <p>\r\n * A database reference.\r\n * <\/p>\r\n * @return array the database document pointed to by the reference.\r\n *\/"
            },
            {
                "name": "toIndexString",
                "type": 10,
                "byRef": false,
                "params": [
                    {
                        "name": "keys",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Converts keys specifying an index to its identifying string\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.toindexstring.php\r\n * @param mixed $keys <p>\r\n * Field or fields to convert to the identifying string\r\n * <\/p>\r\n * @return string a string that describes the index.\r\n *\/"
            },
            {
                "name": "group",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "keys",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "initial",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "reduce",
                        "type": "MongoCode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.2)<br\/>\r\n * Performs an operation similar to SQL's GROUP BY command\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.group.php\r\n * @param mixed $keys <p>\r\n * Fields to group by. If an array or non-code object is passed, it will be\r\n * the key used to group results.\r\n * <\/p>\r\n * <p>1.0.4+: If <i>keys<\/i> is an instance of\r\n * <b>MongoCode<\/b>, <i>keys<\/i> will be treated as\r\n * a function that returns the key to group by (see the \"Passing a\r\n * <i>keys<\/i> function\" example below).\r\n * <\/p>\r\n * @param array $initial <p>\r\n * Initial value of the aggregation counter object.\r\n * <\/p>\r\n * @param MongoCode $reduce <p>\r\n * A function that takes two arguments (the current document and the\r\n * aggregation to this point) and does the aggregation.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * Optional parameters to the group command. Valid options include:\r\n * <\/p>\r\n * <p>\r\n * \"condition\"\r\n * <\/p>\r\n * <p>\r\n * Criteria for including a document in the aggregation.\r\n * <\/p>\r\n * @return array an array containing the result.\r\n *\/"
            },
            {
                "name": "distinct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.11)<br\/>\r\n * Retrieve a list of distinct values for the given key across a collection.\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.distinct.php\r\n * @param string $key <p>\r\n * The key to use.\r\n * <\/p>\r\n * @param array $query [optional] <p>\r\n * An optional query parameters\r\n * <\/p>\r\n * @return array an array of distinct values, or <b>FALSE<\/b> on failure\r\n *\/"
            },
            {
                "name": "aggregate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "pipeline",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "op",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "_",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Perform an aggregation using the aggregation framework\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.aggregate.php\r\n * @param array $pipeline <p>\r\n * An array of pipeline operators, or just the first operator.\r\n * <\/p>\r\n * @param array $op [optional] <p>\r\n * The second pipeline operator.\r\n * <\/p>\r\n * @param array $_ [optional] <p>\r\n * Additional pipeline operators.\r\n * <\/p>\r\n * @return array The result of the aggregation as an array. The ok will\r\n * be set to 1 on success, 0 on failure.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "w",
                "doc": "\/**\r\n * @var integer\r\n *\/"
            },
            {
                "name": "wtimeout",
                "doc": "\/**\r\n * @var integer\r\n *\/"
            }
        ],
        "constants": [
            {
                "name": "ASCENDING",
                "value": 1,
                "doc": null
            },
            {
                "name": "DESCENDING",
                "value": null,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoCursor",
        "fqn": "\\MongoCursor",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "connection",
                        "type": "MongoClient",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "ns",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Create a new cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.construct.php\r\n * @param MongoClient $connection <p>\r\n * Database connection.\r\n * <\/p>\r\n * @param string $ns <p>\r\n * Full name of database and collection.\r\n * <\/p>\r\n * @param array $query [optional] <p>\r\n * Database query.\r\n * <\/p>\r\n * @param array $fields [optional] <p>\r\n * Fields to return.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "hasNext",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Checks if there are any more elements in this cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.hasnext.php\r\n * @return bool if there is another element.\r\n *\/"
            },
            {
                "name": "getNext",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Return the next object to which this cursor points, and advance the cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.getnext.php\r\n * @return array the next object.\r\n *\/"
            },
            {
                "name": "limit",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "num",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Limits the number of results returned\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.limit.php\r\n * @param int $num <p>\r\n * The number of results to return.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "batchSize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "batchSize",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.11)<br\/>\r\n * Limits the number of elements returned in one batch.\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.batchsize.php\r\n * @param int $batchSize <p>\r\n * The number of results to return per batch. Each batch requires a\r\n * round-trip to the server.\r\n * <\/p>\r\n * <p>\r\n * If <i>batchSize<\/i> is 2 or\r\n * more, it represents the size of each batch of objects retrieved.\r\n * It can be adjusted to optimize performance and limit data transfer.\r\n * <\/p>\r\n * <p>\r\n * If <i>batchSize<\/i> is 1 or negative, it\r\n * will limit of number returned documents to the absolute value of batchSize,\r\n * and the cursor will be closed. For example if\r\n * batchSize is -10, then the server will return a maximum\r\n * of 10 documents and as many as can fit in 4MB, then close the cursor.\r\n * <\/p>\r\n * <p>\r\n * A <i>batchSize<\/i> of 1 is special, and\r\n * means the same as -1, i.e. a value of\r\n * 1 makes the cursor only capable of returning\r\n * one document.\r\n * <\/p>\r\n * <p>\r\n * Note that this feature is different from\r\n * <b>MongoCursor::limit<\/b> in that documents must fit within a\r\n * maximum size, and it removes the need to send a request to close the cursor\r\n * server-side. The batch size can be changed even after a cursor is iterated,\r\n * in which case the setting will apply on the next batch retrieval.\r\n * <\/p>\r\n * <p>\r\n * This cannot override MongoDB's limit on the amount of data it will return to\r\n * the client (i.e., if you set batch size to 1,000,000,000, MongoDB will still\r\n * only return 4-16MB of results per batch).\r\n * <\/p>\r\n * <p>\r\n * To ensure consistent behavior, the rules of\r\n * <b>MongoCursor::batchSize<\/b> and\r\n * <b>MongoCursor::limit<\/b> behave a\r\n * little complex but work \"as expected\". The rules are: hard limits override\r\n * soft limits with preference given to <b>MongoCursor::limit<\/b>\r\n * over <b>MongoCursor::batchSize<\/b>. After that, whichever is\r\n * set and lower than the other will take precedence. See below.\r\n * section for some examples.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "skip",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "num",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Skips a number of results\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.skip.php\r\n * @param int $num <p>\r\n * The number of results to skip.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "fields",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "f",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.6)<br\/>\r\n * Sets the fields for a query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.fields.php\r\n * @param array $f <p>\r\n * Fields to return (or not return).\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "addOption",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.4)<br\/>\r\n * Adds a top-level key\/value pair to a query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.addoption.php\r\n * @param string $key <p>\r\n * Fieldname to add.\r\n * <\/p>\r\n * @param mixed $value <p>\r\n * Value to add.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "snapshot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.4)<br\/>\r\n * Use snapshot mode for the query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.snapshot.php\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "sort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Sorts the results by given fields\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.sort.php\r\n * @param array $fields <p>\r\n * An array of fields by which to sort. Each element in the array has as\r\n * key the field name, and as value either 1 for\r\n * ascending sort, or -1 for descending sort.\r\n * <\/p>\r\n * <p>\r\n * Each result is first sorted on the first field in the array, then (if\r\n * it exists) on the second field in the array, etc. This means that the\r\n * order of the fields in the <i>fields<\/i> array is\r\n * important. See also the examples section.\r\n * <\/p>\r\n * @return MongoCursor the same cursor that this method was called on.\r\n *\/"
            },
            {
                "name": "hint",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Gives the database a hint about the query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.hint.php\r\n * @param mixed $index <p>\r\n * Index to use for the query. If a string is passed, it should correspond\r\n * to an index name. If an array or object is passed, it should correspond\r\n * to the specification used to create the index (i.e. the first argument\r\n * to <b>MongoCollection::ensureIndex<\/b>).\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "explain",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.2)<br\/>\r\n * Return an explanation of the query, often useful for optimization and debugging\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.explain.php\r\n * @return array an explanation of the query.\r\n *\/"
            },
            {
                "name": "setFlag",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flag",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "set",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.11)<br\/>\r\n * Sets arbitrary flags in case there is no method available the specific flag\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.setflag.php\r\n * @param int $flag <p>\r\n * Which flag to set. You can not set flag 6 (EXHAUST) as the driver does\r\n * not know how to handle them. You will get a warning if you try to use\r\n * this flag. For available flags, please refer to the wire protocol\r\n * documentation.\r\n * <\/p>\r\n * @param bool $set [optional] <p>\r\n * Whether the flag should be set (<b>TRUE<\/b>) or unset (<b>FALSE<\/b>).\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "slaveOkay",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "okay",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.4)<br\/>\r\n * Sets whether this query can be done on a secondary\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.slaveokay.php\r\n * @param bool $okay [optional] <p>\r\n * If it is okay to query the secondary.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "tailable",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "tail",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.4)<br\/>\r\n * Sets whether this cursor will be left open after fetching the last results\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.tailable.php\r\n * @param bool $tail [optional] <p>\r\n * If the cursor should be tailable.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "immortal",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "liveForever",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.1)<br\/>\r\n * Sets whether this cursor will timeout\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.immortal.php\r\n * @param bool $liveForever [optional] <p>\r\n * If the cursor should be immortal.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "awaitData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "wait",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.11)<br\/>\r\n * Sets whether this cursor will wait for a while for a tailable cursor to return more data\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.awaitdata.php\r\n * @param bool $wait [optional] <p>\r\n * If the cursor should wait for more data to become available.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "partial",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "okay",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.0)<br\/>\r\n * If this query should fetch partial results from mongos if a shard is down\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.partial.php\r\n * @param bool $okay [optional] <p>\r\n * If receiving partial results is okay.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "getReadPreference",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.3)<br\/>\r\n * Get the read preference for this query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.getreadpreference.php\r\n * @return array\r\n *\/"
            },
            {
                "name": "setReadPreference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "read_preference",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "tags",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.3)<br\/>\r\n * Set the read preference for this query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.setreadpreference.php\r\n * @param string $read_preference\r\n * @param array $tags [optional]\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "timeout",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ms",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.3)<br\/>\r\n * Sets a client-side timeout for this query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.timeout.php\r\n * @param int $ms <p>\r\n * The number of milliseconds for the cursor to wait for a response. Use\r\n * -1 to wait forever. By default, the cursor will wait\r\n * MongoCursor::$timeout milliseconds.\r\n * <\/p>\r\n * @return MongoCursor This cursor.\r\n *\/"
            },
            {
                "name": "doQuery",
                "type": 2,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (No version information available, might only be in SVN)<br\/>\r\n * Execute the query.\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.doquery.php\r\n * @return void <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "info",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.5)<br\/>\r\n * Gets the query, fields, limit, and skip for this cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.info.php\r\n * @return array the namespace, limit, skip, query, and fields for this cursor.\r\n *\/"
            },
            {
                "name": "dead",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.6)<br\/>\r\n * Checks if there are documents that have not been sent yet from the database for this cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.dead.php\r\n * @return bool if there are more results that have not been sent to the client, yet.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns the current element\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.current.php\r\n * @return array The current result as an associative array.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns the current result&#x00027;s _id\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.key.php\r\n * @return string The current result&#x00027;s _id as a string.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Advances the cursor to the next result\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.next.php\r\n * @return void <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns the cursor to the beginning of the result set\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.rewind.php\r\n * @return void <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Checks if the cursor is reading a valid result.\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.valid.php\r\n * @return bool If the current result is not null.\r\n *\/"
            },
            {
                "name": "reset",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Clears the cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.reset.php\r\n * @return void <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "foundOnly",
                        "type": null,
                        "byRef": false,
                        "default": "&false;"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.2)<br\/>\r\n * Counts the number of results for this query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.count.php\r\n * @param bool $foundOnly [optional] <p>\r\n * Send cursor limit and skip information to the count function, if applicable.\r\n * <\/p>\r\n * @return int The number of documents returned by this cursor's query.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "slaveOkay",
                "doc": "\/**\r\n * @var boolean\r\n *\/"
            },
            {
                "name": "timeout",
                "doc": "\/**\r\n * @var integer\r\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoGridFS",
        "fqn": "\\MongoGridFS",
        "type": 0,
        "extends": "MongoCollection",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "db",
                        "type": "MongoDB",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "prefix",
                        "type": null,
                        "byRef": false,
                        "default": "&quot;fs&quot;"
                    },
                    {
                        "name": "chunks",
                        "type": null,
                        "byRef": false,
                        "default": "&quot;fs&quot;"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Creates new file collections\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.construct.php\r\n * @param MongoDB $db <p>\r\n * Database.\r\n * <\/p>\r\n * @param string $prefix [optional]\r\n * @param mixed $chunks [optional]\r\n *\/"
            },
            {
                "name": "drop",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Drops the files and chunks collections\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.drop.php\r\n * @return array The database response.\r\n *\/"
            },
            {
                "name": "find",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Queries for files\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.find.php\r\n * @param array $query [optional] <p>\r\n * The query.\r\n * <\/p>\r\n * @param array $fields [optional] <p>\r\n * Fields to return.\r\n * <\/p>\r\n * @return MongoGridFSCursor A <b>MongoGridFSCursor<\/b>.\r\n *\/"
            },
            {
                "name": "storeFile",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "metadata",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Stores a file in the database\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.storefile.php\r\n * @param string $filename <p>\r\n * Name of the file to store.\r\n * <\/p>\r\n * @param array $metadata [optional] <p>\r\n * Other metadata fields to include in the file document.\r\n * <\/p>\r\n * <p>These fields may also overwrite those that would be created automatically by the driver, as described in the MongoDB core documentation for the files collection. Some practical use cases for this behavior would be to specify a custom chunkSize or _id for the file.<\/p>\r\n * @param array $options [optional] <p>\r\n * Options for the store.\r\n * <p>\"w\"<\/p><p>See WriteConcerns. The default value for <b>MongoClient<\/b> is 1.<\/p>\r\n * <\/p>\r\n * @return mixed\r\n *\/"
            },
            {
                "name": "storeBytes",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "bytes",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "metadata",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.2)<br\/>\r\n * Stores a string of bytes in the database\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.storebytes.php\r\n * @param string $bytes <p>\r\n * String of bytes to store.\r\n * <\/p>\r\n * @param array $metadata [optional] <p>\r\n * Other metadata fields to include in the file document.\r\n * <\/p>\r\n * <p>These fields may also overwrite those that would be created automatically by the driver, as described in the MongoDB core documentation for the files collection. Some practical use cases for this behavior would be to specify a custom chunkSize or _id for the file.<\/p>\r\n * @param array $options [optional] <p>\r\n * Options for the store.\r\n * <p>\"w\"<\/p><p>See WriteConcerns. The default value for <b>MongoClient<\/b> is 1.<\/p>\r\n * <\/p>\r\n * @return mixed\r\n *\/"
            },
            {
                "name": "findOne",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": null,
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "fields",
                        "type": null,
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns a single file matching the criteria\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.findone.php\r\n * @param mixed $query [optional] <p>\r\n * The filename or criteria for which to search.\r\n * <\/p>\r\n * @param mixed $fields [optional]\r\n * @return MongoGridFSFile a <b>MongoGridFSFile<\/b> or <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "remove",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "criteria",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Removes files from the collections\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.remove.php\r\n * @param array $criteria [optional]\r\n * @param array $options [optional] <p>\r\n * Options for the remove. Valid options are:\r\n * <\/p>\r\n * <p>\"w\"<\/p><p>See WriteConcerns. The default value for <b>MongoClient<\/b> is 1.<\/p>\r\n * @return bool if the removal was successfully sent to the database.\r\n *\/"
            },
            {
                "name": "storeUpload",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "metadata",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Stores an uploaded file in the database\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.storeupload.php\r\n * @param string $name <p>\r\n * The name of the uploaded file to store. This should correspond to the\r\n * file field's name attribute in the HTML form.\r\n * <\/p>\r\n * @param array $metadata [optional] <p>\r\n * Other metadata fields to include in the file document.\r\n * <\/p>\r\n * <p>These fields may also overwrite those that would be created automatically by the driver, as described in the MongoDB core documentation for the files collection. Some practical use cases for this behavior would be to specify a custom chunkSize or _id for the file.<\/p>\r\n * <p>\r\n * The filename index will be populated with the\r\n * filename used.\r\n * <\/p>\r\n * @return mixed\r\n *\/"
            },
            {
                "name": "delete",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "id",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.8)<br\/>\r\n * Delete a file from the database\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.delete.php\r\n * @param mixed $id <p>\r\n * _id of the file to remove.\r\n * <\/p>\r\n * @return bool if the remove was successfully sent to the database.\r\n *\/"
            },
            {
                "name": "get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "id",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.8)<br\/>\r\n * Retrieve a file from the database\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.get.php\r\n * @param mixed $id <p>\r\n * _id of the file to find.\r\n * <\/p>\r\n * @return MongoGridFSFile the file, if found, or <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "put",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "metadata",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.8)<br\/>\r\n * Stores a file in the database\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfs.put.php\r\n * @param string $filename <p>\r\n * Name of the file to store.\r\n * <\/p>\r\n * @param array $metadata [optional] <p>\r\n * Other metadata fields to include in the file document.\r\n * <\/p>\r\n * <p>These fields may also overwrite those that would be created automatically by the driver, as described in the MongoDB core documentation for the files collection. Some practical use cases for this behavior would be to specify a custom chunkSize or _id for the file.<\/p>\r\n * @return mixed\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * String representation of this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.--tostring.php\r\n * @return string the full name of this collection.\r\n *\/"
            },
            {
                "name": "__get",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "name",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.2)<br\/>\r\n * Gets a collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.get.php\r\n * @param string $name <p>\r\n * The next string in the collection name.\r\n * <\/p>\r\n * @return MongoCollection the collection.\r\n *\/"
            },
            {
                "name": "getName",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns this collection&#x00027;s name\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.getname.php\r\n * @return string the name of this collection.\r\n *\/"
            },
            {
                "name": "getSlaveOkay",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.1.0)<br\/>\r\n * Get slaveOkay setting for this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.getslaveokay.php\r\n * @return bool the value of slaveOkay for this instance.\r\n *\/"
            },
            {
                "name": "setSlaveOkay",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ok",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.1.0)<br\/>\r\n * Change slaveOkay setting for this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.setslaveokay.php\r\n * @param bool $ok [optional] <p>\r\n * If reads should be sent to secondary members of a replica set for all\r\n * possible queries using this <b>MongoCollection<\/b>\r\n * instance.\r\n * <\/p>\r\n * @return bool the former value of slaveOkay for this instance.\r\n *\/"
            },
            {
                "name": "getReadPreference",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Get the read preference for this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.getreadpreference.php\r\n * @return array\r\n *\/"
            },
            {
                "name": "setReadPreference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "read_preference",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "tags",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Set the read preference for this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.setreadpreference.php\r\n * @param string $read_preference\r\n * @param array $tags [optional]\r\n * @return bool\r\n *\/"
            },
            {
                "name": "validate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "scan_data",
                        "type": null,
                        "byRef": false,
                        "default": "&false;"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Validates this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.validate.php\r\n * @param bool $scan_data [optional] <p>\r\n * Only validate indices, not the base collection.\r\n * <\/p>\r\n * @return array the database&#x00027;s evaluation of this object.\r\n *\/"
            },
            {
                "name": "insert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "a",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Inserts a document into the collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.insert.php\r\n * @param array|object $a <p>\r\n * An array or object. If an object is used, it may not have protected or\r\n * private properties.\r\n * <\/p>\r\n * <p>\r\n * If the parameter does not have an _id key or\r\n * property, a new <b>MongoId<\/b> instance will be created\r\n * and assigned to it. This special behavior does not mean that the\r\n * parameter is passed by reference.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * Options for the insert.\r\n * <p>\"fsync\"<\/p><p>Boolean, defaults to <b>FALSE<\/b>. If journalling is enabled, it works exactly like \"j\". If journalling is not enabled, it forces the insert to be synced to disk before returning success. If <b>TRUE<\/b>, an acknowledged insert is implied and will override setting w to 0.<\/p><p>This option is deprecated. Please use the \"j\" option instead.<\/p>\r\n * <p>\"j\"<\/p><p>Boolean, defaults to <b>FALSE<\/b>. Forces the insert to be synced to the journal before returning success. If <b>TRUE<\/b>, an acknowledged insert is implied and will override setting w to 0.<\/p>\r\n * <p>\"w\"<\/p><p>See WriteConcerns. The default value for <b>MongoClient<\/b> is 1.<\/p>\r\n * <p>\"wtimeout\"<\/p><p>How long to wait for WriteConcern acknowledgement. The default value for <b>MongoClient<\/b> is 10000 milliseconds.<\/p>\r\n * <p>\"safe\"<\/p><p>Deprecated. Please use the WriteConcern w option.<\/p>\r\n * <p>\"timeout\"<\/p><p>Integer, defaults to MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a <b>MongoCursorTimeoutException<\/b> will be thrown.<\/p>\r\n * <\/p>\r\n * @return bool|array an array containing the status of the insertion if the\r\n * \"w\" option is set. Otherwise, returns <b>TRUE<\/b> if the\r\n * inserted array is not empty (a <b>MongoException<\/b> will be\r\n * thrown if the inserted array is empty).\r\n * <\/p>\r\n * <p>\r\n * If an array is returned, the following keys may be present:\r\n * <i>ok<\/i>\r\n * <p>\r\n * This should almost always be 1 (unless last_error itself failed).\r\n * <\/p>\r\n * <i>err<\/i>\r\n * <p>\r\n * If this field is non-null, an error occurred on the previous operation.\r\n * If this field is set, it will be a string describing the error that\r\n * occurred.\r\n * <\/p>\r\n * <i>code<\/i>\r\n * <p>\r\n * If a database error occurred, the relevant error code will be passed\r\n * back to the client.\r\n * <\/p>\r\n * <i>errmsg<\/i>\r\n * <p>\r\n * This field is set if something goes wrong with a database command. It\r\n * is coupled with ok being 0. For example, if\r\n * w is set and times out, errmsg will be set to \"timed\r\n * out waiting for slaves\" and ok will be 0. If this\r\n * field is set, it will be a string describing the error that occurred.\r\n * <\/p>\r\n * <i>n<\/i>\r\n * <p>\r\n * If the last operation was an update, upsert, or a remove, the number\r\n * of documents affected will be returned. For insert operations, this value\r\n * is always 0.\r\n * <\/p>\r\n * <i>wtimeout<\/i>\r\n * <p>\r\n * If the previous option timed out waiting for replication.\r\n * <\/p>\r\n * <i>waited<\/i>\r\n * <p>\r\n * How long the operation waited before timing out.\r\n * <\/p>\r\n * <i>wtime<\/i>\r\n * <p>\r\n * If w was set and the operation succeeded, how long it took to\r\n * replicate to w servers.\r\n * <\/p>\r\n * <i>upserted<\/i>\r\n * <p>\r\n * If an upsert occurred, this field will contain the new record's\r\n * _id field. For upserts, either this field or\r\n * updatedExisting will be present (unless an error\r\n * occurred).\r\n * <\/p>\r\n * <i>updatedExisting<\/i>\r\n * <p>\r\n * If an upsert updated an existing element, this field will be true. For\r\n * upserts, either this field or upserted will be present (unless an error\r\n * occurred).\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "batchInsert",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "a",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Inserts multiple documents into this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.batchinsert.php\r\n * @param array $a <p>\r\n * An array of arrays or objects. If any objects are used, they may not have\r\n * protected or private properties.\r\n * <\/p>\r\n * <p>\r\n * If the documents to insert do not have an _id key or\r\n * property, a new <b>MongoId<\/b> instance will be created\r\n * and assigned to it. See <b>MongoCollection::insert<\/b> for\r\n * additional information on this behavior.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * Options for the inserts.\r\n * <p>\r\n * \"continueOnError\"\r\n * <\/p>\r\n * <p>\r\n * Boolean, defaults to <b>FALSE<\/b>. If set, the database will not stop\r\n * processing a bulk insert if one fails (eg due to duplicate IDs).\r\n * This makes bulk insert behave similarly to a series of single\r\n * inserts, except that calling <b>MongoDB::lastError<\/b>\r\n * will have an error set if any insert fails, not just the last one.\r\n * If multiple errors occur, only the most recent will be reported by\r\n * <b>MongoDB::lastError<\/b>.\r\n * <\/p>\r\n * <p>\r\n * Please note that continueOnError affects errors\r\n * on the database side only. If you try to insert a document that has\r\n * errors (for example it contains a key with an empty name), then the\r\n * document is not even transferred to the database as the driver\r\n * detects this error and bails out.\r\n * continueOnError has no effect on errors detected\r\n * in the documents by the driver.\r\n * <\/p>\r\n * @return mixed If the w parameter is set to acknowledge the write,\r\n * returns an associative array with the status of the inserts (\"ok\") and any\r\n * error that may have occurred (\"err\"). Otherwise, returns <b>TRUE<\/b> if the\r\n * batch insert was successfully sent, <b>FALSE<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "update",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "criteria",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "new_object",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Update records based on a given criteria\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.update.php\r\n * @param array $criteria <p>\r\n * Description of the objects to update.\r\n * <\/p>\r\n * @param array $new_object <p>\r\n * The object with which to update the matching records.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * This parameter is an associative array of the form\r\n * array(\"optionname\" => &lt;boolean&gt;, ...). Currently\r\n * supported options are:\r\n * <p>\r\n * \"upsert\"\r\n * <\/p>\r\n * <p>\r\n * If no document matches <i>$criteria<\/i>, a new\r\n * document will be inserted.\r\n * <\/p>\r\n * <p>\r\n * If a new document would be inserted and\r\n * <i>$new_object<\/i> contains atomic modifiers\r\n * (i.e. $ operators), those operations will be\r\n * applied to the <i>$criteria<\/i> parameter to create\r\n * the new document. If <i>$new_object<\/i> does not\r\n * contain atomic modifiers, it will be used as-is for the inserted\r\n * document. See the upsert examples below for more information.\r\n * <\/p>\r\n * @return bool|array an array containing the status of the update if the\r\n * \"w\" option is set. Otherwise, returns <b>TRUE<\/b>.\r\n * <\/p>\r\n * <p>\r\n * Fields in the status array are described in the documentation for\r\n * <b>MongoCollection::insert<\/b>.\r\n *\/"
            },
            {
                "name": "findAndModify",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "update",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Update a document and return it\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.findandmodify.php\r\n * @param array $query <p>\r\n * The query criteria to search for.\r\n * <\/p>\r\n * @param array $update [optional] <p>\r\n * The update criteria.\r\n * <\/p>\r\n * @param array $fields [optional] <p>\r\n * Optionally only return these fields.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * An array of options to apply, such as remove the match document from the\r\n * DB and return it.\r\n * <tr valign=\"top\">\r\n * <td>Option<\/td>\r\n * <td>Description<\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>sort array<\/td>\r\n * <td>\r\n * Determines which document the operation will modify if the\r\n * query selects multiple documents. findAndModify will modify the\r\n * first document in the sort order specified by this argument.\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>remove boolean<\/td>\r\n * <td>\r\n * Optional if update field exists. When <b>TRUE<\/b>, removes the selected\r\n * document. The default is <b>FALSE<\/b>.\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>update array<\/td>\r\n * <td>\r\n * Optional if remove field exists.\r\n * Performs an update of the selected document.\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>new boolean<\/td>\r\n * <td>\r\n * Optional. When <b>TRUE<\/b>, returns the modified document rather than the\r\n * original. The findAndModify method ignores the new option for\r\n * remove operations. The default is <b>FALSE<\/b>.\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td>upsert boolean<\/td>\r\n * <td>\r\n * Optional. Used in conjunction with the update field. When <b>TRUE<\/b>, the\r\n * findAndModify command creates a new document if the query returns\r\n * no documents. The default is false. In MongoDB 2.2, the\r\n * findAndModify command returns <b>NULL<\/b> when upsert is <b>TRUE<\/b>.\r\n * <\/td>\r\n * <\/tr>\r\n * <tr valign=\"top\">\r\n * <td><\/td>\r\n * <td>\r\n * <\/td>\r\n * <\/tr>\r\n * <\/p>\r\n * @return array the original document, or the modified document when\r\n * new is set.\r\n *\/"
            },
            {
                "name": "ensureIndex",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key_keys",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n* (PECL mongo &gt;=0.9.0)<br\/>\r\n* Creates an index on the given field(s), or does nothing if the index \r\nalready exists\r\n* @link http:\/\/php.net\/manual\/en\/mongocollection.ensureindex.php\r\n* @param string|array $key_keys\r\n* @param array $options [optional] <p>\r\n* This parameter is an associative array of the form\r\n* array(\"optionname\" => &lt;boolean&gt;, ...). Currently\r\n* supported options are:\r\n* <p>\"w\"<\/p><p>See WriteConcerns. The default value for <b>MongoClient<\/b> is 1.<\/p>\r\n* <p>\r\n* \"unique\"\r\n* <\/p>\r\n* <p>\r\n* Create a unique index.\r\n* <\/p>\r\n* <p>\r\n* A unique index cannot be created on a field if multiple existing\r\n* documents do not contain the field. The field is effectively <b>NULL<\/b>\r\n* for these documents and thus already non-unique. Sparse indexing may\r\n* be used to overcome this, since it will prevent documents without the\r\n* field from being indexed.\r\n* <\/p>\r\n* @return bool an array containing the status of the index creation if the\r\n* \"w\" option is set. Otherwise, returns <b>TRUE<\/b>.\r\n* <\/p>\r\n* <p>\r\n* Fields in the status array are described in the documentation for\r\n* <b>MongoCollection::insert<\/b>.\r\n*\/"
            },
            {
                "name": "deleteIndex",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "keys",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Deletes an index from this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.deleteindex.php\r\n * @param string|array $keys <p>\r\n * Field or fields from which to delete the index.\r\n * <\/p>\r\n * @return array the database response.\r\n *\/"
            },
            {
                "name": "deleteIndexes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Delete all indices for this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.deleteindexes.php\r\n * @return array the database response.\r\n *\/"
            },
            {
                "name": "getIndexInfo",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns information about indexes on this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.getindexinfo.php\r\n * @return array This function returns an array in which each element describes an index.\r\n * Elements will contain the values name for the name of\r\n * the index, ns for the namespace (a combination of the\r\n * database and collection name), and key for a list of all\r\n * fields in the index and their ordering. Additional values may be present for\r\n * special indexes, such as unique or\r\n * sparse.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    },
                    {
                        "name": "limit",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    },
                    {
                        "name": "skip",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Counts the number of documents in this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.count.php\r\n * @param array $query [optional] <p>\r\n * Associative array or object with fields to match.\r\n * <\/p>\r\n * @param int $limit [optional] <p>\r\n * Specifies an upper limit to the number returned.\r\n * <\/p>\r\n * @param int $skip [optional] <p>\r\n * Specifies a number of results to skip before starting the count.\r\n * <\/p>\r\n * @return int the number of documents matching the query.\r\n *\/"
            },
            {
                "name": "save",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "a",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Saves a document to this collection\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.save.php\r\n * @param array|object $a <p>\r\n * Array or object to save. If an object is used, it may not have protected\r\n * or private properties.\r\n * <\/p>\r\n * <p>\r\n * If the parameter does not have an _id key or\r\n * property, a new <b>MongoId<\/b> instance will be created\r\n * and assigned to it. See <b>MongoCollection::insert<\/b> for\r\n * additional information on this behavior.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * Options for the save.\r\n * <p>\"fsync\"<\/p><p>Boolean, defaults to <b>FALSE<\/b>. If journalling is enabled, it works exactly like \"j\". If journalling is not enabled, it forces the insert to be synced to disk before returning success. If <b>TRUE<\/b>, an acknowledged insert is implied and will override setting w to 0.<\/p><p>This option is deprecated. Please use the \"j\" option instead.<\/p>\r\n * <p>\"j\"<\/p><p>Boolean, defaults to <b>FALSE<\/b>. Forces the insert to be synced to the journal before returning success. If <b>TRUE<\/b>, an acknowledged insert is implied and will override setting w to 0.<\/p>\r\n * <p>\"w\"<\/p><p>See WriteConcerns. The default value for <b>MongoClient<\/b> is 1.<\/p>\r\n * <p>\"wtimeout\"<\/p><p>How long to wait for WriteConcern acknowledgement. The default value for <b>MongoClient<\/b> is 10000 milliseconds.<\/p>\r\n * <p>\"safe\"<\/p><p>Deprecated. Please use the WriteConcern w option.<\/p>\r\n * <p>\"timeout\"<\/p><p>Integer, defaults to MongoCursor::$timeout. If acknowledged writes are used, this sets how long (in milliseconds) for the client to wait for a database response. If the database does not respond within the timeout period, a <b>MongoCursorTimeoutException<\/b> will be thrown.<\/p>\r\n * <\/p>\r\n * @return mixed If <i>w<\/i> was set, returns an array containing the status of the save.\r\n * Otherwise, returns a boolean representing if the array was not empty (an empty array will not\r\n * be inserted).\r\n *\/"
            },
            {
                "name": "createDBRef",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "document_or_id",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Creates a database reference\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.createdbref.php\r\n * @param mixed $document_or_id <p>\r\n * If an array or object is given, its _id field will be\r\n * used as the reference ID. If a <b>MongoId<\/b> or scalar\r\n * is given, it will be used as the reference ID.\r\n * <\/p>\r\n * @return array a database reference array.\r\n * <\/p>\r\n * <p>\r\n * If an array without an _id field was provided as the\r\n * document_or_id parameter, <b>NULL<\/b> will be returned.\r\n *\/"
            },
            {
                "name": "getDBRef",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ref",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Fetches the document pointed to by a database reference\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.getdbref.php\r\n * @param array $ref <p>\r\n * A database reference.\r\n * <\/p>\r\n * @return array the database document pointed to by the reference.\r\n *\/"
            },
            {
                "name": "toIndexString",
                "type": 10,
                "byRef": false,
                "params": [
                    {
                        "name": "keys",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Converts keys specifying an index to its identifying string\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.toindexstring.php\r\n * @param mixed $keys <p>\r\n * Field or fields to convert to the identifying string\r\n * <\/p>\r\n * @return string a string that describes the index.\r\n *\/"
            },
            {
                "name": "group",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "keys",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "initial",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "reduce",
                        "type": "MongoCode",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "options",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.2)<br\/>\r\n * Performs an operation similar to SQL's GROUP BY command\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.group.php\r\n * @param mixed $keys <p>\r\n * Fields to group by. If an array or non-code object is passed, it will be\r\n * the key used to group results.\r\n * <\/p>\r\n * <p>1.0.4+: If <i>keys<\/i> is an instance of\r\n * <b>MongoCode<\/b>, <i>keys<\/i> will be treated as\r\n * a function that returns the key to group by (see the \"Passing a\r\n * <i>keys<\/i> function\" example below).\r\n * <\/p>\r\n * @param array $initial <p>\r\n * Initial value of the aggregation counter object.\r\n * <\/p>\r\n * @param MongoCode $reduce <p>\r\n * A function that takes two arguments (the current document and the\r\n * aggregation to this point) and does the aggregation.\r\n * <\/p>\r\n * @param array $options [optional] <p>\r\n * Optional parameters to the group command. Valid options include:\r\n * <\/p>\r\n * <p>\r\n * \"condition\"\r\n * <\/p>\r\n * <p>\r\n * Criteria for including a document in the aggregation.\r\n * <\/p>\r\n * @return array an array containing the result.\r\n *\/"
            },
            {
                "name": "distinct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.11)<br\/>\r\n * Retrieve a list of distinct values for the given key across a collection.\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.distinct.php\r\n * @param string $key <p>\r\n * The key to use.\r\n * <\/p>\r\n * @param array $query [optional] <p>\r\n * An optional query parameters\r\n * <\/p>\r\n * @return array an array of distinct values, or <b>FALSE<\/b> on failure\r\n *\/"
            },
            {
                "name": "aggregate",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "pipeline",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "op",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    },
                    {
                        "name": "_",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Perform an aggregation using the aggregation framework\r\n * @link http:\/\/php.net\/manual\/en\/mongocollection.aggregate.php\r\n * @param array $pipeline <p>\r\n * An array of pipeline operators, or just the first operator.\r\n * <\/p>\r\n * @param array $op [optional] <p>\r\n * The second pipeline operator.\r\n * <\/p>\r\n * @param array $_ [optional] <p>\r\n * Additional pipeline operators.\r\n * <\/p>\r\n * @return array The result of the aggregation as an array. The ok will\r\n * be set to 1 on success, 0 on failure.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "w",
                "doc": "\/**\r\n * @var integer\r\n *\/"
            },
            {
                "name": "wtimeout",
                "doc": "\/**\r\n * @var integer\r\n *\/"
            },
            {
                "name": "chunks",
                "doc": null
            },
            {
                "name": "filesName",
                "doc": null
            },
            {
                "name": "chunksName",
                "doc": null
            }
        ],
        "constants": [
            {
                "name": "ASCENDING",
                "value": 1,
                "doc": null
            },
            {
                "name": "DESCENDING",
                "value": null,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoGridFSFile",
        "fqn": "\\MongoGridFSFile",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "gridfs",
                        "type": "MongoGridFS",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "file",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Create a new GridFS file\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfsfile.construct.php\r\n * @param MongoGridFS $gridfs <p>\r\n * The parent MongoGridFS instance.\r\n * <\/p>\r\n * @param array $file <p>\r\n * A file from the database.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "getFilename",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns this file&#x00027;s filename\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfsfile.getfilename.php\r\n * @return string the filename.\r\n *\/"
            },
            {
                "name": "getSize",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns this file&#x00027;s size\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfsfile.getsize.php\r\n * @return int this file's size\r\n *\/"
            },
            {
                "name": "write",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "filename",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Writes this file to the filesystem\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfsfile.write.php\r\n * @param string $filename [optional] <p>\r\n * The location to which to write the file. If none is given,\r\n * the stored filename will be used.\r\n * <\/p>\r\n * @return int the number of bytes written.\r\n *\/"
            },
            {
                "name": "getBytes",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns this file&#x00027;s contents as a string of bytes\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfsfile.getbytes.php\r\n * @return string a string of the bytes in the file.\r\n *\/"
            },
            {
                "name": "getResource",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Returns a resource that can be used to read the stored file\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfsfile.getresource.php\r\n * @return stream a resource that can be used to read the file with\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "file",
                "doc": "\/**\r\n * @var array\r\n *\/"
            },
            {
                "name": "gridfs",
                "doc": "\/**\r\n * @var MongoGridFS\r\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoGridFSCursor",
        "fqn": "\\MongoGridFSCursor",
        "type": 0,
        "extends": "MongoCursor",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "gridfs",
                        "type": "MongoGridFS",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "connection",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "ns",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "query",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Create a new cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfscursor.construct.php\r\n * @param MongoGridFS $gridfs <p>\r\n * Related GridFS collection.\r\n * <\/p>\r\n * @param resource $connection <p>\r\n * Database connection.\r\n * <\/p>\r\n * @param string $ns <p>\r\n * Full name of database and collection.\r\n * <\/p>\r\n * @param array $query <p>\r\n * Database query.\r\n * <\/p>\r\n * @param array $fields <p>\r\n * Fields to return.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "getNext",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Return the next file to which this cursor points, and advance the cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfscursor.getnext.php\r\n * @return MongoGridFSFile the next file.\r\n *\/"
            },
            {
                "name": "current",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns the current file\r\n * @link http:\/\/php.net\/manual\/en\/mongogridfscursor.current.php\r\n * @return MongoGridFSFile The current file.\r\n *\/"
            },
            {
                "name": "hasNext",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Checks if there are any more elements in this cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.hasnext.php\r\n * @return bool if there is another element.\r\n *\/"
            },
            {
                "name": "limit",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "num",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Limits the number of results returned\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.limit.php\r\n * @param int $num <p>\r\n * The number of results to return.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "batchSize",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "batchSize",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.11)<br\/>\r\n * Limits the number of elements returned in one batch.\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.batchsize.php\r\n * @param int $batchSize <p>\r\n * The number of results to return per batch. Each batch requires a\r\n * round-trip to the server.\r\n * <\/p>\r\n * <p>\r\n * If <i>batchSize<\/i> is 2 or\r\n * more, it represents the size of each batch of objects retrieved.\r\n * It can be adjusted to optimize performance and limit data transfer.\r\n * <\/p>\r\n * <p>\r\n * If <i>batchSize<\/i> is 1 or negative, it\r\n * will limit of number returned documents to the absolute value of batchSize,\r\n * and the cursor will be closed. For example if\r\n * batchSize is -10, then the server will return a maximum\r\n * of 10 documents and as many as can fit in 4MB, then close the cursor.\r\n * <\/p>\r\n * <p>\r\n * A <i>batchSize<\/i> of 1 is special, and\r\n * means the same as -1, i.e. a value of\r\n * 1 makes the cursor only capable of returning\r\n * one document.\r\n * <\/p>\r\n * <p>\r\n * Note that this feature is different from\r\n * <b>MongoCursor::limit<\/b> in that documents must fit within a\r\n * maximum size, and it removes the need to send a request to close the cursor\r\n * server-side. The batch size can be changed even after a cursor is iterated,\r\n * in which case the setting will apply on the next batch retrieval.\r\n * <\/p>\r\n * <p>\r\n * This cannot override MongoDB's limit on the amount of data it will return to\r\n * the client (i.e., if you set batch size to 1,000,000,000, MongoDB will still\r\n * only return 4-16MB of results per batch).\r\n * <\/p>\r\n * <p>\r\n * To ensure consistent behavior, the rules of\r\n * <b>MongoCursor::batchSize<\/b> and\r\n * <b>MongoCursor::limit<\/b> behave a\r\n * little complex but work \"as expected\". The rules are: hard limits override\r\n * soft limits with preference given to <b>MongoCursor::limit<\/b>\r\n * over <b>MongoCursor::batchSize<\/b>. After that, whichever is\r\n * set and lower than the other will take precedence. See below.\r\n * section for some examples.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "skip",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "num",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Skips a number of results\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.skip.php\r\n * @param int $num <p>\r\n * The number of results to skip.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "fields",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "f",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.6)<br\/>\r\n * Sets the fields for a query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.fields.php\r\n * @param array $f <p>\r\n * Fields to return (or not return).\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "addOption",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "key",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.4)<br\/>\r\n * Adds a top-level key\/value pair to a query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.addoption.php\r\n * @param string $key <p>\r\n * Fieldname to add.\r\n * <\/p>\r\n * @param mixed $value <p>\r\n * Value to add.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "snapshot",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.4)<br\/>\r\n * Use snapshot mode for the query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.snapshot.php\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "sort",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "fields",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Sorts the results by given fields\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.sort.php\r\n * @param array $fields <p>\r\n * An array of fields by which to sort. Each element in the array has as\r\n * key the field name, and as value either 1 for\r\n * ascending sort, or -1 for descending sort.\r\n * <\/p>\r\n * <p>\r\n * Each result is first sorted on the first field in the array, then (if\r\n * it exists) on the second field in the array, etc. This means that the\r\n * order of the fields in the <i>fields<\/i> array is\r\n * important. See also the examples section.\r\n * <\/p>\r\n * @return MongoCursor the same cursor that this method was called on.\r\n *\/"
            },
            {
                "name": "hint",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "index",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Gives the database a hint about the query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.hint.php\r\n * @param mixed $index <p>\r\n * Index to use for the query. If a string is passed, it should correspond\r\n * to an index name. If an array or object is passed, it should correspond\r\n * to the specification used to create the index (i.e. the first argument\r\n * to <b>MongoCollection::ensureIndex<\/b>).\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "explain",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.2)<br\/>\r\n * Return an explanation of the query, often useful for optimization and debugging\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.explain.php\r\n * @return array an explanation of the query.\r\n *\/"
            },
            {
                "name": "setFlag",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "flag",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "set",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.11)<br\/>\r\n * Sets arbitrary flags in case there is no method available the specific flag\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.setflag.php\r\n * @param int $flag <p>\r\n * Which flag to set. You can not set flag 6 (EXHAUST) as the driver does\r\n * not know how to handle them. You will get a warning if you try to use\r\n * this flag. For available flags, please refer to the wire protocol\r\n * documentation.\r\n * <\/p>\r\n * @param bool $set [optional] <p>\r\n * Whether the flag should be set (<b>TRUE<\/b>) or unset (<b>FALSE<\/b>).\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "slaveOkay",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "okay",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.4)<br\/>\r\n * Sets whether this query can be done on a secondary\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.slaveokay.php\r\n * @param bool $okay [optional] <p>\r\n * If it is okay to query the secondary.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "tailable",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "tail",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.4)<br\/>\r\n * Sets whether this cursor will be left open after fetching the last results\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.tailable.php\r\n * @param bool $tail [optional] <p>\r\n * If the cursor should be tailable.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "immortal",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "liveForever",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.1)<br\/>\r\n * Sets whether this cursor will timeout\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.immortal.php\r\n * @param bool $liveForever [optional] <p>\r\n * If the cursor should be immortal.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "awaitData",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "wait",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.11)<br\/>\r\n * Sets whether this cursor will wait for a while for a tailable cursor to return more data\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.awaitdata.php\r\n * @param bool $wait [optional] <p>\r\n * If the cursor should wait for more data to become available.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "partial",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "okay",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.2.0)<br\/>\r\n * If this query should fetch partial results from mongos if a shard is down\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.partial.php\r\n * @param bool $okay [optional] <p>\r\n * If receiving partial results is okay.\r\n * <\/p>\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "getReadPreference",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.3)<br\/>\r\n * Get the read preference for this query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.getreadpreference.php\r\n * @return array\r\n *\/"
            },
            {
                "name": "setReadPreference",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "read_preference",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "tags",
                        "type": "array",
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.3)<br\/>\r\n * Set the read preference for this query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.setreadpreference.php\r\n * @param string $read_preference\r\n * @param array $tags [optional]\r\n * @return MongoCursor this cursor.\r\n *\/"
            },
            {
                "name": "timeout",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "ms",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.3)<br\/>\r\n * Sets a client-side timeout for this query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.timeout.php\r\n * @param int $ms <p>\r\n * The number of milliseconds for the cursor to wait for a response. Use\r\n * -1 to wait forever. By default, the cursor will wait\r\n * MongoCursor::$timeout milliseconds.\r\n * <\/p>\r\n * @return MongoCursor This cursor.\r\n *\/"
            },
            {
                "name": "doQuery",
                "type": 2,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (No version information available, might only be in SVN)<br\/>\r\n * Execute the query.\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.doquery.php\r\n * @return void <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "info",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.0.5)<br\/>\r\n * Gets the query, fields, limit, and skip for this cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.info.php\r\n * @return array the namespace, limit, skip, query, and fields for this cursor.\r\n *\/"
            },
            {
                "name": "dead",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.6)<br\/>\r\n * Checks if there are documents that have not been sent yet from the database for this cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.dead.php\r\n * @return bool if there are more results that have not been sent to the client, yet.\r\n *\/"
            },
            {
                "name": "key",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns the current result&#x00027;s _id\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.key.php\r\n * @return string The current result&#x00027;s _id as a string.\r\n *\/"
            },
            {
                "name": "next",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Advances the cursor to the next result\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.next.php\r\n * @return void <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "rewind",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Returns the cursor to the beginning of the result set\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.rewind.php\r\n * @return void <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "valid",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Checks if the cursor is reading a valid result.\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.valid.php\r\n * @return bool If the current result is not null.\r\n *\/"
            },
            {
                "name": "reset",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.0)<br\/>\r\n * Clears the cursor\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.reset.php\r\n * @return void <b>NULL<\/b>.\r\n *\/"
            },
            {
                "name": "count",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "foundOnly",
                        "type": null,
                        "byRef": false,
                        "default": "&false;"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=0.9.2)<br\/>\r\n * Counts the number of results for this query\r\n * @link http:\/\/php.net\/manual\/en\/mongocursor.count.php\r\n * @param bool $foundOnly [optional] <p>\r\n * Send cursor limit and skip information to the count function, if applicable.\r\n * <\/p>\r\n * @return int The number of documents returned by this cursor's query.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "slaveOkay",
                "doc": "\/**\r\n * @var boolean\r\n *\/"
            },
            {
                "name": "timeout",
                "doc": "\/**\r\n * @var integer\r\n *\/"
            },
            {
                "name": "gridfs",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoId",
        "fqn": "\\MongoId",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "id",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.8.0)<br\/>\r\n * Creates a new id\r\n * @link http:\/\/php.net\/manual\/en\/mongoid.construct.php\r\n * @param string $id [optional] <p>\r\n * A string to use as the id. Must be 24 hexidecimal characters. If an\r\n * invalid string is passed to this constructor, the constructor will ignore\r\n * it and create a new id value.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.8.0)<br\/>\r\n * Returns a hexidecimal representation of this id\r\n * @link http:\/\/php.net\/manual\/en\/mongoid.tostring.php\r\n * @return string This id.\r\n *\/"
            },
            {
                "name": "__set_state",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "props",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.8)<br\/>\r\n * Create a dummy MongoId\r\n * @link http:\/\/php.net\/manual\/en\/mongoid.set-state.php\r\n * @param array $props <p>\r\n * Theoretically, an array of properties used to create the new id.\r\n * However, as MongoId instances have no properties, this is not used.\r\n * <\/p>\r\n * @return MongoId A new id with the value \"000000000000000000000000\".\r\n *\/"
            },
            {
                "name": "getTimestamp",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.1)<br\/>\r\n * Gets the number of seconds since the epoch that this id was created\r\n * @link http:\/\/php.net\/manual\/en\/mongoid.gettimestamp.php\r\n * @return int the number of seconds since the epoch that this id was created. There are only\r\n * four bytes of timestamp stored, so <b>MongoDate<\/b> is a better choice\r\n * for storing exact or wide-ranging times.\r\n *\/"
            },
            {
                "name": "getHostname",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.8)<br\/>\r\n * Gets the hostname being used for this machine's ids\r\n * @link http:\/\/php.net\/manual\/en\/mongoid.gethostname.php\r\n * @return string the hostname.\r\n *\/"
            },
            {
                "name": "getPID",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.11)<br\/>\r\n * Gets the process ID\r\n * @link http:\/\/php.net\/manual\/en\/mongoid.getpid.php\r\n * @return int the PID of the <b>MongoId<\/b>.\r\n *\/"
            },
            {
                "name": "getInc",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.11)<br\/>\r\n * Gets the incremented value to create this id\r\n * @link http:\/\/php.net\/manual\/en\/mongoid.getinc.php\r\n * @return int the incremented value used to create this <b>MongoId<\/b>.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "id",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoCode",
        "fqn": "\\MongoCode",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "scope",
                        "type": "array",
                        "byRef": false,
                        "default": "array()"
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.8.3)<br\/>\r\n * Creates a new code object\r\n * @link http:\/\/php.net\/manual\/en\/mongocode.construct.php\r\n * @param string $code <p>\r\n * A string of code.\r\n * <\/p>\r\n * @param array $scope [optional] <p>\r\n * The scope to use for the code.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.8.3)<br\/>\r\n * Returns this code as a string\r\n * @link http:\/\/php.net\/manual\/en\/mongocode.tostring.php\r\n * @return string This code, the scope is not returned.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "code",
                "doc": null
            },
            {
                "name": "scope",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoRegex",
        "fqn": "\\MongoRegex",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "regex",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.8.1)<br\/>\r\n * Creates a new regular expression\r\n * @link http:\/\/php.net\/manual\/en\/mongoregex.construct.php\r\n * @param string $regex <p>\r\n * Regular expression string of the form \/expr\/flags.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.8.1)<br\/>\r\n * A string representation of this regular expression\r\n * @link http:\/\/php.net\/manual\/en\/mongoregex.tostring.php\r\n * @return string This regular expression in the form \"\/expr\/flags\".\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "regex",
                "doc": "\/**\r\n * @var string\r\n *\/"
            },
            {
                "name": "flags",
                "doc": "\/**\r\n * @var string\r\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoDate",
        "fqn": "\\MongoDate",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "sec",
                        "type": null,
                        "byRef": false,
                        "default": "time()"
                    },
                    {
                        "name": "usec",
                        "type": null,
                        "byRef": false,
                        "default": 0
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.8.1)<br\/>\r\n * Creates a new date.\r\n * @link http:\/\/php.net\/manual\/en\/mongodate.construct.php\r\n * @param int $sec [optional] <p>\r\n * Number of seconds since January 1st, 1970.\r\n * <\/p>\r\n * @param int $usec [optional] <p>\r\n * Microseconds. Please be aware though that MongoDB's resolution is\r\n * milliseconds and not microseconds, which means this\r\n * value will be truncated to millisecond resolution.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.8.1)<br\/>\r\n * Returns a string representation of this date\r\n * @link http:\/\/php.net\/manual\/en\/mongodate.tostring.php\r\n * @return string This date.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "sec",
                "doc": "\/**\r\n * @var int\r\n *\/"
            },
            {
                "name": "usec",
                "doc": "\/**\r\n * @var int\r\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoBinData",
        "fqn": "\\MongoBinData",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "data",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "type",
                        "type": null,
                        "byRef": false,
                        "default": 2
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.8.1)<br\/>\r\n * Creates a new binary data object.\r\n * @link http:\/\/php.net\/manual\/en\/mongobindata.construct.php\r\n * @param string $data <p>\r\n * Binary data.\r\n * <\/p>\r\n * @param int $type [optional] <p>\r\n * Data type.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.8.1)<br\/>\r\n * The string representation of this binary data object.\r\n * @link http:\/\/php.net\/manual\/en\/mongobindata.tostring.php\r\n * @return string the string \"&lt;Mongo Binary Data&gt;\". To access the contents of a\r\n * <b>MongoBinData<\/b>, use the bin field.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "bin",
                "doc": "\/**\r\n * @var string\r\n *\/"
            },
            {
                "name": "type",
                "doc": "\/**\r\n * @var int\r\n *\/"
            }
        ],
        "constants": [
            {
                "name": "FUNC",
                "value": 1,
                "doc": null
            },
            {
                "name": "BYTE_ARRAY",
                "value": 2,
                "doc": null
            },
            {
                "name": "UUID",
                "value": 3,
                "doc": null
            },
            {
                "name": "MD5",
                "value": 5,
                "doc": null
            },
            {
                "name": "CUSTOM",
                "value": 128,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoDBRef",
        "fqn": "\\MongoDBRef",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "create",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "collection",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "id",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "database",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.9.0)<br\/>\r\n * Creates a new database reference\r\n * @link http:\/\/php.net\/manual\/en\/mongodbref.create.php\r\n * @param string $collection <p>\r\n * Collection name (without the database name).\r\n * <\/p>\r\n * @param mixed $id <p>\r\n * The _id field of the object to which to link.\r\n * <\/p>\r\n * @param string $database [optional] <p>\r\n * Database name.\r\n * <\/p>\r\n * @return array the reference.\r\n *\/"
            },
            {
                "name": "isRef",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "ref",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.9.0)<br\/>\r\n * Checks if an array is a database reference\r\n * @link http:\/\/php.net\/manual\/en\/mongodbref.isref.php\r\n * @param mixed $ref <p>\r\n * Array or object to check.\r\n * <\/p>\r\n * @return bool <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "get",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "db",
                        "type": "MongoDB",
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "ref",
                        "type": "array",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 0.9.0)<br\/>\r\n * Fetches the object pointed to by a reference\r\n * @link http:\/\/php.net\/manual\/en\/mongodbref.get.php\r\n * @param MongoDB $db <p>\r\n * Database to use.\r\n * <\/p>\r\n * @param array $ref <p>\r\n * Reference to fetch.\r\n * <\/p>\r\n * @return array the document to which the reference refers or <b>NULL<\/b> if the document\r\n * does not exist (the reference is broken).\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "refKey",
                "doc": null
            },
            {
                "name": "idKey",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoException",
        "fqn": "\\MongoException",
        "type": 0,
        "extends": "Exception",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.construct.php\r\n * @param $message [optional]\r\n * @param $code [optional]\r\n * @param $previous [optional]\r\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception message\r\n * @link http:\/\/php.net\/manual\/en\/exception.getmessage.php\r\n * @return string the Exception message as a string.\r\n *\/"
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception code\r\n * @link http:\/\/php.net\/manual\/en\/exception.getcode.php\r\n * @return mixed the exception code as integer in\r\n * <b>Exception<\/b> but possibly as other type in\r\n * <b>Exception<\/b> descendants (for example as\r\n * string in <b>PDOException<\/b>).\r\n *\/"
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the file in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getfile.php\r\n * @return string the filename in which the exception was created.\r\n *\/"
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the line in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getline.php\r\n * @return int the line number where the exception was created.\r\n *\/"
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettrace.php\r\n * @return array the Exception stack trace as an array.\r\n *\/"
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns previous Exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.getprevious.php\r\n * @return Exception the previous <b>Exception<\/b> if available\r\n * or <b>NULL<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace as a string\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettraceasstring.php\r\n * @return string the Exception stack trace as a string.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * String representation of the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.tostring.php\r\n * @return string the string representation of the exception.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "message",
                "doc": null
            },
            {
                "name": "code",
                "doc": null
            },
            {
                "name": "file",
                "doc": null
            },
            {
                "name": "line",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoConnectionException",
        "fqn": "\\MongoConnectionException",
        "type": 0,
        "extends": "MongoException",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.construct.php\r\n * @param $message [optional]\r\n * @param $code [optional]\r\n * @param $previous [optional]\r\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception message\r\n * @link http:\/\/php.net\/manual\/en\/exception.getmessage.php\r\n * @return string the Exception message as a string.\r\n *\/"
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception code\r\n * @link http:\/\/php.net\/manual\/en\/exception.getcode.php\r\n * @return mixed the exception code as integer in\r\n * <b>Exception<\/b> but possibly as other type in\r\n * <b>Exception<\/b> descendants (for example as\r\n * string in <b>PDOException<\/b>).\r\n *\/"
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the file in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getfile.php\r\n * @return string the filename in which the exception was created.\r\n *\/"
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the line in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getline.php\r\n * @return int the line number where the exception was created.\r\n *\/"
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettrace.php\r\n * @return array the Exception stack trace as an array.\r\n *\/"
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns previous Exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.getprevious.php\r\n * @return Exception the previous <b>Exception<\/b> if available\r\n * or <b>NULL<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace as a string\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettraceasstring.php\r\n * @return string the Exception stack trace as a string.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * String representation of the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.tostring.php\r\n * @return string the string representation of the exception.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "message",
                "doc": null
            },
            {
                "name": "code",
                "doc": null
            },
            {
                "name": "file",
                "doc": null
            },
            {
                "name": "line",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoCursorException",
        "fqn": "\\MongoCursorException",
        "type": 0,
        "extends": "MongoException",
        "methods": [
            {
                "name": "getHost",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.0)<br\/>\r\n * The hostname of the server that encountered the error\r\n * @link http:\/\/php.net\/manual\/en\/mongocursorexception.gethost.php\r\n * @return string the hostname, or NULL if the hostname is unknown.\r\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.construct.php\r\n * @param $message [optional]\r\n * @param $code [optional]\r\n * @param $previous [optional]\r\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception message\r\n * @link http:\/\/php.net\/manual\/en\/exception.getmessage.php\r\n * @return string the Exception message as a string.\r\n *\/"
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception code\r\n * @link http:\/\/php.net\/manual\/en\/exception.getcode.php\r\n * @return mixed the exception code as integer in\r\n * <b>Exception<\/b> but possibly as other type in\r\n * <b>Exception<\/b> descendants (for example as\r\n * string in <b>PDOException<\/b>).\r\n *\/"
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the file in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getfile.php\r\n * @return string the filename in which the exception was created.\r\n *\/"
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the line in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getline.php\r\n * @return int the line number where the exception was created.\r\n *\/"
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettrace.php\r\n * @return array the Exception stack trace as an array.\r\n *\/"
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns previous Exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.getprevious.php\r\n * @return Exception the previous <b>Exception<\/b> if available\r\n * or <b>NULL<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace as a string\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettraceasstring.php\r\n * @return string the Exception stack trace as a string.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * String representation of the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.tostring.php\r\n * @return string the string representation of the exception.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "message",
                "doc": null
            },
            {
                "name": "code",
                "doc": null
            },
            {
                "name": "file",
                "doc": null
            },
            {
                "name": "line",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoCursorTimeoutException",
        "fqn": "\\MongoCursorTimeoutException",
        "type": 0,
        "extends": "MongoCursorException",
        "methods": [
            {
                "name": "getHost",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.0)<br\/>\r\n * The hostname of the server that encountered the error\r\n * @link http:\/\/php.net\/manual\/en\/mongocursorexception.gethost.php\r\n * @return string the hostname, or NULL if the hostname is unknown.\r\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.construct.php\r\n * @param $message [optional]\r\n * @param $code [optional]\r\n * @param $previous [optional]\r\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception message\r\n * @link http:\/\/php.net\/manual\/en\/exception.getmessage.php\r\n * @return string the Exception message as a string.\r\n *\/"
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception code\r\n * @link http:\/\/php.net\/manual\/en\/exception.getcode.php\r\n * @return mixed the exception code as integer in\r\n * <b>Exception<\/b> but possibly as other type in\r\n * <b>Exception<\/b> descendants (for example as\r\n * string in <b>PDOException<\/b>).\r\n *\/"
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the file in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getfile.php\r\n * @return string the filename in which the exception was created.\r\n *\/"
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the line in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getline.php\r\n * @return int the line number where the exception was created.\r\n *\/"
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettrace.php\r\n * @return array the Exception stack trace as an array.\r\n *\/"
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns previous Exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.getprevious.php\r\n * @return Exception the previous <b>Exception<\/b> if available\r\n * or <b>NULL<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace as a string\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettraceasstring.php\r\n * @return string the Exception stack trace as a string.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * String representation of the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.tostring.php\r\n * @return string the string representation of the exception.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "message",
                "doc": null
            },
            {
                "name": "code",
                "doc": null
            },
            {
                "name": "file",
                "doc": null
            },
            {
                "name": "line",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoGridFSException",
        "fqn": "\\MongoGridFSException",
        "type": 0,
        "extends": "MongoException",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.construct.php\r\n * @param $message [optional]\r\n * @param $code [optional]\r\n * @param $previous [optional]\r\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception message\r\n * @link http:\/\/php.net\/manual\/en\/exception.getmessage.php\r\n * @return string the Exception message as a string.\r\n *\/"
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception code\r\n * @link http:\/\/php.net\/manual\/en\/exception.getcode.php\r\n * @return mixed the exception code as integer in\r\n * <b>Exception<\/b> but possibly as other type in\r\n * <b>Exception<\/b> descendants (for example as\r\n * string in <b>PDOException<\/b>).\r\n *\/"
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the file in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getfile.php\r\n * @return string the filename in which the exception was created.\r\n *\/"
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the line in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getline.php\r\n * @return int the line number where the exception was created.\r\n *\/"
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettrace.php\r\n * @return array the Exception stack trace as an array.\r\n *\/"
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns previous Exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.getprevious.php\r\n * @return Exception the previous <b>Exception<\/b> if available\r\n * or <b>NULL<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace as a string\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettraceasstring.php\r\n * @return string the Exception stack trace as a string.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * String representation of the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.tostring.php\r\n * @return string the string representation of the exception.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "message",
                "doc": null
            },
            {
                "name": "code",
                "doc": null
            },
            {
                "name": "file",
                "doc": null
            },
            {
                "name": "line",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoResultException",
        "fqn": "\\MongoResultException",
        "type": 0,
        "extends": "MongoException",
        "methods": [
            {
                "name": "getDocument",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;=1.3.0)<br\/>\r\n * Retrieve the full result document\r\n * @link http:\/\/php.net\/manual\/en\/mongoresultexception.getdocument.php\r\n * @return array The full result document as an array, including partial data if available and\r\n * additional keys.\r\n *\/"
            },
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "message",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "code",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    },
                    {
                        "name": "previous",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Construct the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.construct.php\r\n * @param $message [optional]\r\n * @param $code [optional]\r\n * @param $previous [optional]\r\n *\/"
            },
            {
                "name": "getMessage",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception message\r\n * @link http:\/\/php.net\/manual\/en\/exception.getmessage.php\r\n * @return string the Exception message as a string.\r\n *\/"
            },
            {
                "name": "getCode",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the Exception code\r\n * @link http:\/\/php.net\/manual\/en\/exception.getcode.php\r\n * @return mixed the exception code as integer in\r\n * <b>Exception<\/b> but possibly as other type in\r\n * <b>Exception<\/b> descendants (for example as\r\n * string in <b>PDOException<\/b>).\r\n *\/"
            },
            {
                "name": "getFile",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the file in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getfile.php\r\n * @return string the filename in which the exception was created.\r\n *\/"
            },
            {
                "name": "getLine",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the line in which the exception occurred\r\n * @link http:\/\/php.net\/manual\/en\/exception.getline.php\r\n * @return int the line number where the exception was created.\r\n *\/"
            },
            {
                "name": "getTrace",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettrace.php\r\n * @return array the Exception stack trace as an array.\r\n *\/"
            },
            {
                "name": "getPrevious",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.3.0)<br\/>\r\n * Returns previous Exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.getprevious.php\r\n * @return Exception the previous <b>Exception<\/b> if available\r\n * or <b>NULL<\/b> otherwise.\r\n *\/"
            },
            {
                "name": "getTraceAsString",
                "type": 33,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * Gets the stack trace as a string\r\n * @link http:\/\/php.net\/manual\/en\/exception.gettraceasstring.php\r\n * @return string the Exception stack trace as a string.\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PHP 5 &gt;= 5.1.0)<br\/>\r\n * String representation of the exception\r\n * @link http:\/\/php.net\/manual\/en\/exception.tostring.php\r\n * @return string the string representation of the exception.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "message",
                "doc": null
            },
            {
                "name": "code",
                "doc": null
            },
            {
                "name": "file",
                "doc": null
            },
            {
                "name": "line",
                "doc": null
            },
            {
                "name": "document",
                "doc": null
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoTimestamp",
        "fqn": "\\MongoTimestamp",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "sec",
                        "type": null,
                        "byRef": false,
                        "default": "time()"
                    },
                    {
                        "name": "inc",
                        "type": null,
                        "byRef": false,
                        "default": null
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.1)<br\/>\r\n * Creates a new timestamp.\r\n * @link http:\/\/php.net\/manual\/en\/mongotimestamp.construct.php\r\n * @param int $sec [optional] <p>\r\n * Number of seconds since January 1st, 1970.\r\n * <\/p>\r\n * @param int $inc [optional] <p>\r\n * Increment.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.1)<br\/>\r\n * Returns a string representation of this timestamp\r\n * @link http:\/\/php.net\/manual\/en\/mongotimestamp.tostring.php\r\n * @return string The seconds since epoch represented by this timestamp.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "sec",
                "doc": "\/**\r\n * @var int\r\n *\/"
            },
            {
                "name": "inc",
                "doc": "\/**\r\n * @var int\r\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoInt32",
        "fqn": "\\MongoInt32",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.9)<br\/>\r\n * Creates a new 32-bit integer.\r\n * @link http:\/\/php.net\/manual\/en\/mongoint32.construct.php\r\n * @param string $value <p>\r\n * A number.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.9)<br\/>\r\n * Returns the string representation of this 32-bit integer.\r\n * @link http:\/\/php.net\/manual\/en\/mongoint32.tostring.php\r\n * @return string the string representation of this integer.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "value",
                "doc": "\/**\r\n * @var string\r\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoInt64",
        "fqn": "\\MongoInt64",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "__construct",
                "type": 1,
                "byRef": false,
                "params": [
                    {
                        "name": "value",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.9)<br\/>\r\n * Creates a new 64-bit integer.\r\n * @link http:\/\/php.net\/manual\/en\/mongoint64.construct.php\r\n * @param string $value <p>\r\n * A number.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "__toString",
                "type": 1,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.0.9)<br\/>\r\n * Returns the string representation of this 64-bit integer.\r\n * @link http:\/\/php.net\/manual\/en\/mongoint64.tostring.php\r\n * @return string the string representation of this integer.\r\n *\/"
            }
        ],
        "properties": [
            {
                "name": "value",
                "doc": "\/**\r\n * @var string\r\n *\/"
            }
        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoLog",
        "fqn": "\\MongoLog",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "setLevel",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "level",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.2.3)<br\/>\r\n * Sets logging level\r\n * @link http:\/\/php.net\/manual\/en\/mongolog.setlevel.php\r\n * @param int $level <p>\r\n * The levels you would like to log.\r\n * <\/p>\r\n * @return void\r\n *\/"
            },
            {
                "name": "getLevel",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.2.3)<br\/>\r\n * Gets the log level\r\n * @link http:\/\/php.net\/manual\/en\/mongolog.getlevel.php\r\n * @return int the current level.\r\n *\/"
            },
            {
                "name": "setModule",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "module",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.2.3)<br\/>\r\n * Sets driver functionality to log\r\n * @link http:\/\/php.net\/manual\/en\/mongolog.setmodule.php\r\n * @param int $module <p>\r\n * The module(s) you would like to log.\r\n * <\/p>\r\n * @return void\r\n *\/"
            },
            {
                "name": "getModule",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.2.3)<br\/>\r\n * Gets the modules currently being logged\r\n * @link http:\/\/php.net\/manual\/en\/mongolog.getmodule.php\r\n * @return int the modules currently being logged.\r\n *\/"
            },
            {
                "name": "setCallback",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "log_function",
                        "type": "callable",
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.3.0)<br\/>\r\n * Set a callback function to be called on events\r\n * @link http:\/\/php.net\/manual\/en\/mongolog.setcallback.php\r\n * @param callable $log_function <p>\r\n * The function to be called on events.\r\n * <\/p>\r\n * <p>\r\n * The function should have the following prototype\r\n * <\/p>\r\n * <p>\r\n * <b>log_function<\/b>\r\n * <b>int<i>module<\/i><\/b>\r\n * <b>int<i>level<\/i><\/b>\r\n * <b>string<i>message<\/i><\/b>\r\n * <i>module<\/i>\r\n * One of the MongoLog\r\n * module constants.\r\n * @return void <b>TRUE<\/b> on success or <b>FALSE<\/b> on failure.\r\n *\/"
            },
            {
                "name": "getCallback",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.3.0)<br\/>\r\n * Retrieve the previously set callback function name\r\n * @link http:\/\/php.net\/manual\/en\/mongolog.getcallback.php\r\n * @return void the callback function name, or <b>FALSE<\/b> if not set yet.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [
            {
                "name": "NONE",
                "value": 0,
                "doc": null
            },
            {
                "name": "WARNING",
                "value": 1,
                "doc": null
            },
            {
                "name": "INFO",
                "value": 2,
                "doc": null
            },
            {
                "name": "FINE",
                "value": 4,
                "doc": null
            },
            {
                "name": "RS",
                "value": 1,
                "doc": null
            },
            {
                "name": "POOL",
                "value": 1,
                "doc": null
            },
            {
                "name": "PARSE",
                "value": 16,
                "doc": null
            },
            {
                "name": "CON",
                "value": 2,
                "doc": null
            },
            {
                "name": "IO",
                "value": 4,
                "doc": null
            },
            {
                "name": "SERVER",
                "value": 8,
                "doc": null
            },
            {
                "name": "ALL",
                "value": 31,
                "doc": null
            }
        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoPool",
        "fqn": "\\MongoPool",
        "type": 0,
        "extends": "",
        "methods": [
            {
                "name": "info",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.2.3)<br\/>\r\n * Returns information about all connection pools.\r\n * @link http:\/\/php.net\/manual\/en\/mongopool.info.php\r\n * @return array Each connection pool has an identifier, which starts with the host. For each\r\n * pool, this function shows the following fields:\r\n * <i>in use<\/i>\r\n * <p>\r\n * The number of connections currently being used by\r\n * <b>Mongo<\/b> instances.\r\n * <\/p>\r\n * <i>in pool<\/i>\r\n * <p>\r\n * The number of connections currently in the pool (not being used).\r\n * <\/p>\r\n * <i>remaining<\/i>\r\n * <p>\r\n * The number of connections that could be created by this pool. For\r\n * example, suppose a pool had 5 connections remaining and 3 connections in\r\n * the pool. We could create 8 new instances of\r\n * <b>MongoClient<\/b> before we exhausted this pool\r\n * (assuming no instances of <b>MongoClient<\/b> went out of\r\n * scope, returning their connections to the pool).\r\n * <\/p>\r\n * <p>\r\n * A negative number means that this pool will spawn unlimited connections.\r\n * <\/p>\r\n * <p>\r\n * Before a pool is created, you can change the max number of connections by\r\n * calling <b>Mongo::setPoolSize<\/b>. Once a pool is showing\r\n * up in the output of this function, its size cannot be changed.\r\n * <\/p>\r\n * <i>total<\/i>\r\n * <p>\r\n * The total number of connections allowed for this pool. This should be\r\n * greater than or equal to \"in use\" + \"in pool\" (or -1).\r\n * <\/p>\r\n * <i>timeout<\/i>\r\n * <p>\r\n * The socket timeout for connections in this pool. This is how long\r\n * connections in this pool will attempt to connect to a server before\r\n * giving up.\r\n * <\/p>\r\n * <i>waiting<\/i>\r\n * <p>\r\n * If you have capped the pool size, workers requesting connections from\r\n * the pool may block until other workers return their connections. This\r\n * field shows how many milliseconds workers have blocked for connections to\r\n * be released. If this number keeps increasing, you may want to use\r\n * <b>MongoPool::setSize<\/b> to add more connections to your\r\n * pool.\r\n * <\/p>\r\n *\/"
            },
            {
                "name": "setSize",
                "type": 9,
                "byRef": false,
                "params": [
                    {
                        "name": "size",
                        "type": null,
                        "byRef": false,
                        "default": ""
                    }
                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.2.3)<br\/>\r\n * Set the size for future connection pools.\r\n * @link http:\/\/php.net\/manual\/en\/mongopool.setsize.php\r\n * @param int $size <p>\r\n * The max number of connections future pools will be able to create.\r\n * Negative numbers mean that the pool will spawn an infinite number of\r\n * connections.\r\n * <\/p>\r\n * @return bool the former value of pool size.\r\n *\/"
            },
            {
                "name": "getSize",
                "type": 9,
                "byRef": false,
                "params": [

                ],
                "doc": "\/**\r\n * (PECL mongo &gt;= 1.2.3)<br\/>\r\n * Get pool size for connection pools\r\n * @link http:\/\/php.net\/manual\/en\/mongopool.getsize.php\r\n * @return int the current pool size.\r\n *\/"
            }
        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoMaxKey",
        "fqn": "\\MongoMaxKey",
        "type": 0,
        "extends": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Class",
        "name": "MongoMinKey",
        "fqn": "\\MongoMinKey",
        "type": 0,
        "extends": "",
        "methods": [

        ],
        "properties": [

        ],
        "constants": [

        ]
    },
    {
        "stmtType": "Function",
        "name": "bson_encode",
        "params": [
            {
                "name": "anything",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Function",
        "name": "bson_decode",
        "params": [
            {
                "name": "bson",
                "type": null,
                "byRef": false,
                "default": ""
            }
        ]
    },
    {
        "stmtType": "Constant",
        "name": "MONGO_STREAMS",
        "value": 1
    }
]
